?gng_m1
??gng_m1
library(hBayesDM)
?gng_m1
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
output1 = gng_m1(data="example", niter=2000, nwarmup=1000, nchain=4, ncore=4)
output1 = gng_m1(data="example", niter=2000, nwarmup=1000, nchain=4, ncore=4)
dataPath = "N:\Users\phaller\R_hBayesDM\gng_exampleData.txt")
dataPath = "N:\\Users\\phaller\\R_hBayesDM\\gng_exampleData.txt")
dataPath = "N:\\Users\\phaller\\R_hBayesDM\\gng_exampleData.txt"
output1 = gng_m1(data="example", niter=2000, nwarmup=1000, nchain=4, ncore=4)
output1 = gng_m1(data=dataPath, niter=2000, nwarmup=1000, nchain=4, ncore=4)
library(hBayesDM)
output1 = gng_m1(data=dataPath, niter=2000, nwarmup=1000, nchain=4, ncore=4)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages("xfun")
pkgbuild::has_build_tools(debug = TRUE)
library("rstan")
rstan_options(auto_write = TRUE)
library(hBayesDM)
dataPath = "N:\\Users\\phaller\\R_hBayesDM\\gng_exampleData.txt"
output1 = gng_m1(data=dataPath, niter=2000, nwarmup=1000, nchain=4, ncore=4)
library(hBayesDM)
dataPath = "N:\\Users\\phaller\\R_hBayesDM\\gng_exampleData.txt"
output1 = gng_m1(data=dataPath, niter=2000, nwarmup=1000, nchain=4, ncore=4)
readLines(normalizePath("~/.R/Makevars"))
remove.packages("StanHeaders")
system.file("lib32", package = "StanHeaders")
install.packages("StanHeaders")
install.packages("StanHeaders")
library("rstan")
library(hBayesDM)
dataPath = "N:\\Users\\phaller\\R_hBayesDM\\gng_exampleData.txt"
output1 = gng_m1(data=dataPath, niter=2000, nwarmup=1000, nchain=4, ncore=4)
remove.packages("rstan")
remove.packages("StanHeaders")
remove.packages("rstantools")
remove.packages("hBayesDM")
install.packages("rstan", lib="\\idnetapp-homes3.uzh.ch\phalle$\Documents\R\win-library\3.5")
install.packages("rstan", lib="\\\idnetapp-homes3.uzh.ch\\phalle$\\Documents\\R\\win-library\\3.5")
install.packages("rstan", lib="\\idnetapp-homes3.uzh.ch\\phalle$\\Documents\\R\\win-library\\3.5")
install.packages("rstan", lib="\\\\idnetapp-homes3.uzh.ch\\phalle$\\Documents\\R\\win-library\\3.5")
library('rstan')
install.packages("rstantools", lib="\\\\idnetapp-homes3.uzh.ch\\phalle$\\Documents\\R\\win-library\\3.5")
install.packages("hBayesDM", lib="\\\\idnetapp-homes3.uzh.ch\\phalle$\\Documents\\R\\win-library\\3.5")
library(hBayesDM)
dataPath = "N:\\Users\\phaller\\R_hBayesDM\\gng_exampleData.txt"
output1 = gng_m1(data=dataPath, niter=2000, nwarmup=1000, nchain=4, ncore=4)
.libPaths()
remove.packages("rstan")
remove.packages("StanHeaders")
remove.packages("rstantools")
remove.packages("hBayesDM")
install.packages("rstan", lib="C:\\Program Files\\R\\R-3.5.2")
install.packages("rstan", lib = "C:\\Program Files\\R\\R-3.5.2")
install.packages("rstan", lib="C:\\Program Files\\R\\R-3.5.2\\library")
install.packages("rstan", lib="C:\\Program Files\\R\\R-3.5.2\\library")
library('rstan')
install.packages("rstantools", lib="C:\\Program Files\\R\\R-3.5.2\\library")
install.packages("hBayesDM", lib="C:\\Program Files\\R\\R-3.5.2\\library")
library(hBayesDM)
library(hBayesDM)
dataPath = "N:\\Users\\phaller\\R_hBayesDM\\gng_exampleData.txt"
output1 = gng_m1(data=dataPath, niter=2000, nwarmup=1000, nchain=4, ncore=4)
remove.packages('rcpp')
install.packages("Rcpp", lib="C:\\Program Files\\R\\R-3.5.2\\library")
install.packages("Rcpp", lib = "C:\\Program Files\\R\\R-3.5.2\\library")
remove.packages("hBayesDM")
install.packages("hBayesDM", lib="C:\\Program Files\\R\\R-3.5.2\\library")
library(hBayesDM)
dataPath = "N:\\Users\\phaller\\R_hBayesDM\\gng_exampleData.txt"
output1 = gng_m1(data=dataPath, niter=2000, nwarmup=1000, nchain=4, ncore=4)
pkgbuild::has_build_tools(debug = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, ifelse(.Platform$OS.type == "windows", "Makevars.win", "Makevars"))
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS=-O3 -march=native -mtune=native",
if( grepl("^darwin", R.version$os)) "CXX14FLAGS += -arch x86_64 -ftemplate-depth-256" else
if (.Platform$OS.type == "windows") "CXX11FLAGS=-O3 -march=native -mtune=native" else
"CXX14FLAGS += -fPIC",
file = M, sep = "\n", append = TRUE)
library("rstan")
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
library("rstan")
detach("package:rstan", unload=TRUE)
library("rstan")
dataPath = "N:\\Users\\phaller\\R_hBayesDM\\gng_exampleData.txt"
output1 = gng_m1(data=dataPath, niter=2000, nwarmup=1000, nchain=4, ncore=4)
pkgbuild::has_build_tools(debug = TRUE)
library(hBayesDM)
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
.libPaths()
library(hBayesDM)
install.packages("hBayesDM", lib="C:\\Program Files\\R\\R-3.5.2\\library")
install.packages("hBayesDM", lib = "C:\\Program Files\\R\\R-3.5.2\\library")
install.packages("hBayesDM", lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
library("hBayesDM", lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
library("hBayesDM",dependencies = TRUE, lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
detach("package:Rcpp", unload=TRUE)
detach("package:hBayesDM", unload=TRUE)
library("rstan",lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
library("Rcpp",lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
library("Rcpp",lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
detach("package:StanHeaders", unload=TRUE)
detach("package:rstan", unload=TRUE)
detach("package:Rcpp", unload=TRUE)
detach("package:hBayesDM", unload=TRUE)
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan",lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
library("Rcpp",lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
library("hBayesDM",lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
.libPaths()
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
library("hBayesDM")
library("hBayesDM")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
detach("package:hBayesDM", unload=TRUE)
.libPaths()
library(hBayesDM)
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
detach("package:hBayesDM", unload=TRUE)
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
detach("package:hBayesDM", unload=TRUE)
detach("package:Rcpp", unload=TRUE)
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
library("hBayesDM")
detach("package:hBayesDM", unload=TRUE)
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("StanHeaders", lib.loc="\\\\idnetapp-homes3.uzh.ch/phalle$/Documents/R/win-library/3.5")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
install.packages("StanHeaders", lib="C:\\Program Files\\R\\R-3.5.2\\library")
install.packages("StanHeaders", lib = "C:\\Program Files\\R\\R-3.5.2\\library")
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM")
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
.libPaths()
# output may look like this
#[1] "\\\\idnetapp-homes3.uzh.ch/phalle$/Documents/R/win-library/3.5"
#[2] "C:/Program Files/R/R-3.5.2/library"
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
#install.packages("rstan", lib="C:\\Program Files\\R\\R-3.5.2\\library")
#install.packages("StanHeaders", lib="C:\\Program Files\\R\\R-3.5.2\\library")
#install.packages("rstantools", lib="C:\\Program Files\\R\\R-3.5.2\\library")
#install.packages("hBayesDM", lib="C:\\Program Files\\R\\R-3.5.2\\library")
#install.packages("Rcpp", lib="C:\\Program Files\\R\\R-3.5.2\\library")
# after successful installation, load required packages
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
dataPath = "N:/studies/AllRead/Feedback learning/ddmodeling/children_abmp_fb_as_choice"
ddm_model_abmp_adults = choiceRT_ddm(
paste(dataPath, "model_input_abmp_children_190402.txt", sep="/"), niter=4000, nwarmup=1000, nchain=4, ncore=4, inits="fixed",
RTbound=0.05)
X <- c(11,12,13,14,21,22,23,24,31,32,33,34)
sample(X)
X <- c(11,12,13,14,21,22,23,24,31,32,33,34,11,12,13,14,21,22,23,24,31,32,33,34,11,12,13,14,21,22,23,24,31,32,33,34)
sample(X)
length(X)
sample(X)
sample(X)
sample(X)
sample(X)
sample(X)
X <- c(rep(112,113,121,131,221,223,212,232,331,332,313,323),3)
X
X <- rep(c(112,113,121,131,221,223,212,232,331,332,313,323),3)
X
length(X)
sample(X)
sample(X)
sample(X)
sample(X)
sample(X)
sample(X)
sample(X)
install.packages("RWiener")
library(RWiener)
stim <- c(112,121,113,131,114,141,221,212,223,232,224,242,331,313,332,323,334,343)
length(stim)
stim <- rep(stim,2)
stim
sample(stim,replace=FALSE)
sample(stim,replace=FALSE)
sample(stim,replace=FALSE)
sample(stim,replace=FALSE)
sample(stim,replace=FALSE)
sample(stim,replace=FALSE)
install.packages("rtdists", lib="C:/Program Files/R/R-3.5.2/library")
require(rtdist)
require(rtdists)
example(Diffusion)
library(RWiener)
library(ggplot2)
#rwiener(n, alpha,tau,beta,delta)
#restrictions: 0 < β < 1, α > 0, τ > 0
dat <- rwiener(20,0.5,1,0.5,0.5)
ggplot(dat) + geom_histogram() + aes(x=q, fil=)
ggplot(dat) + geom_histogram() + aes(x=resp)
ggplot(dat) + geom_histogram() + aes(x=resp)
ggplot(dat) + geom_histograms(stat="count") + aes(x=resp)
ggplot(dat) + geom_histogram(stat="count") + aes(x=resp)
ggplot(dat) + geom_histogram() + aes(x=q, fill=resp)
ggplot(dat) + geom_smooth() + aes(x=q, fill=resp)
ggplot(dat) + geom_density() + aes(x=q, fill=resp)
wiener_plot(dat)
#rwiener(n, alpha,tau,beta,delta)
#restrictions: 0 < β < 1, α > 0, τ > 0
dat <- rwiener(20,2,0.1,0.5,0.5)
wiener_plot(dat)
#rwiener(n, alpha,tau,beta,delta)
#restrictions: 0 < β < 1, α > 0, τ > 0
dat <- rwiener(20,2,0.1,0.5,0.6)
wiener_plot(dat)
#rwiener(n, alpha,tau,beta,delta)
#restrictions: 0 < β < 1, α > 0, τ > 0
dat <- rwiener(20,3,0.1,0.5,0.6)
wiener_plot(dat)
#rwiener(n, alpha,tau,beta,delta)
#restrictions: 0 < β < 1, α > 0, τ > 0
dat <- rwiener(20,2.5,0.1,0.5,0.6)
wiener_plot(dat)
#rwiener(n, alpha,tau,beta,delta)
#restrictions: 0 < β < 1, α > 0, τ > 0
dat <- rwiener(20,2.5,0.1,0.5,0.7)
wiener_plot(dat)
#rwiener(n, alpha,tau,beta,delta)
#restrictions: 0 < β < 1, α > 0, τ > 0
dat <- rwiener(20,2.5,0.1,0.5,0.6)
wiener_plot(dat)
#rwiener(n, alpha,tau,beta,delta)
#restrictions: 0 < β < 1, α > 0, τ > 0
dat <- rwiener(20,2.,0.1,0.5,0.6)
wiener_plot(dat)
.libPaths()
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
#install.packages("rstan", lib="C:\\Program Files\\R\\R-3.5.2\\library")
#install.packages("StanHeaders", lib="C:\\Program Files\\R\\R-3.5.2\\library")
#install.packages("rstantools", lib="C:\\Program Files\\R\\R-3.5.2\\library")
#install.packages("hBayesDM", lib="C:\\Program Files\\R\\R-3.5.2\\library")
#install.packages("Rcpp", lib="C:\\Program Files\\R\\R-3.5.2\\library")
# after successful installation, load required packages
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
### data loading and preprocessing
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
model_path <- paste0(path,"/rlddm_invlog.stan")
data_path <- paste0(path,"/test_input.txt")
setwd(path)
raw_data <- data.table::fread(file = data_path, header = TRUE, sep = "\t", data.table = TRUE,
fill = TRUE, stringsAsFactors = TRUE, logical01 = FALSE)
View(raw_data)
raw_data <- cbind(rep(substr(data_path,1,12),dim(raw_data)[1]),raw_data)
#D<-D[D$resp!=0,] # remove 'too slow ' responses
### Rename and transform some columns
colnames(raw_data)[1] <- "subjID"
raw_data$rt <- raw_data$rt/1000
names(raw_data)[names(raw_data)=="rt"] <- "RT"
# automatically filter missed responses (since RT = 0)
raw_data <- raw_data[which(raw_data$RT > 0.15),]
raw_data$subjID = rep('01',nrow(raw_data))
# fb = 0 incorrect, fb = 1 correct, (fb = 2 missed)
names(raw_data)[names(raw_data)=="fb"] <- "correct"
## prepare data for jags
#raw_data$row <- seq.int(nrow(raw_data))
DT_trials <- raw_data[, .N, by = "subjID"]
subjs     <- DT_trials$subjID
n_subj    <- length(subjs)
# get minRT
minRT <- with(raw_data, aggregate(RT, by = list(y = subjID), FUN = min)[["x"]])
ifelse(is.null(dim(minRT)),minRT<-as.array(minRT))
# assign new trial number for excluded decisions
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$trial <- seq.int(nrow(raw_data[sub,]))
}
# first is Sx1 matrix identifying all first trials of a subject for each choice
first <- which(raw_data$trial==1)
# if N=1 transform int to 1-d array
ifelse(is.null(dim(first)),first<-as.array(first))
# last is a Sx1 matrix identifying all last trials of a subject for each choice
last <- as.integer(first + DT_trials$N - 1)
ifelse(is.null(dim(last)),last<-as.array(last))
# incorrect is the inverse vector of choice and is needed to update the ev for the non-choices
raw_data$incorrect <- as.integer(ifelse(raw_data$correct==1, 0, 1))
# define the values for the rewards
value <- ifelse(raw_data$correct==1, 1, 0)
## all RT with negative choices -> -1
#new_RT <- ifelse(raw_data$correct==1, raw_data$RT*-1, raw_data$RT)
## # obs
n_trials <- nrow(raw_data)
##
stims <- raw_data$aStim
# encoding for simulation: lower (incorrect) response=1, upper (correct) response =2
raw_data$response = raw_data$correct+1
raw_data$nonresponse = abs(raw_data$correct-2)
dat <- list("N" = n_subj, "T"=n_trials,"RTbound" = 0.15,"minRT" = minRT, "iter" = raw_data$trial, "response" = raw_data$response,"nonresponse" = raw_data$nonresponse,
"RT" = raw_data$RT, "first" = first, "last" = last, "value"=value, "stims" = stims)  # names list of numbers
stanmodel_invlog <- rstan::stan_model(model_path)
