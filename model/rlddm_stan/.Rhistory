model_path <- paste0(path,"/rlddm.stan")
data_path <- paste0(path,"/input_6subj_wtrials_1block.txt")
setwd(path)
raw_data <- data.table::fread(file = data_path, header = TRUE, sep = "\t", data.table = TRUE,
fill = TRUE, stringsAsFactors = TRUE, logical01 = FALSE)
raw_data <- raw_data[which(raw_data$RT > 0.3),]
names(raw_data)[names(raw_data)=="choice"] <- "correct"
## prepare data for jags
#raw_data$row <- seq.int(nrow(raw_data))
DT_trials <- raw_data[, .N, by = "subjID"]
subjs     <- DT_trials$subjID
n_subj    <- length(subjs)
# get minRT
minRT <- with(raw_data, aggregate(RT, by = list(y = subjID), FUN = min)[["x"]])
# assign new trial number for excluded decisions
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$trial <- seq.int(nrow(raw_data[sub,]))
}
# first is Sx1 matrix identifying all first trials of a subject for each choice
first <- which(raw_data$trial==1)
# last is a Sx1 matrix identifying all last trials of a subject for each choice
last <- as.integer(first + DT_trials$N - 1)
# incorrect is the inverse vector of choice and is needed to update the ev for the non-choices
raw_data$incorrect <- as.integer(ifelse(raw_data$correct==1, 2, 1))
# define the values for the rewards
value <- ifelse(raw_data$correct==1, 0, 1)
## all RT with negative choices -> -1
new_RT <- ifelse(raw_data$correct==1, raw_data$RT*-1, raw_data$RT)
## # obs
n_trials <- nrow(raw_data)
dat <- list("N" = n_subj, "T"=n_trials,"RTbound" = 0.05,"minRT" = minRT, "iter" = raw_data$trial, "correct" = raw_data$correct, "incorrect" = raw_data$incorrect,
"RT" = new_RT, "first" = first, "last" = last, "value"=value)  # names list of numbers
library(rstan)
View(raw_data)
View(dat)
mu_pr <- rnorm(1,0,1)
sigma <- rnorm(1,0,0.2)
mu_pr <- rnorm(1,0,1)
aa <- rnorm(n = 1, mean = 0, s = 0.2)
while(any(aa<0)) { aa <- rnorm(n = 1, mean = 0, s = 0.2) }
sigma <- aa
aa <- rnorm(n = 1, mean = 0, s = 1)
while(any(aa<0)) { aa <- rnorm(n = 1, mean = 0, s = 1) }
alpha_pr <- aa
alpha = exp(mu_pr + sigma * alpha_pr)
mu_pr <- rnorm(1,0,1)
aa <- rnorm(n = 1, mean = 0, s = 0.2)
while(any(aa<0)) { aa <- rnorm(n = 1, mean = 0, s = 0.2) }
sigma <- aa
aa <- rnorm(n = 1, mean = 0, s = 1)
while(any(aa<0)) { aa <- rnorm(n = 1, mean = 0, s = 1) }
alpha_pr <- aa
alpha = exp(mu_pr + sigma * alpha_pr)
mu_pr <- rnorm(1,0,1)
aa <- rnorm(n = 1, mean = 0, s = 0.2)
while(any(aa<0)) { aa <- rnorm(n = 1, mean = 0, s = 0.2) }
sigma <- aa
aa <- rnorm(n = 1, mean = 0, s = 1)
while(any(aa<0)) { aa <- rnorm(n = 1, mean = 0, s = 1) }
alpha_pr <- aa
alpha = exp(mu_pr + sigma * alpha_pr)
mu_pr <- rnorm(1,0,1)
aa <- rnorm(n = 1, mean = 0, s = 0.2)
while(any(aa<0)) { aa <- rnorm(n = 1, mean = 0, s = 0.2) }
sigma <- aa
aa <- rnorm(n = 1, mean = 0, s = 1)
while(any(aa<0)) { aa <- rnorm(n = 1, mean = 0, s = 1) }
alpha_pr <- aa
alpha = exp(mu_pr + sigma * alpha_pr)
mu_pr <- rnorm(1,0,1)
aa <- rnorm(n = 1, mean = 0, s = 0.2)
while(any(aa<0)) { aa <- rnorm(n = 1, mean = 0, s = 0.2) }
sigma <- aa
aa <- rnorm(n = 1, mean = 0, s = 1)
while(any(aa<0)) { aa <- rnorm(n = 1, mean = 0, s = 1) }
alpha_pr <- aa
alpha = exp(mu_pr + sigma * alpha_pr)
mu_pr <- rnorm(1,0,1)
aa <- rnorm(n = 1, mean = 0, s = 0.2)
while(any(aa<0)) { aa <- rnorm(n = 1, mean = 0, s = 0.2) }
sigma <- aa
aa <- rnorm(n = 1, mean = 0, s = 1)
while(any(aa<0)) { aa <- rnorm(n = 1, mean = 0, s = 1) }
alpha_pr <- aa
alpha = exp(mu_pr + sigma * alpha_pr)
mu_pr <- rnorm(1,0,1)
aa <- rnorm(n = 1, mean = 0, s = 0.2)
while(any(aa<0)) { aa <- rnorm(n = 1, mean = 0, s = 0.2) }
sigma <- aa
aa <- rnorm(n = 1, mean = 0, s = 1)
while(any(aa<0)) { aa <- rnorm(n = 1, mean = 0, s = 1) }
alpha_pr <- aa
alpha = exp(mu_pr + sigma * alpha_pr)
mu_pr <- rnorm(6,0,1)
aa <- rnorm(n = 6, mean = 0, s = 0.2)
while(any(aa<0)) { aa <- rnorm(n = 6, mean = 0, s = 0.2) }
sigma <- aa
alpha = exp(mu_pr[1] + sigma[1] * alpha_pr)
aa <- rnorm(n = 1, mean = 0, s = 1)
while(any(aa<0)) { aa <- rnorm(n = 1, mean = 0, s = 1) }
alpha_pr <- aa
alpha = exp(mu_pr[1] + sigma[1] * alpha_pr)
eta_1_pr <- rnorm(1,0,1)
eta1 <- exp(mu_pr[2] + sigma[2] * eta_1_pr)
eta_2_pr <- rnorm(1,0,1)
eta2 <- exp(mu_pr[3] + sigma[3] * eta_1_pr)
aa <- rnorm(n = 1, mean = 0, s = 1)
while(any(aa<-0.5 | aa>2)) { aa <- rnorm(n = 1, mean = 0, s = 1) }
a_mod_pr <- aa
a_mod = exp(mu_pr[4] + sigma[4] * a_mod_pr)
aa <- rnorm(n = 1, mean = 0, s = 1)
while(any(aa<-0 | aa>10)) { aa <- rnorm(n = 1, mean = 0, s = 1) }
v_mod_pr <- aa
v_mod = exp(mu_pr[5] + sigma[5] * v_mod_pr)
RTbound <- 0.1
minRT <- 0.35
tau_pr <- rnorm(1,0,1)
tau_pr <- qnorm(mu_pr[6]+sigma[6]*tau_pr) * (minRT-RTbound) + RTbound
tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr)) * (minRT-RTbound) + RTbound
RTbound <- 0.1
minRT <- 0.35
tau_pr <- rnorm(1,0,1)
tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr)) * (minRT-RTbound) + RTbound
RTbound <- 0.1
minRT <- 0.35
tau_pr <- rnorm(1,0,1)
tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr)) * (minRT-RTbound) + RTbound
RTbound <- 0.1
minRT <- 0.35
tau_pr <- rnorm(1,0,1)
tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr)) * (minRT-RTbound) + RTbound
RTbound <- 0.1
minRT <- 0.35
tau_pr <- rnorm(1,0,1)
tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr)) * (minRT-RTbound) + RTbound
RTbound <- 0.1
minRT <- 0.35
tau_pr <- rnorm(1,0,1)
tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr)) * (minRT-RTbound) + RTbound
RTbound <- 0.1
minRT <- 0.35
tau_pr <- rnorm(1,0,1)
tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr)) * (minRT-RTbound) + RTbound
RTbound <- 0.1
minRT <- 0.35
tau_pr <- rnorm(1,0,1)
tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr)) * (minRT-RTbound) + RTbound
RTbound <- 0.1
minRT <- 0.35
tau_pr <- rnorm(1,0,1)
tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr)) * (minRT-RTbound) + RTbound
RTbound <- 0.1
minRT <- 0.35
tau_pr <- rnorm(1,0,1)
tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr)) * (minRT-RTbound) + RTbound
while(any(tau < RTbound | tau > minRT)) {tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr)) * (minRT-RTbound) + RTbound}
while(any(tau<RTbound | tau>minRT)) {tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr)) * (minRT-RTbound) + RTbound}
while((tau<RTbound | tau>minRT)) {tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr)) * (minRT-RTbound) + RTbound}
tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr)) * (minRT-RTbound) + RTbound
while(any(tau<RTbound | tau>minRT)) {tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr)) * (minRT-RTbound) + RTbound}
tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr)) * (minRT-RTbound) + RTbound
tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr)) * (minRT-RTbound) + RTbound
tau_pr <- rnorm(1,0,1)
tau_pr <- rnorm(1,0,1)
tau_pr <- rnorm(1,0,1)
tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr)) * (minRT-RTbound) + RTbound
tau_pr <- rnorm(1,0,1)
tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr)) * (minRT-RTbound) + RTbound
?qnorm
tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr),mean=0, s=1) * (minRT-RTbound) + RTbound
tau_pr <- rnorm(1,0,1)
tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr),mean=0, s=1) * (minRT-RTbound) + RTbound
while(any(tau<RTbound | tau>minRT)) {tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr)) * (minRT-RTbound) + RTbound}
while(any(tau<RTbound | tau>minRT)) {tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr)) * (minRT-RTbound) + RTbound}
tau = exp(mu_pr[6] + sigma[6] * tau_pr)
tau = exp(mu_pr[6] + sigma[6] * tau_pr)
tau = exp(mu_pr[6] + sigma[6] * tau_pr)
tau_pr <- rnorm(1,0,1)
tau = exp(mu_pr[6] + sigma[6] * tau_pr)
tau_pr <- rnorm(1,0,1)
tau = exp(mu_pr[6] + sigma[6] * tau_pr)
tau_pr <- rnorm(1,0,1)
tau = exp(mu_pr[6] + sigma[6] * tau_pr)
tau_pr <- rnorm(1,0,1)
tau = exp(mu_pr[6] + sigma[6] * tau_pr)
tau_pr <- rnorm(1,0,0.2)
tau = exp(mu_pr[6] + sigma[6] * tau_pr)
tau_pr <- rnorm(1,0,0.2)
tau = exp(mu_pr[6] + sigma[6] * tau_pr)
tau_pr <- rnorm(1,0,0.05)
tau = exp(mu_pr[6] + sigma[6] * tau_pr)
tau = exp(mu_pr[6] + sigma[6] * tau_pr)
tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr),mean=0, s=1) * (minRT-RTbound) + RTbound
tau_pr <- rnorm(1,0,0.05)
tau = exp(mu_pr[6] + sigma[6] * tau_pr)
tau_pr <- rnorm(1,-1,0.05)
tau = exp(mu_pr[6] + sigma[6] * tau_pr)
tau = exp(mu_pr[6] + sigma[6] * tau_pr)
tau <- qnorm(mu_pr[6]+(sigma[6]*tau_pr),mean=0, s=1) * (minRT-RTbound) + RTbound
tau_pr <- rnorm(1,-1,0.05)
tau = exp(mu_pr[6] + sigma[6] * tau_pr)
tau_pr <- rnorm(1,0,1)
mu_pr[6]+(sigma[6]*tau_pr
)
mu_pr[6]+(sigma[6]*tau_pr)
mu_pr[6]+(sigma[6]*tau_pr)
mu_pr[6]+(sigma[6]*tau_pr)* (minRT-RTbound) + RTbound
mu_pr[6]+(sigma[6]*tau_pr)* (minRT-RTbound) + RTbound
tau_pr <- rnorm(1,0,1)
mu_pr[6]+(sigma[6]*tau_pr)* (minRT-RTbound) + RTbound
tau_pr <- rnorm(1,0,1)
mu_pr[6]+(sigma[6]*tau_pr)* (minRT-RTbound) + RTbound
tau_pr <- rnorm(1,0,1)
abs(mu_pr[6]+(sigma[6]*tau_pr)* (minRT-RTbound) + RTbound)
tau_pr <- rnorm(1,0,1)
abs(mu_pr[6]+(sigma[6]*tau_pr)* (minRT-RTbound) + RTbound)
abs(mu_pr[6]+(sigma[6]*tau_pr)* (minRT-RTbound) + RTbound)
tau_pr <- rnorm(1,0,1)
abs(mu_pr[6]+(sigma[6]*tau_pr)* (minRT-RTbound) + RTbound)
tau_pr <- rnorm(1,0,1)
abs(mu_pr[6]+(sigma[6]*tau_pr)* (minRT-RTbound) + RTbound)
tau <- abs(qnorm(mu_pr[6]+(sigma[6]*tau_pr),mean=0, s=1) * (minRT-RTbound) + RTbound)
tau_pr <- rnorm(1,0,1)
tau <- abs(qnorm(mu_pr[6]+(sigma[6]*tau_pr),mean=0, s=1) * (minRT-RTbound) + RTbound)
qnorm(mu_pr[6]+(sigma[6]*tau_pr),mean=0, s=1) * (minRT-RTbound) + RTbound
qnorm(mu_pr[6]+(sigma[6]*tau_pr),mean=0, s=1) * (minRT-RTbound) + RTbound
qnorm(mu_pr[6]+(sigma[6]*tau_pr),mean=0, s=1) * (minRT-RTbound) + RTbound
tau_pr <- rnorm(1,0,1)
qnorm(mu_pr[6]+(sigma[6]*tau_pr),mean=0, s=1) * (minRT-RTbound) + RTbound
tau_pr <- rnorm(1,0,1)
qnorm(mu_pr[6]+(sigma[6]*tau_pr),mean=0, s=1) * (minRT-RTbound) + RTbound
tau_pr <- rnorm(1,0,1)
qnorm(mu_pr[6]+(sigma[6]*tau_pr),mean=0, s=1) * (minRT-RTbound) + RTbound
qnorm(mu_pr[6]+(sigma[6]*tau_pr),mean=0, s=1) * (minRT-RTbound) + RTbound)
qnorm(mu_pr[6]+sigma[6]*tau_pr,mean=0, s=1) * minRT-RTbound + RTbound
mu_pr[6]+sigma[6]*tau_pr,mean=0, s=1
mu_pr[6]+sigma[6]*tau_pr
qnorm( -0.1864889)
tau_pr <- rnorm(1,0,1)
while(any(tau_pr<0)) { tau_pr <- rnorm(1,0,1) }
qnorm(mu_pr[6]+sigma[6]*tau_pr,mean=0, s=1) * minRT-RTbound + RTbound
tau_pr <- rnorm(1,0,1)
while(any(tau_pr<0)) { tau_pr <- rnorm(1,0,1) }
qnorm(mu_pr[6]+sigma[6]*tau_pr,mean=0, s=1) * minRT-RTbound + RTbound
tau <- abs(qnorm(mu_pr[6]+(sigma[6]*tau_pr),mean=0, s=1) * (minRT-RTbound) + RTbound)
while (mu_pr[6]+(sigma[6]*tau_pr < 0) {tau_pr <- rnorm(1,0,1)}
while (mu_pr[6]+(sigma[6]*tau_pr < 0)) {tau_pr <- rnorm(1,0,1)}
arg <- mu_pr[6]+(sigma[6]*tau_pr
)
while(tau < RTbound | tau > minRT) {tau <- rnorm(0,1)}
tau <- rnorm(0,1)
while(tau < RTbound | tau > minRT) {tau <- rnorm(0,1)}
while(any(tau < RTbound | tau > minRT)) {tau <- rnorm(0,1)}
RTbound <- 0.1
minRT <- 0.35
tau <- rnorm(0,1)
while(any(tau < RTbound | tau > minRT)) {tau <- rnorm(0,1)}
tau < RTbound
tau <- rnorm(0,1)
tau <- rnorm(1,0,1)
while(any(tau < RTbound | tau > minRT)) {tau <- rnorm(0,1)}
tau <- rnorm(1,0,1)
while(any(tau < RTbound | tau > minRT)) {tau <- rnorm(1,0,1)}
while(any(tau > RTbound)) {tau <- rnorm(1,0,1)}
while(any(tau > RTbound | tau < 0)) {tau <- rnorm(1,0,1)}
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
model_path <- paste0(path,"/rlddm.stan")
data_path <- paste0(path,"/input_6subj_wtrials_1block.txt")
setwd(path)
raw_data <- data.table::fread(file = data_path, header = TRUE, sep = "\t", data.table = TRUE,
fill = TRUE, stringsAsFactors = TRUE, logical01 = FALSE)
raw_data <- raw_data[which(raw_data$RT > 0.3),]
names(raw_data)[names(raw_data)=="choice"] <- "correct"
## prepare data for jags
#raw_data$row <- seq.int(nrow(raw_data))
DT_trials <- raw_data[, .N, by = "subjID"]
subjs     <- DT_trials$subjID
n_subj    <- length(subjs)
# get minRT
minRT <- with(raw_data, aggregate(RT, by = list(y = subjID), FUN = min)[["x"]])
# assign new trial number for excluded decisions
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$trial <- seq.int(nrow(raw_data[sub,]))
}
# first is Sx1 matrix identifying all first trials of a subject for each choice
first <- which(raw_data$trial==1)
# last is a Sx1 matrix identifying all last trials of a subject for each choice
last <- as.integer(first + DT_trials$N - 1)
# incorrect is the inverse vector of choice and is needed to update the ev for the non-choices
raw_data$incorrect <- as.integer(ifelse(raw_data$correct==1, 2, 1))
# define the values for the rewards
value <- ifelse(raw_data$correct==1, 0, 1)
## all RT with negative choices -> -1
new_RT <- ifelse(raw_data$correct==1, raw_data$RT*-1, raw_data$RT)
## # obs
n_trials <- nrow(raw_data)
ev <- matrix(data = NA, nrow=n_trials, ncol=2)
ev <- matrix(data = NA, nrow=dat$n_trials, ncol=2)
dat <- list("N" = n_subj, "T"=n_trials,"RTbound" = 0.05,"minRT" = minRT, "iter" = raw_data$trial, "correct" = raw_data$correct, "incorrect" = raw_data$incorrect,
"RT" = new_RT, "first" = first, "last" = last, "value"=value)  # names list of numbers
ev <- matrix(data = NA, nrow=dat$n_trials, ncol=2)
ev <- matrix(data = NA, nrow=dat$T, ncol=2)
ev[first[s],1] <- 0
ev[first[s],2] <- 0
for(s in 1:dat$N){
ev <- matrix(data = NA, nrow=dat$T, ncol=2)
ev[first[s],1] <- 0
ev[first[s],2] <- 0
}
View(ev)
first[s]
first[1]
ev[1,1]
ev <- matrix(data = NA, nrow=dat$T, ncol=2)
for(s in 1:dat$N){
ev[first[s],1] <- 0
ev[first[s],2] <- 0
}
ev[1,1]
View(ev)
library(RWiener)
dat$correct
for(s in 1:dat$N){
ev[first[s],1] <- 0
ev[first[s],2] <- 0
for(trial in (first[s]:last[s]-1)){
delta[trial] = (ev[trial,1]-ev[trial,2]) * v_mod[s]
ev[trial+1,dat$correct[trial]] = ev[trial,dat$correct[trial]] + inv.logit(eta[s,dat$correct[trial]] * (dat$value[trial]-ev[trial,dat$correct[trial]]))
ev[trial+1,dat$incorrect[trial]] = ev[trial,dat$incorrect[trial]] + inv.logit(eta[s,dat$incorrect[trial]] * (dat$value[trial]-ev[trial,dat$incorrect[trial]]))
}
}
delta <- matrix(data=NA, nrow=dat$T,ncol=1)
for(s in 1:dat$N){
ev[first[s],1] <- 0
ev[first[s],2] <- 0
for(trial in (first[s]:last[s]-1)){
delta[trial] = (ev[trial,1]-ev[trial,2]) * v_mod[s]
ev[trial+1,dat$correct[trial]] = ev[trial,dat$correct[trial]] + inv.logit(eta[s,dat$correct[trial]] * (dat$value[trial]-ev[trial,dat$correct[trial]]))
ev[trial+1,dat$incorrect[trial]] = ev[trial,dat$incorrect[trial]] + inv.logit(eta[s,dat$incorrect[trial]] * (dat$value[trial]-ev[trial,dat$incorrect[trial]]))
}
}
install.packages("boot", lib="C:/Program Files/R/R-3.5.2/library")
library(boot) #needed for inverse logit
ev <- matrix(data = NA, nrow=dat$T, ncol=2)
delta <- matrix(data=NA, nrow=dat$T,ncol=1)
for(s in 1:dat$N){
ev[first[s],1] <- 0
ev[first[s],2] <- 0
for(trial in (first[s]:last[s]-1)){
delta[trial] = (ev[trial,1]-ev[trial,2]) * v_mod[s]
ev[trial+1,dat$correct[trial]] = ev[trial,dat$correct[trial]] + inv.logit(eta[s,dat$correct[trial]] * (dat$value[trial]-ev[trial,dat$correct[trial]]))
ev[trial+1,dat$incorrect[trial]] = ev[trial,dat$incorrect[trial]] + inv.logit(eta[s,dat$incorrect[trial]] * (dat$value[trial]-ev[trial,dat$incorrect[trial]]))
}
}
for(s in 1:dat$N){
aa <- rnorm(n = s, mean = 0, s = 1)
while(any(aa<0)) { aa <- rnorm(n = s, mean = 0, s = 1) }
alpha_pr <- aa
alpha = exp(mu_pr[1] + sigma[1] * alpha_pr)
for (i in 1:2){
eta_pr[i] <- rnorm(s,0,1)
eta[i] <- exp(mu_pr[2] + sigma[2] * eta_pr[i])
}
aa <- rnorm(n = s, mean = 0, s = 1)
while(any(aa< -0.5 | aa>2)) { aa <- rnorm(n = s, mean = 0, s = 1) }
a_mod_pr <- aa
a_mod = exp(mu_pr[4] + sigma[4] * a_mod_pr)
aa <- rnorm(n = s, mean = 0, s = 1)
while(any(aa< 0 | aa>10)) { aa <- rnorm(n = s, mean = 0, s = 1) }
v_mod_pr <- aa
v_mod = exp(mu_pr[5] + sigma[5] * v_mod_pr)
RTbound <- 0.1
minRT <- 0.35
tau <- rnorm(s,0,1)
while(any(tau > RTbound | tau < 0)) {tau <- rnorm(s,0,1)}
}
eta_pr = matrix(data= NA, nrow=dat$N, ncol=2)
for(s in 1:dat$N){
aa <- rnorm(n = s, mean = 0, s = 1)
while(any(aa<0)) { aa <- rnorm(n = s, mean = 0, s = 1) }
alpha_pr <- aa
alpha = exp(mu_pr[1] + sigma[1] * alpha_pr)
for (i in 1:2){
eta_pr[i] <- rnorm(s,0,1)
eta[i] <- exp(mu_pr[2] + sigma[2] * eta_pr[i])
}
aa <- rnorm(n = s, mean = 0, s = 1)
while(any(aa< -0.5 | aa>2)) { aa <- rnorm(n = s, mean = 0, s = 1) }
a_mod_pr <- aa
a_mod = exp(mu_pr[4] + sigma[4] * a_mod_pr)
aa <- rnorm(n = s, mean = 0, s = 1)
while(any(aa< 0 | aa>10)) { aa <- rnorm(n = s, mean = 0, s = 1) }
v_mod_pr <- aa
v_mod = exp(mu_pr[5] + sigma[5] * v_mod_pr)
RTbound <- 0.1
minRT <- 0.35
tau <- rnorm(s,0,1)
while(any(tau > RTbound | tau < 0)) {tau <- rnorm(s,0,1)}
}
## Priors
eta_pr = matrix(data= NA, nrow=dat$N, ncol=2)
eta = matrix(data= NA, nrow=dat$N, ncol=2)
a_mod_pr = matrix(data= NA, nrow=dat$N, ncol=1)
a_mod = matrix(data= NA, nrow=dat$N, ncol=1)
v_mod_pr = matrix(data= NA, nrow=dat$N, ncol=1)
v_mod = matrix(data= NA, nrow=dat$N, ncol=1)
tau_pr = matrix(data= NA, nrow=dat$N, ncol=1)
tau = matrix(data= NA, nrow=dat$N, ncol=1)
for(s in 1:dat$N){
aa <- rnorm(n = s, mean = 0, s = 1)
while(any(aa<0)) { aa <- rnorm(n = s, mean = 0, s = 1) }
alpha_pr <- aa
alpha = exp(mu_pr[1] + sigma[1] * alpha_pr)
for (i in 1:2){
eta_pr[i] <- rnorm(s,0,1)
eta[i] <- exp(mu_pr[2] + sigma[2] * eta_pr[i])
}
aa <- rnorm(n = s, mean = 0, s = 1)
while(any(aa< -0.5 | aa>2)) { aa <- rnorm(n = s, mean = 0, s = 1) }
a_mod_pr <- aa
a_mod = exp(mu_pr[4] + sigma[4] * a_mod_pr)
aa <- rnorm(n = s, mean = 0, s = 1)
while(any(aa< 0 | aa>10)) { aa <- rnorm(n = s, mean = 0, s = 1) }
v_mod_pr <- aa
v_mod = exp(mu_pr[5] + sigma[5] * v_mod_pr)
RTbound <- 0.1
minRT <- 0.35
tau <- rnorm(s,0,1)
while(any(tau > RTbound | tau < 0)) {tau <- rnorm(s,0,1)}
}
eta
for(s in 1:dat$N){
aa <- rnorm(n = s, mean = 0, s = 1)
while(any(aa<0)) { aa <- rnorm(n = s, mean = 0, s = 1) }
alpha_pr <- aa
alpha = exp(mu_pr[1] + sigma[1] * alpha_pr)
for (i in 1:2){
eta_pr[s,i] <- rnorm(s,0,1)
eta[s,i] <- exp(mu_pr[2] + sigma[2] * eta_pr[i])
}
aa <- rnorm(n = s, mean = 0, s = 1)
while(any(aa< -0.5 | aa>2)) { aa <- rnorm(n = s, mean = 0, s = 1) }
a_mod_pr <- aa
a_mod = exp(mu_pr[4] + sigma[4] * a_mod_pr)
aa <- rnorm(n = s, mean = 0, s = 1)
while(any(aa< 0 | aa>10)) { aa <- rnorm(n = s, mean = 0, s = 1) }
v_mod_pr <- aa
v_mod = exp(mu_pr[5] + sigma[5] * v_mod_pr)
RTbound <- 0.1
minRT <- 0.35
tau <- rnorm(s,0,1)
while(any(tau > RTbound | tau < 0)) {tau <- rnorm(s,0,1)}
}
## Priors
eta_pr = matrix(data= NA, nrow=dat$N, ncol=2)
eta = matrix(data= NA, nrow=dat$N, ncol=2)
a_mod_pr = matrix(data= NA, nrow=dat$N, ncol=1)
a_mod = matrix(data= NA, nrow=dat$N, ncol=1)
v_mod_pr = matrix(data= NA, nrow=dat$N, ncol=1)
v_mod = matrix(data= NA, nrow=dat$N, ncol=1)
tau_pr = matrix(data= NA, nrow=dat$N, ncol=1)
tau = matrix(data= NA, nrow=dat$N, ncol=1)
for(s in 1:dat$N){
aa <- rnorm(n = s, mean = 0, s = 1)
while(any(aa<0)) { aa <- rnorm(n = s, mean = 0, s = 1) }
alpha_pr <- aa
alpha = exp(mu_pr[1] + sigma[1] * alpha_pr)
for (i in 1:2){
eta_pr[s,i] <- rnorm(1,0,1)
eta[s,i] <- exp(mu_pr[2] + sigma[2] * eta_pr[i])
}
aa <- rnorm(n = s, mean = 0, s = 1)
while(any(aa< -0.5 | aa>2)) { aa <- rnorm(n = s, mean = 0, s = 1) }
a_mod_pr <- aa
a_mod = exp(mu_pr[4] + sigma[4] * a_mod_pr)
aa <- rnorm(n = s, mean = 0, s = 1)
while(any(aa< 0 | aa>10)) { aa <- rnorm(n = s, mean = 0, s = 1) }
v_mod_pr <- aa
v_mod = exp(mu_pr[5] + sigma[5] * v_mod_pr)
RTbound <- 0.1
minRT <- 0.35
tau <- rnorm(s,0,1)
while(any(tau > RTbound | tau < 0)) {tau <- rnorm(s,0,1)}
}
eta1
eta
for(s in 1:dat$N){
aa <- rnorm(n = s, mean = 0, s = 1)
while(any(aa<0)) { aa <- rnorm(n = s, mean = 0, s = 1) }
alpha_pr <- aa
alpha = exp(mu_pr[1] + sigma[1] * alpha_pr)
for (i in 1:2){
eta_pr[s,i] <- rnorm(1,0,1)
eta[s,i] <- exp(mu_pr[2] + sigma[2] * eta_pr[s,i])
}
aa <- rnorm(n = s, mean = 0, s = 1)
while(any(aa< -0.5 | aa>2)) { aa <- rnorm(n = s, mean = 0, s = 1) }
a_mod_pr <- aa
a_mod = exp(mu_pr[4] + sigma[4] * a_mod_pr)
aa <- rnorm(n = s, mean = 0, s = 1)
while(any(aa< 0 | aa>10)) { aa <- rnorm(n = s, mean = 0, s = 1) }
v_mod_pr <- aa
v_mod = exp(mu_pr[5] + sigma[5] * v_mod_pr)
RTbound <- 0.1
minRT <- 0.35
tau <- rnorm(s,0,1)
while(any(tau > RTbound | tau < 0)) {tau <- rnorm(s,0,1)}
}
eta
View(tau_pr)
