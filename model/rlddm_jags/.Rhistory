subjs     <- DT_trials$subjID
first <- which(raw_data$trial==1)
raw_data[first,]
for(i in 1:length(subjs)){
print(DT_trials$N)
}
DT_trials <- raw_data[, .N, by = "subjID"]
for(i in 1:length(subjs)){
print(DT_trials$N)
}
subjs     <- DT_trials$subjID
for(i in 1:length(subjs)){
print(DT_trials$N)
}
DT_trials$N
# last is a 31x2 matrix identifying all last trials of a subject for each choice
last <- first + DT_trials$N
# last is a 31x2 matrix identifying all last trials of a subject for each choice
last <- first + DT_trials$N - 1
for(s in 1:length(subjs)){
for (trial in (first[s]):(last[s]-1)) {
print(RT[trial])
}
}
for(s in 1:length(subjs)){
for (trial in (first[s]):(last[s]-1)) {
print(raw_data$RT[trial])
}
}
# Check if this atually does not print the last trials:
# There should be an error for RT[781] because there are only 780 trials]
raw_data$RT[781]
# Check if this atually does not print the last trials:
# There should be an error for RT[781] because there are only 780 trials]
raw_data$RT[780]
# for S1, the last trial is 0.931. Thus RT[last[1]-1] should be this number
raw_data$RT[last[1]-1]
## prepare data for jags
raw_data$iter <- seq.int(nrow(raw_data))
ifelse(raw_data$choice==1, 2, 1)
raw_data$choice
raw_data$nonchoice <- ifelse(raw_data$choice==1, 2, 1)
## prepare data for jags
colnames(raw_data)
dat <- list("S" = n_subj, "iter" = raw_data$trial, "choice" = raw_data$choice, "nonchoice" = raw_data$nonchoice,
"RT" = raw_data$RT)  # names list of numbers
n_subj    <- length(subjs)
dat <- list("S" = n_subj, "iter" = raw_data$trial, "choice" = raw_data$choice, "nonchoice" = raw_data$nonchoice,
"RT" = raw_data$RT)  # names list of numbers
dat <- list("S" = n_subj, "iter" = raw_data$trial, "choice" = raw_data$choice, "nonchoice" = raw_data$nonchoice,
"RT" = raw_data$RT, "first" = first, "last" = last)  # names list of numbers
jags.m <- jags.model( file = "rlddm.jag", data=dat, n.chains=1, n.adapt=500)
jags.m <- jags.model( file = "rlddm.jag", data=dat, n.chains=1, n.adapt=500)
jags.m <- jags.model( file = "rlddm.jag", data=dat, n.chains=1, n.adapt=500)
jags.m <- jags.model( file = "rlddm.jag", data=dat, n.chains=1, n.adapt=500)
raw_data <- data.table::fread(file = data_path, header = TRUE, sep = "\t", data.table = TRUE,
fill = TRUE, stringsAsFactors = TRUE, logical01 = FALSE)
## prepare data for jags
#raw_data$iter <- seq.int(nrow(raw_data))
DT_trials <- raw_data[, .N, by = "subjID"]
subjs     <- DT_trials$subjID
n_subj    <- length(subjs)
# first is Sx1 matrix identifying all first trials of a subject for each choice
first <- which(raw_data$trial==1)
# last is a Sx1 matrix identifying all last trials of a subject for each choice
last <- as.integer(first + DT_trials$N - 1)
# nonchoice is the inverse vector of choice and is needed to update the ev for the non-choices
raw_data$nonchoice <- as.integer(ifelse(raw_data$choice==1, 2, 1))
dat <- list("S" = n_subj, "iter" = raw_data$trial, "choice" = raw_data$choice, "nonchoice" = raw_data$nonchoice,
"RT" = raw_data$RT, "first" = first, "last" = last)  # names list of numbers
jags.m <- jags.model( file = "rlddm.jag", data=dat, n.chains=1, n.adapt=500)
jags.m <- jags.model( file = "rlddm.jag", data=dat, n.chains=1, n.adapt=500)
jags.m <- jags.model( file = "rlddm.jag", data=dat, n.chains=1, n.adapt=500)
load.module("wiener")
jags.m <- jags.model( file = "rlddm_reduced.jag", data=dat, n.chains=1, n.adapt=500)
jags.m <- jags.model( file = "rlddm_reduced.jag", data=dat, n.chains=1, n.adapt=500)
# values
value <- as.integer(ifelse(raw_data$choice==2, 1, 0))
# values
value <- as.integer(ifelse(raw_data$choice==1, 0, 1))
# values
value <- as.integer(ifelse(raw_data$choice==1, 0, 1))
View(raw_data)
dat <- list("S" = n_subj, "iter" = raw_data$trial, "choice" = raw_data$choice, "nonchoice" = raw_data$nonchoice,
"RT" = raw_data$RT, "first" = first, "last" = last, "value"=value)  # names list of numbers
jags.m <- jags.model( file = "rlddm_reduced.jag", data=dat, n.chains=1, n.adapt=500)
jags.m <- jags.model( file = "rlddm_reduced.jag", data=dat, n.chains=1, n.adapt=500)
jags.m <- jags.model( file = "rlddm_reduced.jag", data=dat, n.chains=1, n.adapt=500)
jags.m <- jags.model( file = "rlddm_reduced.jag", data=dat, n.chains=1, n.adapt=500)
jags.m <- jags.model( file = "rlddm_reduced.jag", data=dat, n.chains=1, n.adapt=500)
jags.m <- jags.model( file = "rlddm_reduced.jag", data=dat, n.chains=1, n.adapt=500)
## all RT with negative choices -> -1
new_RT <- ifelse(raw_data$choice==1, raw_data$RT*-1, raw_data$RT)
dat <- list("S" = n_subj, "iter" = raw_data$trial, "choice" = raw_data$choice, "nonchoice" = raw_data$nonchoice,
"RT" = new_RT, "first" = first, "last" = last, "value"=value)  # names list of numbers
jags.m <- jags.model( file = "rlddm_reduced.jag", data=dat, n.chains=1, n.adapt=500)
jags.m <- jags.model( file = "rlddm_reduced.jag", data=dat, n.chains=1, n.adapt=500)
# values
value <- as.integer(ifelse(raw_data$choice==1, -1, 1))
dat <- list("S" = n_subj, "iter" = raw_data$trial, "choice" = raw_data$choice, "nonchoice" = raw_data$nonchoice,
"RT" = new_RT, "first" = first, "last" = last, "value"=value)  # names list of numbers
jags.m <- jags.model( file = "rlddm_reduced.jag", data=dat, n.chains=1, n.adapt=500)
##### Initial values (not needed here)
inits <- list( etag_mu=0, ag_mu=1.7,ig_mu=0, mg_mu=3.5, tg_mu=0.3)
jags.m <- jags.model( file = "rlddm_reduced.jag", inits=inits,data=dat, n.chains=1, n.adapt=500)
##### Initial values (not needed here)
inits <- list( etag_mu=0.2, ag_mu=1.7,ig_mu=0, mg_mu=3.5, tg_mu=0.3)
jags.m <- jags.model( file = "rlddm_reduced.jag", inits=inits,data=dat, n.chains=1, n.adapt=500)
value <- as.integer(ifelse(raw_data$choice==1, -0.1, 0.1))
dat <- list("S" = n_subj, "iter" = raw_data$trial, "choice" = raw_data$choice, "nonchoice" = raw_data$nonchoice,
"RT" = new_RT, "first" = first, "last" = last, "value"=value)  # names list of numbers
##### Initial values (not needed here)
inits <- list( etag_mu=0.2, ag_mu=1.7,ig_mu=0, mg_mu=3.5, tg_mu=0.3)
jags.m <- jags.model( file = "rlddm_reduced.jag", inits=inits,data=dat, n.chains=1, n.adapt=500)
jags.m <- jags.model( file = "rlddm_reduced.jag", inits=inits,data=dat, n.chains=1, n.adapt=500)
raw_data <- data.table::fread(file = data_path, header = TRUE, sep = "\t", data.table = TRUE,
fill = TRUE, stringsAsFactors = TRUE, logical01 = FALSE)
data_path <- paste0(path,"test_input_noblock.txt")
raw_data <- data.table::fread(file = data_path, header = TRUE, sep = "\t", data.table = TRUE,
fill = TRUE, stringsAsFactors = TRUE, logical01 = FALSE)
DT_trials <- raw_data[, .N, by = "subjID"]
subjs     <- DT_trials$subjID
n_subj    <- length(subjs)
# first is Sx1 matrix identifying all first trials of a subject for each choice
first <- which(raw_data$trial==1)
# last is a Sx1 matrix identifying all last trials of a subject for each choice
last <- as.integer(first + DT_trials$N - 1)
# nonchoice is the inverse vector of choice and is needed to update the ev for the non-choices
raw_data$nonchoice <- as.integer(ifelse(raw_data$choice==1, 2, 1))
# define the values for the rewards
value <- as.integer(ifelse(raw_data$choice==1, -0.1, 0.1))
## all RT with negative choices -> -1
new_RT <- ifelse(raw_data$choice==1, raw_data$RT*-1, raw_data$RT)
dat <- list("S" = n_subj, "iter" = raw_data$trial, "choice" = raw_data$choice, "nonchoice" = raw_data$nonchoice,
"RT" = new_RT, "first" = first, "last" = last, "value"=value)  # names list of numbers
##### Initial values (not needed here)
inits <- list( etag_mu=0.2, ag_mu=1.7,ig_mu=0, mg_mu=3.5, tg_mu=0.3)
jags.m <- jags.model( file = "rlddm_reduced.jag", inits=inits,data=dat, n.chains=1, n.adapt=500)
raw_data <- data.table::fread(file = data_path, header = TRUE, sep = "\t", data.table = TRUE,
fill = TRUE, stringsAsFactors = TRUE, logical01 = FALSE)
## prepare data for jags
#raw_data$iter <- seq.int(nrow(raw_data))
DT_trials <- raw_data[, .N, by = "subjID"]
subjs     <- DT_trials$subjID
n_subj    <- length(subjs)
# first is Sx1 matrix identifying all first trials of a subject for each choice
first <- which(raw_data$trial==1)
# last is a Sx1 matrix identifying all last trials of a subject for each choice
last <- as.integer(first + DT_trials$N - 1)
# nonchoice is the inverse vector of choice and is needed to update the ev for the non-choices
raw_data$nonchoice <- as.integer(ifelse(raw_data$choice==1, 2, 1))
# define the values for the rewards
value <- as.integer(ifelse(raw_data$choice==1, -0.1, 0.1))
## all RT with negative choices -> -1
new_RT <- ifelse(raw_data$choice==1, raw_data$RT*-1, raw_data$RT)
dat <- list("S" = n_subj, "iter" = raw_data$trial, "choice" = raw_data$choice, "nonchoice" = raw_data$nonchoice,
"RT" = new_RT, "first" = first, "last" = last, "value"=value)  # names list of numbers
##### Initial values (not needed here)
inits <- list( etag_mu=0.2, ag_mu=1.7,ig_mu=0, mg_mu=3.5, tg_mu=0.3)
jags.m <- jags.model( file = "rlddm_reduced.jag", inits=inits,data=dat, n.chains=1, n.adapt=500)
DT_trials <- raw_data[, .N, by = "subjID"]
subjs     <- DT_trials$subjID
n_subj    <- length(subjs)
# first is Sx1 matrix identifying all first trials of a subject for each choice
first <- which(raw_data$trial==1)
# last is a Sx1 matrix identifying all last trials of a subject for each choice
last <- as.integer(first + DT_trials$N - 1)
# nonchoice is the inverse vector of choice and is needed to update the ev for the non-choices
raw_data$nonchoice <- as.integer(ifelse(raw_data$choice==1, 2, 1))
# define the values for the rewards
value <- as.integer(ifelse(raw_data$choice==1, -0.1, 0.1))
## all RT with negative choices -> -1
new_RT <- ifelse(raw_data$choice==1, raw_data$RT*-1, raw_data$RT)
dat <- list("S" = n_subj, "iter" = raw_data$trial, "choice" = raw_data$choice, "nonchoice" = raw_data$nonchoice,
"RT" = new_RT, "first" = first, "last" = last, "value"=value)  # names list of numbers
##### Initial values (not needed here)
inits <- list( etag_mu=0.2, ag_mu=1.7,ig_mu=0, mg_mu=3.5, tg_mu=0.3)
jags.m <- jags.model( file = "rlddm_reduced.jag", inits=inits,data=dat, n.chains=1, n.adapt=500)
raw_data <- data.table::fread(file = data_path, header = TRUE, sep = "\t", data.table = TRUE,
fill = TRUE, stringsAsFactors = TRUE, logical01 = FALSE)
## prepare data for jags
#raw_data$iter <- seq.int(nrow(raw_data))
DT_trials <- raw_data[, .N, by = "subjID"]
subjs     <- DT_trials$subjID
n_subj    <- length(subjs)
# first is Sx1 matrix identifying all first trials of a subject for each choice
first <- which(raw_data$trial==1)
# last is a Sx1 matrix identifying all last trials of a subject for each choice
last <- as.integer(first + DT_trials$N - 1)
# nonchoice is the inverse vector of choice and is needed to update the ev for the non-choices
raw_data$nonchoice <- as.integer(ifelse(raw_data$choice==1, 2, 1))
# define the values for the rewards
value <- as.integer(ifelse(raw_data$choice==1, -0.1, 0.1))
## all RT with negative choices -> -1
new_RT <- ifelse(raw_data$choice==1, raw_data$RT*-1, raw_data$RT)
dat <- list("S" = n_subj, "iter" = raw_data$trial, "choice" = raw_data$choice, "nonchoice" = raw_data$nonchoice,
"RT" = new_RT, "first" = first, "last" = last, "value"=value)  # names list of numbers
##### Initial values (not needed here)
inits <- list( etag_mu=0.2, ag_mu=1.7,ig_mu=0, mg_mu=3.5, tg_mu=0.3)
jags.m <- jags.model( file = "rlddm_reduced.jag", inits=inits,data=dat, n.chains=1, n.adapt=500)
raw_data <- data.table::fread(file = data_path, header = TRUE, sep = "\t", data.table = TRUE,
fill = TRUE, stringsAsFactors = TRUE, logical01 = FALSE)
## prepare data for jags
#raw_data$iter <- seq.int(nrow(raw_data))
DT_trials <- raw_data[, .N, by = "subjID"]
subjs     <- DT_trials$subjID
n_subj    <- length(subjs)
# first is Sx1 matrix identifying all first trials of a subject for each choice
first <- which(raw_data$trial==1)
# last is a Sx1 matrix identifying all last trials of a subject for each choice
last <- as.integer(first + DT_trials$N - 1)
# nonchoice is the inverse vector of choice and is needed to update the ev for the non-choices
raw_data$nonchoice <- as.integer(ifelse(raw_data$choice==1, 2, 1))
# define the values for the rewards
value <- as.integer(ifelse(raw_data$choice==1, -0.1, 0.1))
## all RT with negative choices -> -1
new_RT <- ifelse(raw_data$choice==1, raw_data$RT*-1, raw_data$RT)
dat <- list("S" = n_subj, "iter" = raw_data$trial, "choice" = raw_data$choice, "nonchoice" = raw_data$nonchoice,
"RT" = new_RT, "first" = first, "last" = last, "value"=value)  # names list of numbers
##### Initial values (not needed here)
inits <- list( etag_mu=0.2, ag_mu=1.7,ig_mu=0, mg_mu=3.5, tg_mu=0.3)
jags.m <- jags.model( file = "rlddm_reduced.jag", inits=inits,data=dat, n.chains=1, n.adapt=500)
> params <- c("v[s]", "eta[s,1]","eta[s,2]")
params <- c("v[s]", "eta[s,1]","eta[s,2]")
samps <- coda.samples(jags.m, params, n.iter = 500)
params <- c("v")
samps <- coda.samples(jags.m, params, n.iter = 500)
plot(samps)
summary(samps)
params <- c("a")
samps <- coda.samples(jags.m, params, n.iter = 500)
plot(samps)
params <- c("eta")
samps <- coda.samples(jags.m, params, n.iter = 500)
plot(samps)
params <- c("ev")
samps <- coda.samples(jags.m, params, n.iter = 500)
View(samps)
samps$ev[1,2]
samps$"ev[2,1"]
samps$"ev[2,1]"
samps$"ev[2,1]"
samps
raw_data$RT <- RT[which(raw_data$RT > 0.3),]
raw_data$RT <- raw_data$RT[which(raw_data$RT > 0.3),]
raw_data$RT <- raw_data[which(raw_data$RT > 0.3),]
raw_data <- raw_data[which(raw_data$RT > 0.3),]
raw_data <- data.table::fread(file = data_path, header = TRUE, sep = "\t", data.table = TRUE,
fill = TRUE, stringsAsFactors = TRUE, logical01 = FALSE)
raw_data <- raw_data[which(raw_data$RT > 0.3),]
## prepare data for jags
raw_data$row <- seq.int(nrow(raw_data))
DT_trials <- raw_data[, .N, by = "subjID"]
subjs     <- DT_trials$subjID
n_subj    <- length(subjs)
# first is Sx1 matrix identifying all first trials of a subject for each choice
first <- which(raw_data$trial==1)
# last is a Sx1 matrix identifying all last trials of a subject for each choice
last <- as.integer(first + DT_trials$N - 1)
path <- "/home/padraigh/Dokumente/Uni/NSC/Thesis/mri_task_analysis/model/rlddm_hbayes/"
model_path <- paste0(path,"rlddm.jag")
data_path <- paste0(path,"input_trials.txt")
setwd(path)
raw_data <- data.table::fread(file = data_path, header = TRUE, sep = "\t", data.table = TRUE,
fill = TRUE, stringsAsFactors = TRUE, logical01 = FALSE)
raw_data <- raw_data[which(raw_data$RT > 0.3),]
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$trial = seq.int(nrow(raw_data[sub,]))
}
View(raw_data)
# first is Sx1 matrix identifying all first trials of a subject for each choice
first <- which(raw_data$trial==1)
# last is a Sx1 matrix identifying all last trials of a subject for each choice
last <- as.integer(first + DT_trials$N - 1)
# nonchoice is the inverse vector of choice and is needed to update the ev for the non-choices
raw_data$nonchoice <- as.integer(ifelse(raw_data$choice==1, 2, 1))
# define the values for the rewards
value <- as.integer(ifelse(raw_data$choice==1, -0.1, 0.1))
## all RT with negative choices -> -1
new_RT <- ifelse(raw_data$choice==1, raw_data$RT*-1, raw_data$RT)
## prepare data for jags
#raw_data$row <- seq.int(nrow(raw_data))
DT_trials <- raw_data[, .N, by = "subjID"]
subjs     <- DT_trials$subjID
n_subj    <- length(subjs)
# first is Sx1 matrix identifying all first trials of a subject for each choice
first <- which(raw_data$trial==1)
# last is a Sx1 matrix identifying all last trials of a subject for each choice
last <- as.integer(first + DT_trials$N - 1)
# nonchoice is the inverse vector of choice and is needed to update the ev for the non-choices
raw_data$nonchoice <- as.integer(ifelse(raw_data$choice==1, 2, 1))
# define the values for the rewards
value <- as.integer(ifelse(raw_data$choice==1, -0.1, 0.1))
## all RT with negative choices -> -1
new_RT <- ifelse(raw_data$choice==1, raw_data$RT*-1, raw_data$RT)
# last is a Sx1 matrix identifying all last trials of a subject for each choice
last <- as.integer(first + DT_trials$N - 1)
DT_trials$N
length(DT_trials$N)
length(first)
for (subj in subjs){
print(subj)
#sub <- which(raw_data$subjID==subj)
#raw_data[sub,]$trial = seq.int(nrow(raw_data[sub,]))
}
View(raw_data)
for (subj in subjs){
sub <- raw_data[which(raw_data$subjID==subj),]
raw_data[sub,]$trial = seq.int(nrow(raw_data[sub,]))
}
raw_data[sub,]
sub
sub <- which(raw_data$subjID=="s001_LR")
sub
raw_data[sub,]
raw_data[sub,]$RT
seq.int(nrow(raw_data[sub,])
)
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$trial <- seq.int(nrow(raw_data[sub,]))
}
length(first)
# first is Sx1 matrix identifying all first trials of a subject for each choice
first <- which(raw_data$trial==1)
length(first)
# last is a Sx1 matrix identifying all last trials of a subject for each choice
last <- as.integer(first + DT_trials$N - 1)
# nonchoice is the inverse vector of choice and is needed to update the ev for the non-choices
raw_data$nonchoice <- as.integer(ifelse(raw_data$choice==1, 2, 1))
# define the values for the rewards
value <- as.integer(ifelse(raw_data$choice==1, -0.1, 0.1))
## all RT with negative choices -> -1
new_RT <- ifelse(raw_data$choice==1, raw_data$RT*-1, raw_data$RT)
dat <- list("S" = n_subj, "iter" = raw_data$trial, "choice" = raw_data$choice, "nonchoice" = raw_data$nonchoice,
"RT" = new_RT, "first" = first, "last" = last, "value"=value)  # names list of numbers
##### Initial values (not needed here)
inits <- list( etag_mu=0.2, ag_mu=1.7,ig_mu=0, mg_mu=3.5, tg_mu=0.3)
jags.m <- jags.model( file = "rlddm_reduced.jag", inits=inits,data=dat, n.chains=1, n.adapt=500)
params <- c("a","eta","v")
samps <- coda.samples(jags.m, params, n.iter = 2000)
plot(samps$a)
plot(eta)
samps$eta
samps$mcmc
samps::mcmc
samps$
d
summary(samps)
View(samps)
samps$"1"
samps
samps$'1'
samps[1,]
samps[2,
]
samps[1,]
samps[1,1]
samps[2,1]
samps[1,2]
samps[2,1]
samps[300,1]
samps[300,2]
samps[0,1]
samps[800:805,]
samps[800:801,]
samps[800,]
samps[500,1]
samps[500,2]
samps[501,2]
samps[501,500]
samps[501,5]
samps[501,32]
plot(samps)
params <- c("eta")
samps <- coda.samples(jags.m, params, n.iter = 2000)
plot(samps)
samps
samps[1,]
plot(samps[1,])
plot(samps[1,1])
plot(samps[,1])
plot(samps[,2])
samps[,2]
samps[,1]
samps[,2]
samps[,3]
plot(samps,3)
plot(samps[,3])
plot(samps[,1:4])
plot(samps[,1:2])
plot(samps[1:2,1:2])
plot(samps[,1:3])
plot(samps[,c(1,32)])
plot(samps[,c(2,33)])
plot(samps[,c(3,34)])
plot(samps[,c(10,41)])
# etc. -> compare the positive and negative learning rate
save(samps, "sampling_rlddm_eta_190423.R")
# etc. -> compare the positive and negative learning rate
save(samps, file="sampling_rlddm_eta_190423.R")
model_path <- paste0(path,"rlddm_reduced.jag")
setwd(path)
raw_data <- data.table::fread(file = data_path, header = TRUE, sep = "\t", data.table = TRUE,
fill = TRUE, stringsAsFactors = TRUE, logical01 = FALSE)
raw_data <- raw_data[which(raw_data$RT > 0.3),]
names(raw_data)[names(raw_data)=="choice"] <- "correct"
## prepare data for jags
#raw_data$row <- seq.int(nrow(raw_data))
DT_trials <- raw_data[, .N, by = "subjID"]
subjs     <- DT_trials$subjID
n_subj    <- length(subjs)
# assign new trial number for excluded decisions
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$trial <- seq.int(nrow(raw_data[sub,]))
}
# first is Sx1 matrix identifying all first trials of a subject for each choice
first <- which(raw_data$trial==1)
# last is a Sx1 matrix identifying all last trials of a subject for each choice
last <- as.integer(first + DT_trials$N - 1)
# incorrect is the inverse vector of choice and is needed to update the ev for the non-choices
raw_data$incorrect <- as.integer(ifelse(raw_data$correct==1, 2, 1))
# define the values for the rewards
value <- as.integer(ifelse(raw_data$correct==1, -0.1, 0.1))
## all RT with negative choices -> -1
new_RT <- ifelse(raw_data$correct==1, raw_data$RT*-1, raw_data$RT)
dat <- list("S" = n_subj, "iter" = raw_data$trial, "correct" = raw_data$correct, "incorrect" = raw_data$incorrect,
"RT" = new_RT, "first" = first, "last" = last, "value"=value)  # names list of numbers
data_path <- paste0(path,"input_trials_6subj.txt")
setwd(path)
raw_data <- data.table::fread(file = data_path, header = TRUE, sep = "\t", data.table = TRUE,
fill = TRUE, stringsAsFactors = TRUE, logical01 = FALSE)
raw_data <- raw_data[which(raw_data$RT > 0.3),]
names(raw_data)[names(raw_data)=="choice"] <- "correct"
## prepare data for jags
#raw_data$row <- seq.int(nrow(raw_data))
DT_trials <- raw_data[, .N, by = "subjID"]
subjs     <- DT_trials$subjID
n_subj    <- length(subjs)
# assign new trial number for excluded decisions
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$trial <- seq.int(nrow(raw_data[sub,]))
}
# first is Sx1 matrix identifying all first trials of a subject for each choice
first <- which(raw_data$trial==1)
# last is a Sx1 matrix identifying all last trials of a subject for each choice
last <- as.integer(first + DT_trials$N - 1)
# incorrect is the inverse vector of choice and is needed to update the ev for the non-choices
raw_data$incorrect <- as.integer(ifelse(raw_data$correct==1, 2, 1))
# define the values for the rewards
value <- as.integer(ifelse(raw_data$correct==1, -0.1, 0.1))
## all RT with negative choices -> -1
new_RT <- ifelse(raw_data$correct==1, raw_data$RT*-1, raw_data$RT)
dat <- list("S" = n_subj, "iter" = raw_data$trial, "correct" = raw_data$correct, "incorrect" = raw_data$incorrect,
"RT" = new_RT, "first" = first, "last" = last, "value"=value)  # names list of numbers
View(raw_data)
# define the values for the rewards
value <- as.integer(ifelse(raw_data$correct==1, -0.1, 0.1))
# define the values for the rewards
value <- ifelse(raw_data$correct==1, -0.1, 0.1)
# define the values for the rewards
value <- ifelse(raw_data$correct==1, 0, 1)
dat <- list("S" = n_subj, "iter" = raw_data$trial, "correct" = raw_data$correct, "incorrect" = raw_data$incorrect,
"RT" = new_RT, "first" = first, "last" = last, "value"=value)  # names list of numbers
##### Initial values (not needed here)
inits <- list( etag_mu=0.2, ag_mu=1.7,ig_mu=0, mg_mu=3.5, tg_mu=0.3)
jags.m <- jags.model( file = model_path, inits=inits,data=dat, n.chains=1, n.adapt=500)
jags.m_2 <- jags.model( file = model_path, inits=inits,data=dat, n.chains=1, n.adapt=500)
### take a look at the posterior distributions
params <- c("v")
samps <- coda.samples(jags.m_2, params, n.iter = 2000)
samps
samps(1,196)
samps[1:196]
samps[1:196,]
samps[1,]
samps[1:192]
samps[1:192,]
samps[1,1:192]
samps[1,1:191]
plot(samps[1,1:191])
plot(samps[1,])
plot(samps[1,1])
plot(samps[1,1][1])
samps[1,1][1]
samps[1,1][0]
samps[1,1][2]
samps[1][1]
samps[1][2]
samps[1,1][1]
samps[1,1][2]
samps[1,2][1]
samps[1,2]
samps[1,2]
names(samps)
colnames(samps)
samps[1,1]
samps[1,1:4]
samps[1,1:192]
samps[1,1:191]
samps[1,192:20]
samps[[1,192:20]]
samps[[1]
]
as.matrix(samps, iters = FALSE, chains = FALSE)
samps_as_matrix <- as.matrix(samps, iters = FALSE, chains = FALSE)
View(samps_as_matrix)
dim(samps_as_matrix)
save.image("~/Dokumente/Uni/NSC/Thesis/mri_task_analysis/model/rlddm_hbayes/workspace_sampling.RData")
