n * phatD*(1-phatD)
p <- .4
n <- 20
x <- 0:n
WaldCI <- function(x, n){                        # eq (5.9)
mid <- x/n
se <- sqrt(x*(n-x)/n^3)
cbind( pmax(0, mid - 1.96*se),  pmin(1, mid + 1.96*se))
}
WaldCIs <- WaldCI(x,n)
WaldCIs
p <- .4
n <- 20
x <-10
WaldCIs <- WaldCI(x,n)
WaldCIs
?prop.test
prop.test(x=c(10,10), n=20, p=0.4)
prop.test(x=c(10,10), n=10, p=0.4)
prop.test(x=c(10,10), n=2, p=0.4)
prop.test(x=c(10,10), n=c(20,20), p=0.4)
prop.test(x=c(10,10), n=c(20,20), p=c(0.4,0.6)
prop.test(x=c(10,10), n=c(20,20), p=c(0.4,0.6))
prop.test(x=c(10,10), n=c(20,20), p=c(0.4,0.6))
prop.test(x=c(10,10), n=c(20,20), p=c(0.4,0.6))$conf.int
print(RD <- tab[2,1]/ sum(tab[2,]) - tab[1,1]/ sum(tab[1,]) )
prop.test( tab)
chisq.test( tab)
prop.test( tab)$conf.int
?mean()
set.seed(14)
n <- 10
N <- 1000
samples <- array( rnorm(n*N), c(N,n))
?array
View(samples)
set.seed(14)
n <- 2
N <- 5
samples <- array( rnorm(n*N), c(N,n))
View(samples)
set.seed(14)
n <- 10
N <- 1000
samples <- matrix( rnorm(n*N), c(N,n))
samples <- array( rnorm(n*N), c(N,n))
samples <- matrix( rnorm(n*N), c(N,n))
samples <- array( rnorm(n*N), c(N,n))
samples <- matrix( rnorm(n*N), c(N,n))
samples <- array( rnorm(n*N), c(N,n))
samples <- matrix( rnorm(n*N), c(N,n))
require(coin)()
help(sleep)
# Problem 1
help(sleep)
str(sleep)
# we have 3 variables: increase/decrease in hours of sleep
delta <- with(sleep, extra[group == 1] - extra[group == 2])
hist(delta, breaks = 8)
# Problem 1
help(sleep)
t.test(delta)
grid <- seq(0,6)
grid <- seq(0,6, length.out = 1000)
maxdelta <- numeric(1000)
for (i in 1000) maxdelta <- max(dnorm(grid)-dt(grid, df=i))
for (i in 1000) maxdelta[i] <- max(dnorm(grid)-dt(grid, df=i))
for (i in 1000) maxdelta[i] <- max(dnorm(grid)-dt(grid, df=i))
for (i in 1:1000) maxdelta[i] <- max(dnorm(grid)-dt(grid, df=i))
sum(maxdelta >0.01)
sum(maxdelta >0.001)
for (i in 0:1000) maxdelta[i] <- max(dnorm(grid)-dt(grid, df=i))
for (i in 1:1000) maxdelta[i] <- max(dnorm(grid)-dt(grid, df=i))
sum(maxdelta >0.001)
?steps()
??steps()
step()
?step()
dat <- c(2, 15, 16, 32, 25, 10)
cbind('2005'=dat)
dat <- c(2, 15, 16, 32, 25, 10)
cbind('2005'=dat)
n1 = 3
p = 5
a = rnorm(n1*p)
A = matrix(a,n1,p)
b = rnorm(n1*p)
B = matrix(b,n1,p)
cbind(A,B)
cbind(a,b)
log(0.01)
log(1000)
log(1)
log(0)
log(0.1)
log(0.01)
log(0.001)
log(0.0001)
data <- read.csv("~/Desktop/data.csv")
View(data)
boxplot(dist)
boxplot(data$distort, fill=imageID)
boxplot(data$distort, fill=data$imageID)
boxplot(data$distort~data$imageID)
data2 <- read.csv("~/Desktop/data.csv")
View(data2)
boxplot(data2$distort ~ data2$line)
boxplot(data2$distort ~ data2$distance)
illusion_data <- read.csv("~/Desktop/illusion_data.csv")
View(illusion_data)
model1 <- lm(illusion_data$distortion ~ illusion_data$red_line_hight + illusion_data$red_line_length +
illusion_data$rotated + illusion_data$dashed + illusion_data$frequency + illusion_data$round)
summary(model1)
model1 <- lm(illusion_data$distortion ~ illusion_data$illusion_nr)
model2 <- lm(illusion_data$distortion ~ illusion_data$illusion_nr)
summary(model2)
boxplot(illusion_data$distortion ~ illusion_data$illusion_nr)
summary(illusion_data$distortion)
summary(illusion_data$distortion~illusion_data$illusion_nr)
summary(illusion_data$distortion~illusion_data$illusion_nr)
ddply(illusion_data,~illusion_nr,summarise,mean=mean(distort),sd=sd(distort))
??ddply
library("plyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
ddply(illusion_data,~illusion_nr,summarise,mean=mean(distort),sd=sd(distort))
ddply(illusion_data,~illusion_nr,summarise,mean=mean(distortion),sd=sd(distortion))
range()
ddply(illusion_data,~illusion_nr,summarise,mean=mean(distortion),sd=sd(distortion), range=range(distortion))
ddply(illusion_data,~illusion_nr,summarise,mean=mean(distortion),sd=sd(distortion),min=min(distortion)
ddply(illusion_data,~illusion_nr,summarise,mean=mean(distortion),sd=sd(distortion),min=min(distortion))
ddply(illusion_data,~illusion_nr,summarise,mean=mean(distortion),sd=sd(distortion),min=min(distortion))
ddply(illusion_data,~illusion_nr,summarise,mean=mean(distortion),sd=sd(distortion),min=min(distortion)), max=max(distortion))
ddply(illusion_data,~illusion_nr,summarise,mean=mean(distortion),sd=sd(distortion),min=min(distortion), max=max(distortion))
boxplot(illusion_data$distortion ~ illusion_data$illusion_nr)
aov(model1)
aov(illusion_data$distortion)
stortion)
aov(illusion_data$distortion)
anova(illusion_data$distortion)
fit_full <- lm( distortion ~ ., data = illusion_data)
summary(fit_full)
step(fit_full)
fit <- lm(distortion ~ red_line_light, red_line_length, rotated, round, frequency, data=illusion_data)
fit <- lm(distortion ~ red_line_length, red_line_length, rotated, round, frequency, data=illusion_data)
boxplot(illusion_data$distortion ~ illusion_data$illusion_nr, xlab='Illusion variation', ylab='Distortion')
summary(lm(illusion_data$distortion~illusion_data$illusion_nr))
aov(lm(illusion_data$distortion~illusion_data$illusion_nr))
subset_data <- read.csv("~/Desktop/subset_data.csv")
View(subset_data)
fit_full <- lm( distortion ~ ., data = subset_data)
fit_full <- lm( distortion ~ ., data = subset_data)
summary(fit_full)
step(fit_full)
illusion_data <- read.csv("~/Desktop/illusion_data.csv")
View(illusion_data)
summary(lm(distortion~default, data=illusion_data))
chisq.test(distortion~default, data=illusion_data)
illusion_data <- read.csv("~/Desktop/illusion_data.csv")
View(illusion_data)
subset_data <- read.csv("~/Desktop/subset_data.csv")
View(subset_data)
aov(lm(illusion_data$distortion~illusion_data$default))
anova(lm(illusion_data$distortion~illusion_data$default))
summary(lm(illusion_data$distortion~illusion_data$default))
illusion_data <- read.csv("~/Desktop/illusion_data.csv")
View(illusion_data)
summary(lm(illusion_data$distortion~illusion_data$default))
boxplot(illusion_data$distortion ~ illusion_data$red_line_length + illusion_data$red_line_hight)
boxplot(illusion_data$distortion ~ illusion_data$red_line_length, fill=illusion_data$red_line_hight)
boxplot(illusion_data$distortion ~ illusion_data$red_line_length, col=illusion_data$red_line_hight)
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight)
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2)
col = c("red","sienna","palevioletred1","red","sienna","palevioletred1","red","sienna","palevioletred1")
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2,
col = c("red","sienna","palevioletred1","red","sienna","palevioletred1","red","sienna","palevioletred1")
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2,
col = c("red","sienna","palevioletred1","red","sienna","palevioletred1","red","sienna","palevioletred1"))
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2,
col = c("red","sienna","palevioletred1","red","sienna","palevioletred1","red","sienna","palevioletred1"))
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2,
col = c("lightred","sienna","palevioletred1","red","sienna","palevioletred1","red","sienna","palevioletred1"))
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2,
col = c("lightred","sienna","palevioletred1","red","sienna","palevioletred1","red","sienna","palevioletred1"))
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2,
col = c("indianred1","lightsalmon","palevioletred1","indianred1","lightsalmon","palevioletred1","indianred1","lightsalmon","palevioletred1"))
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2, ylab='distortion'
col = c("indianred1","lightsalmon","palevioletred1","indianred1","lightsalmon","palevioletred1","indianred1","lightsalmon","palevioletred1"),
names= c("long.high","mid.high","short.high","long.low","mid.low","short.low","long.mid","mid.mid","short.mid"))
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2, ylab='distortion',
col = c("indianred1","lightsalmon","palevioletred1","indianred1","lightsalmon","palevioletred1","indianred1","lightsalmon","palevioletred1"),
names= c("long.high","mid.high","short.high","long.low","mid.low","short.low","long.mid","mid.mid","short.mid"))
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2, ylab='Distortion',
col = c("indianred1","lightsalmon","palevioletred1","indianred1","lightsalmon","palevioletred1","indianred1","lightsalmon","palevioletred1"),
names= c("long.high","mid.high","short.high","long.low","mid.low","short.low","long.mid","mid.mid","short.mid"))
fit_full <- lm( distortion ~ ., data = subset_data)
summary(fit_full)
step(fit_full)
summary(lm(formula = distortion ~ illusion_nr + red_line_hight + red_line_length +
rotated + frequency, data = subset_data))
summary(lm(formula = distortion ~ rotated, data = subset_data))
t.test(distortion~rotated, data=subset_data)
illusion_data <- read.csv("illusion_data.csv")
subset_data <- read.csv("subset_data.csv")
require(plyr)
# visualize distortion values by variation
boxplot(illusion_data$distortion ~ illusion_data$illusion_nr, xlab='Illusion variation', ylab='Distortion')
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2, ylab='Distortion',
col = c("indianred1","lightsalmon","palevioletred1","indianred1","lightsalmon","palevioletred1","indianred1","lightsalmon","palevioletred1"),
names= c("long.high","mid.high","short.high","long.low","mid.low","short.low","long.mid","mid.mid","short.mid"))
# get table of summary statistics
ddply(illusion_data,~illusion_nr,summarise,mean=mean(distortion),sd=sd(distortion),min=min(distortion), max=max(distortion))
# check if rotation is significant
summary(lm(formula = distortion ~ rotated, data = subset_data))
# perform stepwise regression
fit_full <- lm( distortion ~ ., data = subset_data)
step(fit_full)
summary(lm(formula = distortion ~ illusion_nr + red_line_hight + red_line_length +
rotated + frequency, data = subset_data))
# check if frequency is significant
summary(lm(formula = distortion ~ frequency(), data = subset_data))
# check if frequency is significant
summary(lm(formula = distortion ~ frequenc, data = subset_data))
# check if frequency is significant
summary(lm(formula = distortion ~ frequency, data = subset_data))
# check if rotation is significant
t.test(distortion ~ rotated, data=subset_data)
# check if rotation is significant
t.test(distortion ~ rotated, data=subset_data, var.equal=TRUE)
# check if frequency is significant
t.test(distortion ~ frequency, data=subset_data, var.equal=TRUE)
# check if rotation is significant
t.test(distortion ~ rotated, data=subset_data, var.equal=TRUE)
# check if rotation is significant
t.test(distortion ~ rotated, data=subset_data, var.equal=TRUE)
# check if frequency is significant
t.test(distortion ~ frequency, data=subset_data, var.equal=TRUE)
y = [1,2,3,4,5,6]
y = 1:10
x = 1:5
plot(x,y)
x = seq(1,5, num=10)
x = seq(1,5,10)
x = seq(1,5, 0.5)
x = seq(1,6, 0.5)
x = seq(1,5.5, 0.5)
plot(x,y)
plot(x^2,y)
plot(x^2+x,y)
plot(x^2+sqrt(x),y)
plot(x^5+sqrt(x),y)
0.192+0.144
0.192+0.144+0.048+0.216
0.192+0.144+0.192+0.064
1-0.592
0.048+0.096
0.4*0.408
(0.108+0.012/(0.108+0.012+0.016+0.064))
(0.108+0.012)/(0.108+0.012+0.016+0.064)
0.9*0.1
0.9*0.1+0.01*0.9
0.09/0.099
0.064+0.096
0.216+0.096
0.144+0.216+0.064+0.096
0.16/0.52
0.312/0.52
0.6*0.31
0.192+0.144
0.336/0.52
0.192+0.048
0.24+0.192+0.048
0.24/0.48
2*0.192
0.384/0.48
0.5*0.8
0.192+0.144
0.192/(0.192+0.048+0.048+0.192)
0.8/0.896
0.8*0.1
0.08/0.896
0.108/(0.108+0.012)
(0.108+0.072)/(0.108+0.012+0.072+0.008)
0.108/(0.108+0.012+0.016+0.064)
0.108/(0.108+0.012+0.072+0.008)
(0.108+0.016)/(0.108+0.012+0.016+0.064)
0.9*0.62
(0.108+0.016)/(0.108+0.012+0.072+0.008)
(0.108+0.012)/(0.108+0.012+0.072+0.008)
0.6*0.9
a = 2
c = -12-q
c = -12-x
c = -12-y
lesions <- read.csv("~/Desktop/lesions.csv")
View(lesions)
View(lesions)
View(lesions)
lesions <- read.csv("~/Desktop/lesions.csv")
View(lesions)
spread(lesions, lesions$)
library(tidyr)
install.packages("tidyr")
library(tidyr)
tidier <- spread(lesions, section, c(inf, ipsi, contra))
tidier <- spread(lesions, section, inf)
View(tidier)
tidier <- spread(lesions, id, inf)
View(lesions)
tidier
tidier <- spread(lesions, section, inf)
tidier
tidier <- spread(lesions, inf, section)
tidier
tidier <- spread(lesions, section, c(inf, ipsi, contra))
tidier <- lesions %>%
gather(key, val, -ID, -map, -timepoint)
tidier %>% head(8)
cos(0.59)
pbinom(3,0.5)
dbinom(3,0.5)
dbinom(x=0:3, prob=0.5)
dbinom(x=0:3, prob=0.5, size=3)
dbinom(x=0:3, prob=0.8, size=3)
dbinom(size=5, prob=0.5)
dbinom(x=0:6,size=5, prob=0.5)
dbinom(x=-1:6,size=5, prob=0.5)
d1=dbinom(x=-1:6,size=5, prob=0.5)
plot(d1)
d2=dbinom(x=-1:6,size=5, prob=0.3)
plot(d2)
d2=dbinom(x=-1:6,size=3, prob=0.3)
d1=dbinom(x=-1:6,size=3, prob=0.5)
plot(d1)
0.108+0.016+0.072+0.144
0.012+0.014+0.008+0.576
0.012+0.064+0.008+0.576
.5*.1*.99*.8
library(bnlearn)
install.packages("bnlearn")
install.packages("gRain")
T = []
T = [17/27 5/54 5/18 0; 11/27 22/189 0 10/21 2/9 0 59/153 20/51; 0 1/42 11/102 310/357]
T <- [17/27 5/54 5/18 0; 11/27 22/189 0 10/21 2/9 0 59/153 20/51; 0 1/42 11/102 310/357]
T <- c(17/27 5/54 5/18 0; 11/27 22/189 0 10/21 2/9 0 59/153 20/51; 0 1/42 11/102 310/357)
x <- 17/27 5/54 5/18 0 11/27 22/189 0 10/21 2/9 0 59/153 20/51 0 1/42 11/102 310/357)
x <- [17/27 5/54 5/18 0 11/27 22/189 0 10/21 2/9 0 59/153 20/51 0 1/42 11/102 310/357]
x
x <- c(17/27 5/54 5/18 0 11/27 22/189 0 10/21 2/9 0 59/153 20/51 0 1/42 11/102 310/357)
x <- c(17/27 ,5/54, 5/18, 0, 11/27, 22/189 ,0, 10/21, 2/9, 0, 59/153 ,20/51, 0 ,1/42, 11/102 ,310/357)
as.matrix(x,4,4)
as.matrix(x,nrow=4,ncol=4)
as.matrix(x,4,4, byrow=T)
as.matrix(x,4,4, byrow=F)
x <- c(17/27 ,5/54, 5/18, 0; 11/27, 22/189 ,0, 10/21; 2/9; 0, 59/153 ,20/51; 0 ,1/42, 11/102 ,310/357)
c
x
matrix(x, 4,4)
T = matrix(x, 4,4)
library(expm)
install.packages("expm")
T
T %^20%
d
library(expm)
T %^20%
d
T %^% 20
T %^% 100
x <- c(17/27 ,5/54, 5/18, 0, 11/27, 22/189 ,0, 10/21, 2/9, 0, 59/153 ,20/51, 0 ,1/42, 11/102 ,310/357)
T1 = matrix(x, 4,4)
T2 = matrix(x, 4,4)
T10 = matrix(x, 4,4)
T20 = matrix(x, 4,4)
T100 = matrix(x, 4,4)
T1 %^% 2
T
T1
T2
T2 <- %^% 2
T2 <- T%^% 2
T10 <- T%^% 10
T100 <- T%^% 100
T
T100
T2
T10
t100
T100
T1000 <- T%^% 1000
T1000
x = [1 2 3]
x= c(1,2,3)
w = c(0.5, 0.1, 0.9)
install.packages("hBayesDM")
library("hBayesDM", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
output1 = gng_m1(data="example", niter=20, nwarmup=5, nchain=4, ncore=4)
plot(output1, type="trace", fontSize=11)   # traceplot of hyper parameters. Set font size 11.
plot(output1, type="trace", inc_warmup=T)   # traceplot of hyper parameters w/ warmup samples
##
library(rstan)
library(data.table)
preprocess_func = function(raw_data, general_info, RTbound = 0.1) {
# Use raw_data as a data.frame
raw_data <- as.data.frame(raw_data)
# Use general_info of raw_data
subjs   <- general_info$subjs
n_subj  <- general_info$n_subj
# Number of upper and lower boundary responses
Nu <- with(raw_data, aggregate(choice == 2, by = list(y = subjid), FUN = sum)[["x"]])
Nl <- with(raw_data, aggregate(choice == 1, by = list(y = subjid), FUN = sum)[["x"]])
# Reaction times for upper and lower boundary responses
RTu <- array(-1, c(n_subj, max(Nu)))
RTl <- array(-1, c(n_subj, max(Nl)))
for (i in 1:n_subj) {
subj <- subjs[i]
subj_data <- subset(raw_data, raw_data$subjid == subj)
RTu[i, 1:Nu[i]] <- subj_data$rt[subj_data$choice == 2]  # (Nu/Nl[i]+1):Nu/Nl_max will be padded with 0's
RTl[i, 1:Nl[i]] <- subj_data$rt[subj_data$choice == 1]  # 0 padding is skipped in likelihood calculation
}
# Minimum reaction time
minRT <- with(raw_data, aggregate(rt, by = list(y = subjid), FUN = min)[["x"]])
# Wrap into a list for Stan
data_list <- list(
N       = n_subj,   # Number of subjects
Nu_max  = max(Nu),  # Max (across subjects) number of upper boundary responses
Nl_max  = max(Nl),  # Max (across subjects) number of lower boundary responses
Nu      = Nu,       # Number of upper boundary responses for each subject
Nl      = Nl,       # Number of lower boundary responses for each subject
RTu     = RTu,      # Upper boundary response times
RTl     = RTl,      # Lower boundary response times
minRT   = minRT,    # Minimum RT for each subject
RTbound = RTbound   # Lower bound of RT across all subjects (e.g., 0.1 second)
)
# Returned data_list will directly be passed to Stan
return(data_list)
}
path <- "/home/padraigh/Dokumente/Uni/NSC/Thesis/mri_task_analysis/model/rlddm_hbayes/"
setwd(path)
model_path <- paste0(path,"choiceRT_rlddm.stan")
data_path <- paste0(path,"test_input.txt")
stanmodel_arg <- rstan::stan_model(model_path)
data_columns    = c("subjID", "choice", "RT")
raw_data <- data.table::fread(file = data_path, header = TRUE, sep = "\t", data.table = TRUE,
fill = TRUE, stringsAsFactors = TRUE, logical01 = FALSE)
colnames_raw_data <- colnames(raw_data)
insensitive_data_columns <- tolower(gsub("_", "", data_columns, fixed = TRUE))
colnames(raw_data) <- tolower(gsub("_", "", colnames(raw_data), fixed = TRUE))
complete_rows       <- complete.cases(raw_data[, insensitive_data_columns, with = FALSE])
sum_incomplete_rows <- sum(!complete_rows)
####################################################
##   Prepare general info about the raw data   #####
####################################################
subjs    <- NULL   # List of unique subjects (1D)
n_subj   <- NULL   # Total number of subjects (0D)
b_subjs  <- NULL   # Number of blocks per each subject (1D)
b_max    <- NULL   # Maximum number of blocks across all subjects (0D)
t_subjs  <- NULL   # Number of trials (per block) per subject (2D or 1D)
t_max    <- NULL   # Maximum number of trials across all blocks & subjects (0D)
# To avoid NOTEs by R CMD check
.N <- NULL
subjid <- NULL
DT_trials <- raw_data[, .N, by = c("subjid", "block")]
DT_blocks <- DT_trials[, .N, by = "subjid"]
subjs     <- DT_blocks$subjid
n_subj    <- length(subjs)
b_subjs   <- DT_blocks$N
b_max     <- max(b_subjs)
t_subjs   <- array(0, c(n_subj, b_max))
for (i in 1:n_subj) {
subj <- subjs[i]
b <- b_subjs[i]
t_subjs[i, 1:b] <- DT_trials[subjid == subj]$N
}
t_max     <- max(t_subjs)
general_info <- list(subjs, n_subj, b_subjs, b_max, t_subjs, t_max)
names(general_info) <- c("subjs", "n_subj", "b_subjs", "b_max", "t_subjs", "t_max")
preprocessed <- preprocess_func(raw_data,general_info,RTbound = 0.1)
View(preprocessed)
library(rjags)
library(coda)
load.module("wiener")
path <- "/home/padraigh/Dokumente/Uni/NSC/Thesis/mri_task_analysis/model/rlddm_jags/"
model_path <- paste0(path,"rlddm_reduced.jag")
data_path <- paste0(path,"input_6subj_wtrials_1block.txt")
setwd(path)
raw_data <- data.table::fread(file = data_path, header = TRUE, sep = "\t", data.table = TRUE,
fill = TRUE, stringsAsFactors = TRUE, logical01 = FALSE)
raw_data <- raw_data[which(raw_data$RT > 0.3),]
names(raw_data)[names(raw_data)=="choice"] <- "correct"
## prepare data for jags
#raw_data$row <- seq.int(nrow(raw_data))
DT_trials <- raw_data[, .N, by = "subjID"]
subjs     <- DT_trials$subjID
n_subj    <- length(subjs)
# assign new trial number for excluded decisions
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$trial <- seq.int(nrow(raw_data[sub,]))
}
# first is Sx1 matrix identifying all first trials of a subject for each choice
first <- which(raw_data$trial==1)
# last is a Sx1 matrix identifying all last trials of a subject for each choice
last <- as.integer(first + DT_trials$N - 1)
# incorrect is the inverse vector of choice and is needed to update the ev for the non-choices
raw_data$incorrect <- as.integer(ifelse(raw_data$correct==1, 2, 1))
# define the values for the rewards
value <- ifelse(raw_data$correct==1, 0, 1)
## all RT with negative choices -> -1
new_RT <- ifelse(raw_data$correct==1, raw_data$RT*-1, raw_data$RT)
dat <- list("S" = n_subj, "iter" = raw_data$trial, "correct" = raw_data$correct, "incorrect" = raw_data$incorrect,
"RT" = new_RT, "first" = first, "last" = last, "value"=value)  # names list of numbers
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
