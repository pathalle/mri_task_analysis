remove.packages("StanHeaders")
remove.packages("rstantools")
remove.packages("hBayesDM")
install.packages("rstan", lib="\\idnetapp-homes3.uzh.ch\phalle$\Documents\R\win-library\3.5")
install.packages("rstan", lib="\\\idnetapp-homes3.uzh.ch\\phalle$\\Documents\\R\\win-library\\3.5")
install.packages("rstan", lib="\\idnetapp-homes3.uzh.ch\\phalle$\\Documents\\R\\win-library\\3.5")
install.packages("rstan", lib="\\\\idnetapp-homes3.uzh.ch\\phalle$\\Documents\\R\\win-library\\3.5")
library('rstan')
install.packages("rstantools", lib="\\\\idnetapp-homes3.uzh.ch\\phalle$\\Documents\\R\\win-library\\3.5")
install.packages("hBayesDM", lib="\\\\idnetapp-homes3.uzh.ch\\phalle$\\Documents\\R\\win-library\\3.5")
library(hBayesDM)
dataPath = "N:\\Users\\phaller\\R_hBayesDM\\gng_exampleData.txt"
output1 = gng_m1(data=dataPath, niter=2000, nwarmup=1000, nchain=4, ncore=4)
.libPaths()
remove.packages("rstan")
remove.packages("StanHeaders")
remove.packages("rstantools")
remove.packages("hBayesDM")
install.packages("rstan", lib="C:\\Program Files\\R\\R-3.5.2")
install.packages("rstan", lib = "C:\\Program Files\\R\\R-3.5.2")
install.packages("rstan", lib="C:\\Program Files\\R\\R-3.5.2\\library")
install.packages("rstan", lib="C:\\Program Files\\R\\R-3.5.2\\library")
library('rstan')
install.packages("rstantools", lib="C:\\Program Files\\R\\R-3.5.2\\library")
install.packages("hBayesDM", lib="C:\\Program Files\\R\\R-3.5.2\\library")
library(hBayesDM)
library(hBayesDM)
dataPath = "N:\\Users\\phaller\\R_hBayesDM\\gng_exampleData.txt"
output1 = gng_m1(data=dataPath, niter=2000, nwarmup=1000, nchain=4, ncore=4)
remove.packages('rcpp')
install.packages("Rcpp", lib="C:\\Program Files\\R\\R-3.5.2\\library")
install.packages("Rcpp", lib = "C:\\Program Files\\R\\R-3.5.2\\library")
remove.packages("hBayesDM")
install.packages("hBayesDM", lib="C:\\Program Files\\R\\R-3.5.2\\library")
library(hBayesDM)
dataPath = "N:\\Users\\phaller\\R_hBayesDM\\gng_exampleData.txt"
output1 = gng_m1(data=dataPath, niter=2000, nwarmup=1000, nchain=4, ncore=4)
pkgbuild::has_build_tools(debug = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, ifelse(.Platform$OS.type == "windows", "Makevars.win", "Makevars"))
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS=-O3 -march=native -mtune=native",
if( grepl("^darwin", R.version$os)) "CXX14FLAGS += -arch x86_64 -ftemplate-depth-256" else
if (.Platform$OS.type == "windows") "CXX11FLAGS=-O3 -march=native -mtune=native" else
"CXX14FLAGS += -fPIC",
file = M, sep = "\n", append = TRUE)
library("rstan")
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
library("rstan")
detach("package:rstan", unload=TRUE)
library("rstan")
dataPath = "N:\\Users\\phaller\\R_hBayesDM\\gng_exampleData.txt"
output1 = gng_m1(data=dataPath, niter=2000, nwarmup=1000, nchain=4, ncore=4)
pkgbuild::has_build_tools(debug = TRUE)
library(hBayesDM)
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
.libPaths()
library(hBayesDM)
install.packages("hBayesDM", lib="C:\\Program Files\\R\\R-3.5.2\\library")
install.packages("hBayesDM", lib = "C:\\Program Files\\R\\R-3.5.2\\library")
install.packages("hBayesDM", lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
library("hBayesDM", lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
library("hBayesDM",dependencies = TRUE, lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
detach("package:Rcpp", unload=TRUE)
detach("package:hBayesDM", unload=TRUE)
library("rstan",lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
library("Rcpp",lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
library("Rcpp",lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
detach("package:StanHeaders", unload=TRUE)
detach("package:rstan", unload=TRUE)
detach("package:Rcpp", unload=TRUE)
detach("package:hBayesDM", unload=TRUE)
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan",lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
library("Rcpp",lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
library("hBayesDM",lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
.libPaths()
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
library("hBayesDM")
library("hBayesDM")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
detach("package:hBayesDM", unload=TRUE)
.libPaths()
library(hBayesDM)
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
detach("package:hBayesDM", unload=TRUE)
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
detach("package:hBayesDM", unload=TRUE)
detach("package:Rcpp", unload=TRUE)
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
library("hBayesDM")
detach("package:hBayesDM", unload=TRUE)
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("StanHeaders", lib.loc="\\\\idnetapp-homes3.uzh.ch/phalle$/Documents/R/win-library/3.5")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
install.packages("StanHeaders", lib="C:\\Program Files\\R\\R-3.5.2\\library")
install.packages("StanHeaders", lib = "C:\\Program Files\\R\\R-3.5.2\\library")
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM")
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
.libPaths()
# output may look like this
#[1] "\\\\idnetapp-homes3.uzh.ch/phalle$/Documents/R/win-library/3.5"
#[2] "C:/Program Files/R/R-3.5.2/library"
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
#install.packages("rstan", lib="C:\\Program Files\\R\\R-3.5.2\\library")
#install.packages("StanHeaders", lib="C:\\Program Files\\R\\R-3.5.2\\library")
#install.packages("rstantools", lib="C:\\Program Files\\R\\R-3.5.2\\library")
#install.packages("hBayesDM", lib="C:\\Program Files\\R\\R-3.5.2\\library")
#install.packages("Rcpp", lib="C:\\Program Files\\R\\R-3.5.2\\library")
# after successful installation, load required packages
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
dataPath = "N:/studies/AllRead/Feedback learning/ddmodeling/children_abmp_fb_as_choice"
ddm_model_abmp_adults = choiceRT_ddm(
paste(dataPath, "model_input_abmp_children_190402.txt", sep="/"), niter=4000, nwarmup=1000, nchain=4, ncore=4, inits="fixed",
RTbound=0.05)
X <- c(11,12,13,14,21,22,23,24,31,32,33,34)
sample(X)
X <- c(11,12,13,14,21,22,23,24,31,32,33,34,11,12,13,14,21,22,23,24,31,32,33,34,11,12,13,14,21,22,23,24,31,32,33,34)
sample(X)
length(X)
sample(X)
sample(X)
sample(X)
sample(X)
sample(X)
X <- c(rep(112,113,121,131,221,223,212,232,331,332,313,323),3)
X
X <- rep(c(112,113,121,131,221,223,212,232,331,332,313,323),3)
X
length(X)
sample(X)
sample(X)
sample(X)
sample(X)
sample(X)
sample(X)
sample(X)
install.packages("RWiener")
library(RWiener)
stim <- c(112,121,113,131,114,141,221,212,223,232,224,242,331,313,332,323,334,343)
length(stim)
stim <- rep(stim,2)
stim
sample(stim,replace=FALSE)
sample(stim,replace=FALSE)
sample(stim,replace=FALSE)
sample(stim,replace=FALSE)
sample(stim,replace=FALSE)
sample(stim,replace=FALSE)
install.packages("rtdists", lib="C:/Program Files/R/R-3.5.2/library")
require(rtdist)
require(rtdists)
example(Diffusion)
library(RWiener)
library(ggplot2)
#rwiener(n, alpha,tau,beta,delta)
#restrictions: 0 < β < 1, α > 0, τ > 0
dat <- rwiener(20,0.5,1,0.5,0.5)
ggplot(dat) + geom_histogram() + aes(x=q, fil=)
ggplot(dat) + geom_histogram() + aes(x=resp)
ggplot(dat) + geom_histogram() + aes(x=resp)
ggplot(dat) + geom_histograms(stat="count") + aes(x=resp)
ggplot(dat) + geom_histogram(stat="count") + aes(x=resp)
ggplot(dat) + geom_histogram() + aes(x=q, fill=resp)
ggplot(dat) + geom_smooth() + aes(x=q, fill=resp)
ggplot(dat) + geom_density() + aes(x=q, fill=resp)
wiener_plot(dat)
#rwiener(n, alpha,tau,beta,delta)
#restrictions: 0 < β < 1, α > 0, τ > 0
dat <- rwiener(20,2,0.1,0.5,0.5)
wiener_plot(dat)
#rwiener(n, alpha,tau,beta,delta)
#restrictions: 0 < β < 1, α > 0, τ > 0
dat <- rwiener(20,2,0.1,0.5,0.6)
wiener_plot(dat)
#rwiener(n, alpha,tau,beta,delta)
#restrictions: 0 < β < 1, α > 0, τ > 0
dat <- rwiener(20,3,0.1,0.5,0.6)
wiener_plot(dat)
#rwiener(n, alpha,tau,beta,delta)
#restrictions: 0 < β < 1, α > 0, τ > 0
dat <- rwiener(20,2.5,0.1,0.5,0.6)
wiener_plot(dat)
#rwiener(n, alpha,tau,beta,delta)
#restrictions: 0 < β < 1, α > 0, τ > 0
dat <- rwiener(20,2.5,0.1,0.5,0.7)
wiener_plot(dat)
#rwiener(n, alpha,tau,beta,delta)
#restrictions: 0 < β < 1, α > 0, τ > 0
dat <- rwiener(20,2.5,0.1,0.5,0.6)
wiener_plot(dat)
#rwiener(n, alpha,tau,beta,delta)
#restrictions: 0 < β < 1, α > 0, τ > 0
dat <- rwiener(20,2.,0.1,0.5,0.6)
wiener_plot(dat)
# save model
#saveRDS(fit, "fit1.rds")
fit <- readRDS("N:/Users/phaller/modeling_data/fit1.rds")
View(fit)
parVals <- rstan::extract(fit, permuted = TRUE)
# after successful installation, load required packages
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("boot")
library("readr")
library("tidyr")
library("dplyr")
###
gather_data <- function(files){
# summarize all data in 1 data frame
datalist <- list()
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
#D <- cbind(rep(substr(files[i],1,12),dim(D)[1]),D) for adult pilots
D <- cbind(rep(substr(files[i],1,12),dim(D)[1]),D)
datalist[[i]] <- D
}
transformed <- data.table::rbindlist(datalist) # combine all data frames in on
return(transformed)
}
#get_astim_trials <- function(data){
df_subj <- list()
#data<-data[data$choice!=0,] # remove 'too slow ' responses
new_data <- data[FALSE,]
new_col_trial <- data.frame(trial_astim = integer(0))
new_data <- cbind(new_data,new_col_trial)
for(i in unique(data$subjID)){
df_subj[[i]] <- subset(data, subjID == i)
for(j in unique(df_subj[[i]]$block)){
df_subj_block <- subset(df_subj[[i]],block==j)
# compute cumulative sum for each auditory stimulus in a given block of a subject
for(k in unique(df_subj_block$aStim)){
df_subj_block_astim <- list()
df_subj_block_astim[[k]] <- subset(df_subj_block, aStim==k )
new_col_trial <- 1:nrow(df_subj_block_astim[[k]])
df_subj_block_astim[[k]]<- cbind(df_subj_block_astim[[k]],new_col_trial)
colnames(df_subj_block_astim[[k]])[ncol(df_subj_block_astim[[k]])] <- "trial_astim"
new_data <- rbind(new_data,df_subj_block_astim[[k]])
# reorder data
new_data <- new_data[
with(new_data, order(subjID, block,trial)),
]
}
}
}
return(new_data)
}
## define paths
path <- "N:/Users/phaller/mri_task_analysis"
model_path <- paste0(path,"/model/rlddm_stan/rlddm_blocks.stan")
data_path <- paste0(path,"/data/piloting/pilots_biokurs")
### load data
setwd(data_path)
files <- dir(pattern=".txt", recursive=TRUE)
raw_data <- gather_data(files)
colnames(raw_data)[1] <- "subjID"
raw_data$rt <- raw_data$rt/1000
names(raw_data)[names(raw_data)=="rt"] <- "RT"
DT_trials <- raw_data[, .N, by = subjID]
subjs <- DT_trials$subjID
n_subj    <- length(subjs)
# automatically filter missed responses (since RT = 0)
raw_data <- raw_data[which(raw_data$RT > 0.15),]
raw_data$trial <- as.integer(raw_data$trial)
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$trial <- seq.int(nrow(raw_data[sub,]))
}
# rename blocks
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$block <- as.factor(raw_data[sub,]$block)
levels(raw_data[sub,]$block) <- c("1","2","3")
#levels(raw_data[sub,]$block) <- c("1","2")
raw_data[sub,]$block <- as.integer(raw_data[sub,]$block)
}
# raw data: fb = 0 incorrect, fb = 1 correct, (fb = 2 missed)
# encoding for simulation: lower (incorrect) response=1, upper (correct) response =2
raw_data$response = raw_data$fb+1
# raw_data$nonresponse = abs(raw_data$fb-2) # not used atm
raw_data$aStim <- as.double(raw_data$aStim)
# split vstim columns
raw_data <- raw_data %>% separate(vStims, c("vStim1", "vStim2"),sep="\\_")
raw_data$vStim1 <- as.double(raw_data$vStim1)
raw_data$vStim2 <- as.double(raw_data$vStim2)
# get new column with non-associated stimulus
raw_data[which(raw_data$block==2),]$aStim = raw_data[which(raw_data$block==2),]$aStim + 8
raw_data[which(raw_data$block==2),]$vStim1 = raw_data[which(raw_data$block==2),]$vStim1 + 8
raw_data[which(raw_data$block==2),]$vStim2 = raw_data[which(raw_data$block==2),]$vStim2 + 8
raw_data[which(raw_data$block==3),]$aStim = raw_data[which(raw_data$block==3),]$aStim + 16
raw_data[which(raw_data$block==3),]$vStim1 = raw_data[which(raw_data$block==3),]$vStim1 + 16
raw_data[which(raw_data$block==3),]$vStim2 = raw_data[which(raw_data$block==3),]$vStim2 + 16
raw_data$vStimNassoc <- ifelse(raw_data$aStim==raw_data$vStim1,raw_data$vStim2,raw_data$vStim1)
#raw_data <- get_astim_trials(raw_data)
DT_trials <- raw_data[, .N, by = subjID]
# get minRT
minRT <- with(raw_data, aggregate(RT, by = list(y = subjID), FUN = min)[["x"]])
ifelse(is.null(dim(minRT)),minRT<-as.array(minRT))
first <- which(raw_data$trial==1)
# if N=1 transform int to 1-d array
first<-as.array(first)
# last is a Sx1 matrix identifying all last trials of a subject for each choice
last <- (first + DT_trials$N - 1)
last<-as.array(last)
# incorrect is the inverse vector of choice and is needed to update the ev for the non-choices
#raw_data$incorrect <- as.integer(ifelse(raw_data$correct==1, 0, 1))
# define the values for the rewards: if upper resp, value = 1
value <- ifelse(raw_data$response==2, 1, 0)
n_trials <- nrow(raw_data)
#blocks <- tapply(raw_data$block,raw_data$subjID, max,simplify = TRUE)
blocks <- aggregate( raw_data$block ~ raw_data$subjID, FUN = max )
blocks <- blocks$`raw_data$block`
ifelse(is.null(dim(blocks)),blocks<-as.array(blocks))
stims_per_block <- 4
dat <- list("N" = n_subj, "T"=n_trials,"RTbound" = 0.15,"minRT" = minRT, "iter" = raw_data$trial, "response" = raw_data$response,
"stim_assoc" = raw_data$aStim, "stim_nassoc" = raw_data$vStimNassoc, "RT" = raw_data$RT, "first" = first, "last" = last, "value"=value, "n_stims"=stims_per_block*blocks)  # names list of numbers
dat
alpha <- rep("NA",dat$N)
for (i in 1:dat$N){
index <- paste0("alpha[",i,"]")
alpha[i] <- fit_summary$summary[index,1]
}
alpha <- as.double(alpha)
fit_summary <- rstan::summary(fit)
alpha <- rep("NA",dat$N)
for (i in 1:dat$N){
index <- paste0("alpha[",i,"]")
alpha[i] <- fit_summary$summary[index,1]
}
alpha <- as.double(alpha)
alpha_mod <- rep("NA",dat$N)
for (i in 1:dat$N){
index <- paste0("a_mod[",i,"]")
alpha_mod[i] <- fit_summary$summary[index,1]
}
alpha_mod <- as.double(alpha_mod)
drift_mod <- rep("NA",dat$N)
for (i in 1:dat$N){
index <- paste0("v_mod[",i,"]")
drift_mod[i] <- fit_summary$summary[index,1]
}
drift_mod <- as.double(drift_mod)
tau <- v_mod <- rep("NA",dat$N)
for (i in 1:dat$N){
index <- paste0("tau[",i,"]")
tau[i] <- fit_summary$summary[index,1]
}
tau <- as.double(tau)
deltas <- rep("NA",dat$T)
for (i in 1:dat$T){
index <- paste0("delta_hat[",i,"]")
deltas[i] <- fit_summary$summary_ch[index,1]
}
deltas <- as.double(deltas)
assoc_active_pair <- rep("NA",dat$T)
for (i in 1:dat$T){
index <- paste0("assoc_active_pair[",i,"]")
assoc_active_pair[i] <- fit_summary$summary_ch[index,1]
}
assoc_active_pair <- as.double(assoc_active_pair)
assoc_inactive_pair <- rep("NA",dat$T)
for (i in 1:dat$T){
index <- paste0("assoc_inactive_pair[",i,"]")
assoc_inactive_pair[i] <- fit_summary$summary_ch[index,1]
}
assoc_inactive_pair <- as.double(assoc_inactive_pair)
pe_hat <- rep("NA",dat$T)
for (i in 1:dat$T){
index <- paste0("pe_hat[",i,"]")
pe_hat[i] <- fit_summary$summary_ch[index,1]
}
pe_hat <- as.double(pe_hat)
assoc_active_pair <- rep("NA",dat$T)
for (i in 1:dat$T){
index <- paste0("assoc_active_pair[",i,"]")
assoc_active_pair[i] <- fit_summary$summary[index,1]
}
assoc_active_pair <- as.double(assoc_active_pair)
assoc_inactive_pair <- rep("NA",dat$T)
for (i in 1:dat$T){
index <- paste0("assoc_inactive_pair[",i,"]")
assoc_inactive_pair[i] <- fit_summary$summary[index,1]
}
assoc_inactive_pair <- as.double(assoc_inactive_pair)
pe_hat <- rep("NA",dat$T)
for (i in 1:dat$T){
index <- paste0("pe_hat[",i,"]")
pe_hat[i] <- fit_summary$summary[index,1]
}
pe_hat <- as.double(pe_hat)
tbtregs <- cbind(raw_data[,1:3],pe=as.array(pe_hat),deltas=as.array(deltas),drift=rep("NA",dat$T),assoc_active=as.array(assoc_active_pair),assoc_inactive=as.array(assoc_inactive_pair))
mean_drift <-  rep("NA",dat$N)
tbtregs <- cbind(raw_data[,1:3],pe=as.array(pe_hat),deltas=as.array(deltas),drift=rep("NA",dat$T),assoc_active=as.array(assoc_active_pair),assoc_inactive=as.array(assoc_inactive_pair))
mean_drift <-  rep("NA",dat$N)
for(i in 1:n_subj){
subj = as.character(subjs[i])
tbtregs[which(tbtregs$subjID==subj),]$drift = tbtregs[which(tbtregs$subjID==subj),]$deltas * drift_mod[i]
tbtregs[which(tbtregs$subjID==subj),]$drift = as.double(tbtregs[which(tbtregs$subjID==subj),]$drift)
mean_drift[i] = mean(tbtregs[which(tbtregs$subjID==subj),]$drift)
write.table(data_out[which(data_out$subjID==subj),], paste0(subj,"pars",".csv"), sep=",", row.names=FALSE, col.names=TRUE)
}
View(tbtregs)
deltas <- rep("NA",dat$T)
for (i in 1:dat$T){
index <- paste0("delta_hat[",i,"]")
deltas[i] <- fit_summary$summary[index,1]
}
deltas <- as.double(deltas)
tbtregs <- cbind(raw_data[,1:3],pe=as.array(pe_hat),deltas=as.array(deltas),drift=rep("NA",dat$T),assoc_active=as.array(assoc_active_pair),assoc_inactive=as.array(assoc_inactive_pair))
mean_drift <-  rep("NA",dat$N)
for(i in 1:n_subj){
subj = as.character(subjs[i])
tbtregs[which(tbtregs$subjID==subj),]$drift = tbtregs[which(tbtregs$subjID==subj),]$deltas * drift_mod[i]
tbtregs[which(tbtregs$subjID==subj),]$drift = as.double(tbtregs[which(tbtregs$subjID==subj),]$drift)
mean_drift[i] = mean(tbtregs[which(tbtregs$subjID==subj),]$drift)
#write.table(tbtregs[which(data_out$subjID==subj),], paste0(subj,"pars",".csv"), sep=",", row.names=FALSE, col.names=TRUE)
}
View(tbtregs)
View(raw_data)
tbtregs <- cbind(raw_data[,1:9],raw_data[,14:16],raw_data[,18],pe=as.array(pe_hat),deltas=as.array(deltas),drift=rep("NA",dat$T),assoc_active=as.array(assoc_active_pair),assoc_inactive=as.array(assoc_inactive_pair))
mean_drift <-  rep("NA",dat$N)
for(i in 1:n_subj){
subj = as.character(subjs[i])
tbtregs[which(tbtregs$subjID==subj),]$drift = tbtregs[which(tbtregs$subjID==subj),]$deltas * drift_mod[i]
tbtregs[which(tbtregs$subjID==subj),]$drift = as.double(tbtregs[which(tbtregs$subjID==subj),]$drift)
mean_drift[i] = mean(tbtregs[which(tbtregs$subjID==subj),]$drift)
#write.table(tbtregs[which(data_out$subjID==subj),], paste0(subj,"pars",".csv"), sep=",", row.names=FALSE, col.names=TRUE)
}
warnings()
View(tbtregs)
tbtregs <- cbind(raw_data[,1:9],raw_data[,18],raw_data[,14:16],pe=as.array(pe_hat),deltas=as.array(deltas),drift=rep("NA",dat$T),assoc_active=as.array(assoc_active_pair),assoc_inactive=as.array(assoc_inactive_pair))
mean_drift <-  rep("NA",dat$N)
for(i in 1:n_subj){
subj = as.character(subjs[i])
tbtregs[which(tbtregs$subjID==subj),]$drift = tbtregs[which(tbtregs$subjID==subj),]$deltas * drift_mod[i]
tbtregs[which(tbtregs$subjID==subj),]$drift = as.double(tbtregs[which(tbtregs$subjID==subj),]$drift)
mean_drift[i] = mean(tbtregs[which(tbtregs$subjID==subj),]$drift)
#write.table(tbtregs[which(data_out$subjID==subj),], paste0(subj,"pars",".csv"), sep=",", row.names=FALSE, col.names=TRUE)
}
View(tbtregs)
typeof(tbtregs$drift)
typeof(tbtregs$deltas)
tbtregs <- cbind(raw_data[,1:9],raw_data[,18],raw_data[,14:16],pe=as.array(pe_hat),deltas=as.array(deltas),drift=rep(0,dat$T),assoc_active=as.array(assoc_active_pair),assoc_inactive=as.array(assoc_inactive_pair))
mean_drift <-  rep("NA",dat$N)
for(i in 1:n_subj){
subj = as.character(subjs[i])
tbtregs[which(tbtregs$subjID==subj),]$drift = tbtregs[which(tbtregs$subjID==subj),]$deltas * drift_mod[i]
tbtregs[which(tbtregs$subjID==subj),]$drift = as.double(tbtregs[which(tbtregs$subjID==subj),]$drift)
mean_drift[i] = mean(tbtregs[which(tbtregs$subjID==subj),]$drift)
#write.table(tbtregs[which(data_out$subjID==subj),], paste0(subj,"pars",".csv"), sep=",", row.names=FALSE, col.names=TRUE)
}
typeof(tbtregs$deltas)
typeof(tbtregs$drift)
mean_drift
tbtregs
mean_drift <- aggregate(list(drift=tbtregs$drift),list(subjID=tbtregs$subjID), mean)
subj_params <- cbind(mean_drift,alpha,alpha_mod,tau,drift_mod)
subj_params <- cbind(raw_data[,1], subj_params)
subjs
subj_params <- cbind(as.character(subjs), subj_params)
subj_params
mean_drift
subj_params <- cbind(mean_drift,alpha,alpha_mod,tau,drift_mod)
subj_params
subj_params <- cbind(mean_drift=mean_drift,alpha,alpha_mod,tau,drift_mod)
write.table(subj_params, "subj_params.csv", sep=",", row.names=FALSE, col.names=TRUE,quote = FALSE)
for(i in 1:n_subj){
subj = as.character(subjs[i])
tbtregs[which(tbtregs$subjID==subj),]$drift = tbtregs[which(tbtregs$subjID==subj),]$deltas * drift_mod[i]
write.table(tbtregs[which(data_out$subjID==subj),], paste0(subj,"_pars",".csv"), sep=",", row.names=FALSE, col.names=TRUE)
}
tbtregs
for(i in 1:n_subj){
subj = as.character(subjs[i])
write.table(tbtregs[which(data_out$subjID==subj),], paste0(subj,"_pars",".csv"), sep=",", row.names=FALSE, col.names=TRUE)
}
for(i in 1:n_subj){
subj = as.character(subjs[i])
write.table(tbtregs[which(tbtregs$subjID==subj),], paste0(subj,"_pars",".csv"), sep=",", row.names=FALSE, col.names=TRUE)
}
dbinom(10,10,0.5)
dbinom(10,10,0.5) + dbinom(9,10,0.5) + dbinom(8,10,0.5) + dbinom(9,10,0.5)
dbinom(10,10,0.5) + dbinom(9,10,0.5) + dbinom(8,10,0.5)
