}
View(raw_data)
raw_data[which(raw_data$block==2),]$aStim = raw_data[which(raw_data$block==2),]$aStim + 8
View(raw_data)
raw_data[which(raw_data$block==2),]$vStim1 = raw_data[which(raw_data$block==2),]$vStim1 + 8
raw_data[which(raw_data$block==2),]$vStim2 = raw_data[which(raw_data$block==2),]$avStim2 + 8
raw_data[which(raw_data$block==3),]$aStim = raw_data[which(raw_data$block==2),]$aStim + 16
raw_data[which(raw_data$block==3),]$vStim1 = raw_data[which(raw_data$block==2),]$vStim1 + 16
raw_data[which(raw_data$block==3),]$vStim2 = raw_data[which(raw_data$block==2),]$avStim2 + 16
raw_data <- gather_data(files)
colnames(raw_data)[1] <- "subjID"
raw_data$rt <- raw_data$rt/1000
names(raw_data)[names(raw_data)=="rt"] <- "RT"
# automatically filter missed responses (since RT = 0)
raw_data <- raw_data[which(raw_data$RT > 0.15),]
#raw_data$subjID = rep('01',nrow(raw_data))
# raw data: fb = 0 incorrect, fb = 1 correct, (fb = 2 missed)
# encoding for simulation: lower (incorrect) response=1, upper (correct) response =2
raw_data$response = raw_data$fb+1
# raw_data$nonresponse = abs(raw_data$fb-2) # not used atm
# split vstim columns
raw_data <- raw_data %>% separate(vStims, c("vStim1", "vStim2"),sep="\\_")
# get new column with non-associated stimulus
raw_data$vStimNassoc <- ifelse(raw_data$aStim==raw_data$vStim1,as.integer(raw_data$vStim2),as.integer(raw_data$vStim1))
raw_data <- get_astim_trials(raw_data)
## prepare data for jags
#raw_data$row <- seq.int(nrow(raw_data))
DT_trials <- raw_data[, .N, by = list(subjID,block)]
subjs     <- DT_trials$subjID
n_subj    <- length(subjs)
# get minRT
minRT <- with(raw_data, aggregate(RT, by = list(y = subjID), FUN = min)[["x"]])
ifelse(is.null(dim(minRT)),minRT<-as.array(minRT))
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$block <- as.factor(raw_data[sub,]$block)
levels(raw_data[sub,]$block) <- c("1","2","3")
raw_data[sub,]$block <- as.integer(raw_data[sub,]$block)
}
#raw_data$trial_subj <- rep("NA",nrow(raw_data))
# since we discarded some observations, we have to assign new trial numbers
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$trial <- seq.int(nrow(raw_data[sub,]))
}
raw_data[which(raw_data$block==2),]$aStim = raw_data[which(raw_data$block==2),]$aStim + 8
raw_data[which(raw_data$block==2),]$vStim1 = raw_data[which(raw_data$block==2),]$vStim1 + 8
typeof(raw_data$aStim)
typeof(raw_data$vStim1)
typeof(raw_data$vStim2)
t
raw_data$aStim <- as.integer(raw_data$aStim)
# split vstim columns
raw_data <- raw_data %>% separate(vStims, c("vStim1", "vStim2"),sep="\\_")
raw_data$vStim1 <- as.integer(raw_data$vStim1)
raw_data$vStim2 <- as.integer(raw_data$vStim2)
# get new column with non-associated stimulus
raw_data$vStimNassoc <- ifelse(raw_data$aStim==raw_data$vStim1,raw_data$vStim2,raw_data$vStim1)
## prepare data for jags
#raw_data$row <- seq.int(nrow(raw_data))
DT_trials <- raw_data[, .N, by = list(subjID,block)]
subjs     <- DT_trials$subjID
n_subj    <- length(subjs)
# get minRT
minRT <- with(raw_data, aggregate(RT, by = list(y = subjID), FUN = min)[["x"]])
ifelse(is.null(dim(minRT)),minRT<-as.array(minRT))
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$block <- as.factor(raw_data[sub,]$block)
levels(raw_data[sub,]$block) <- c("1","2","3")
raw_data[sub,]$block <- as.integer(raw_data[sub,]$block)
}
#raw_data$trial_subj <- rep("NA",nrow(raw_data))
# since we discarded some observations, we have to assign new trial numbers
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$trial <- seq.int(nrow(raw_data[sub,]))
}
raw_data[which(raw_data$block==2),]$aStim = raw_data[which(raw_data$block==2),]$aStim + 8
raw_data[which(raw_data$block==2),]$vStim1 = raw_data[which(raw_data$block==2),]$vStim1 + 8
raw_data[which(raw_data$block==2),]$vStim2 = raw_data[which(raw_data$block==2),]$vStim2 + 8
raw_data[which(raw_data$block==3),]$aStim = raw_data[which(raw_data$block==2),]$aStim + 16
raw_data[which(raw_data$block==3),]$vStim1 = raw_data[which(raw_data$block==2),]$vStim1 + 16
raw_data[which(raw_data$block==3),]$vStim2 = raw_data[which(raw_data$block==2),]$vStim2 + 16
View(raw_data)
###
gather_data <- function(files){
# summarize all data in 1 data frame
datalist <- list()
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
D <- cbind(rep(substr(files[i],1,12),dim(D)[1]),D)
datalist[[i]] <- D
}
transformed <- data.table::rbindlist(datalist) # combine all data frames in on
return(transformed)
}
path <- "N:/Users/phaller/mri_task_analysis"
model_path <- paste0(path,"/model/rlddm_stan/rlddm_per_stimulus_v2.stan")
#data_path <- paste0(path,"/test_input.txt")
data_path <- paste0(path,"/data/piloting/pilots_biokurs")
### load data
setwd(data_path)
files <- dir(pattern=".txt", recursive=TRUE)
raw_data <- gather_data(files)
colnames(raw_data)[1] <- "subjID"
raw_data$rt <- raw_data$rt/1000
names(raw_data)[names(raw_data)=="rt"] <- "RT"
# automatically filter missed responses (since RT = 0)
raw_data <- raw_data[which(raw_data$RT > 0.15),]
#raw_data$subjID = rep('01',nrow(raw_data))
# raw data: fb = 0 incorrect, fb = 1 correct, (fb = 2 missed)
# encoding for simulation: lower (incorrect) response=1, upper (correct) response =2
raw_data$response = raw_data$fb+1
# raw_data$nonresponse = abs(raw_data$fb-2) # not used atm
raw_data$aStim <- as.integer(raw_data$aStim)
# split vstim columns
raw_data <- raw_data %>% separate(vStims, c("vStim1", "vStim2"),sep="\\_")
raw_data$vStim1 <- as.integer(raw_data$vStim1)
raw_data$vStim2 <- as.integer(raw_data$vStim2)
# get new column with non-associated stimulus
raw_data$vStimNassoc <- ifelse(raw_data$aStim==raw_data$vStim1,raw_data$vStim2,raw_data$vStim1)
#raw_data <- get_astim_trials(raw_data)
## prepare data for jags
#raw_data$row <- seq.int(nrow(raw_data))
DT_trials <- raw_data[, .N, by = list(subjID,block)]
subjs     <- DT_trials$subjID
n_subj    <- length(subjs)
# get minRT
minRT <- with(raw_data, aggregate(RT, by = list(y = subjID), FUN = min)[["x"]])
ifelse(is.null(dim(minRT)),minRT<-as.array(minRT))
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$block <- as.factor(raw_data[sub,]$block)
levels(raw_data[sub,]$block) <- c("1","2","3")
raw_data[sub,]$block <- as.integer(raw_data[sub,]$block)
}
#raw_data$trial_subj <- rep("NA",nrow(raw_data))
# since we discarded some observations, we have to assign new trial numbers
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$trial <- seq.int(nrow(raw_data[sub,]))
}
raw_data[which(raw_data$block==2),]$aStim = raw_data[which(raw_data$block==2),]$aStim + 8
raw_data[which(raw_data$block==2),]$vStim1 = raw_data[which(raw_data$block==2),]$vStim1 + 8
raw_data[which(raw_data$block==2),]$vStim2 = raw_data[which(raw_data$block==2),]$vStim2 + 8
raw_data[which(raw_data$block==3),]$aStim = raw_data[which(raw_data$block==2),]$aStim + 16
raw_data[which(raw_data$block==3),]$vStim1 = raw_data[which(raw_data$block==2),]$vStim1 + 16
raw_data[which(raw_data$block==3),]$vStim2 = raw_data[which(raw_data$block==2),]$vStim2 + 16
View(raw_data)
gather_data <- function(files){
# summarize all data in 1 data frame
datalist <- list()
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
D <- cbind(rep(substr(files[i],1,12),dim(D)[1]),D)
datalist[[i]] <- D
}
transformed <- data.table::rbindlist(datalist) # combine all data frames in on
return(transformed)
}
#get_astim_trials <- function(data){
df_subj <- list()
#data<-data[data$choice!=0,] # remove 'too slow ' responses
new_data <- data[FALSE,]
new_col_trial <- data.frame(trial_astim = integer(0))
new_data <- cbind(new_data,new_col_trial)
for(i in unique(data$subjID)){
df_subj[[i]] <- subset(data, subjID == i)
for(j in unique(df_subj[[i]]$block)){
df_subj_block <- subset(df_subj[[i]],block==j)
# compute cumulative sum for each auditory stimulus in a given block of a subject
for(k in unique(df_subj_block$aStim)){
df_subj_block_astim <- list()
df_subj_block_astim[[k]] <- subset(df_subj_block, aStim==k )
new_col_trial <- 1:nrow(df_subj_block_astim[[k]])
df_subj_block_astim[[k]]<- cbind(df_subj_block_astim[[k]],new_col_trial)
colnames(df_subj_block_astim[[k]])[ncol(df_subj_block_astim[[k]])] <- "trial_astim"
new_data <- rbind(new_data,df_subj_block_astim[[k]])
# reorder data
new_data <- new_data[
with(new_data, order(subjID, block,trial)),
]
}
}
}
return(new_data)
}
## define paths
path <- "N:/Users/phaller/mri_task_analysis"
model_path <- paste0(path,"/model/rlddm_stan/rlddm_per_stimulus_v2.stan")
#data_path <- paste0(path,"/test_input.txt")
data_path <- paste0(path,"/data/piloting/pilots_biokurs")
### load data
setwd(data_path)
files <- dir(pattern=".txt", recursive=TRUE)
raw_data <- gather_data(files)
###################### for test file
setwd(path)
colnames(raw_data)
raw_data <- data.table::fread(file = data_path, header = TRUE, sep = "\t", data.table = TRUE,
fill = TRUE, stringsAsFactors = TRUE, logical01 = FALSE)
raw_data <- cbind(rep(substr(data_path,1,12),dim(raw_data)[1]),raw_data)
#D<-D[D$resp!=0,] # remove 'too slow ' responses
### Rename and transform some columns
#######################
colnames(raw_data)[1] <- "subjID"
raw_data$rt <- raw_data$rt/1000
names(raw_data)[names(raw_data)=="rt"] <- "RT"
# automatically filter missed responses (since RT = 0)
raw_data <- raw_data[which(raw_data$RT > 0.15),]
#raw_data$subjID = rep('01',nrow(raw_data))
# raw data: fb = 0 incorrect, fb = 1 correct, (fb = 2 missed)
# encoding for simulation: lower (incorrect) response=1, upper (correct) response =2
raw_data$response = raw_data$fb+1
# raw_data$nonresponse = abs(raw_data$fb-2) # not used atm
raw_data$aStim <- as.integer(raw_data$aStim)
# split vstim columns
raw_data <- raw_data %>% separate(vStims, c("vStim1", "vStim2"),sep="\\_")
raw_data$vStim1 <- as.integer(raw_data$vStim1)
raw_data$vStim2 <- as.integer(raw_data$vStim2)
# get new column with non-associated stimulus
raw_data$vStimNassoc <- ifelse(raw_data$aStim==raw_data$vStim1,raw_data$vStim2,raw_data$vStim1)
#raw_data <- get_astim_trials(raw_data)
## prepare data for jags
#raw_data$row <- seq.int(nrow(raw_data))
DT_trials <- raw_data[, .N, by = list(subjID,block)]
subjs     <- DT_trials$subjID
n_subj    <- length(subjs)
# get minRT
minRT <- with(raw_data, aggregate(RT, by = list(y = subjID), FUN = min)[["x"]])
ifelse(is.null(dim(minRT)),minRT<-as.array(minRT))
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$block <- as.factor(raw_data[sub,]$block)
levels(raw_data[sub,]$block) <- c("1","2","3")
raw_data[sub,]$block <- as.integer(raw_data[sub,]$block)
}
#raw_data$trial_subj <- rep("NA",nrow(raw_data))
# since we discarded some observations, we have to assign new trial numbers
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$trial <- seq.int(nrow(raw_data[sub,]))
}
typeof(raw_data$trial)
gather_data <- function(files){
# summarize all data in 1 data frame
datalist <- list()
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
D <- cbind(rep(substr(files[i],1,12),dim(D)[1]),D)
datalist[[i]] <- D
}
transformed <- data.table::rbindlist(datalist) # combine all data frames in on
return(transformed)
}
#get_astim_trials <- function(data){
df_subj <- list()
#data<-data[data$choice!=0,] # remove 'too slow ' responses
new_data <- data[FALSE,]
new_col_trial <- data.frame(trial_astim = integer(0))
new_data <- cbind(new_data,new_col_trial)
for(i in unique(data$subjID)){
df_subj[[i]] <- subset(data, subjID == i)
for(j in unique(df_subj[[i]]$block)){
df_subj_block <- subset(df_subj[[i]],block==j)
# compute cumulative sum for each auditory stimulus in a given block of a subject
for(k in unique(df_subj_block$aStim)){
df_subj_block_astim <- list()
df_subj_block_astim[[k]] <- subset(df_subj_block, aStim==k )
new_col_trial <- 1:nrow(df_subj_block_astim[[k]])
df_subj_block_astim[[k]]<- cbind(df_subj_block_astim[[k]],new_col_trial)
colnames(df_subj_block_astim[[k]])[ncol(df_subj_block_astim[[k]])] <- "trial_astim"
new_data <- rbind(new_data,df_subj_block_astim[[k]])
# reorder data
new_data <- new_data[
with(new_data, order(subjID, block,trial)),
]
}
}
}
return(new_data)
}
## define paths
path <- "N:/Users/phaller/mri_task_analysis"
model_path <- paste0(path,"/model/rlddm_stan/rlddm_per_stimulus_v2.stan")
#data_path <- paste0(path,"/test_input.txt")
data_path <- paste0(path,"/data/piloting/pilots_biokurs")
### load data
setwd(data_path)
files <- dir(pattern=".txt", recursive=TRUE)
raw_data <- gather_data(files)
colnames(raw_data)[1] <- "subjID"
raw_data$rt <- raw_data$rt/1000
names(raw_data)[names(raw_data)=="rt"] <- "RT"
# automatically filter missed responses (since RT = 0)
raw_data <- raw_data[which(raw_data$RT > 0.15),]
#raw_data$subjID = rep('01',nrow(raw_data))
# raw data: fb = 0 incorrect, fb = 1 correct, (fb = 2 missed)
# encoding for simulation: lower (incorrect) response=1, upper (correct) response =2
raw_data$response = raw_data$fb+1
# raw_data$nonresponse = abs(raw_data$fb-2) # not used atm
raw_data$aStim <- as.double(raw_data$aStim)
# split vstim columns
raw_data <- raw_data %>% separate(vStims, c("vStim1", "vStim2"),sep="\\_")
raw_data$vStim1 <- as.double(raw_data$vStim1)
raw_data$vStim2 <- as.double(raw_data$vStim2)
# get new column with non-associated stimulus
raw_data$vStimNassoc <- ifelse(raw_data$aStim==raw_data$vStim1,raw_data$vStim2,raw_data$vStim1)
#raw_data <- get_astim_trials(raw_data)
## prepare data for jags
#raw_data$row <- seq.int(nrow(raw_data))
DT_trials <- raw_data[, .N, by = list(subjID,block)]
subjs     <- DT_trials$subjID
n_subj    <- length(subjs)
# get minRT
minRT <- with(raw_data, aggregate(RT, by = list(y = subjID), FUN = min)[["x"]])
ifelse(is.null(dim(minRT)),minRT<-as.array(minRT))
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$block <- as.factor(raw_data[sub,]$block)
levels(raw_data[sub,]$block) <- c("1","2","3")
raw_data[sub,]$block <- as.integer(raw_data[sub,]$block)
}
raw_data$trial <- as.integer(raw_data$trial)
#raw_data$trial_subj <- rep("NA",nrow(raw_data))
# since we discarded some observations, we have to assign new trial numbers
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$trial <- seq.int(nrow(raw_data[sub,]))
}
raw_data[which(raw_data$block==2),]$aStim
raw_data[which(raw_data$block==2),]$aStim = raw_data[which(raw_data$block==2),]$aStim + 8
raw_data[which(raw_data$block==2),]$aStim
raw_data[which(raw_data$block==2),]$vStim1
raw_data[which(raw_data$block==2),]$vStim1 = raw_data[which(raw_data$block==2),]$vStim1 + 8
raw_data[which(raw_data$block==2),]$vStim1
raw_data[which(raw_data$block==2),]$vStim2
raw_data[which(raw_data$block==2),]$vStim2 = raw_data[which(raw_data$block==2),]$vStim2 + 8
raw_data[which(raw_data$block==2),]$vStim2
raw_data[which(raw_data$block==3),]$aStim
raw_data[which(raw_data$block==3),]$aStim = raw_data[which(raw_data$block==2),]$aStim + 16
raw_data[which(raw_data$block==3),]$aStim
gather_data <- function(files){
# summarize all data in 1 data frame
datalist <- list()
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
D <- cbind(rep(substr(files[i],1,12),dim(D)[1]),D)
datalist[[i]] <- D
}
transformed <- data.table::rbindlist(datalist) # combine all data frames in on
return(transformed)
}
#get_astim_trials <- function(data){
df_subj <- list()
#data<-data[data$choice!=0,] # remove 'too slow ' responses
new_data <- data[FALSE,]
new_col_trial <- data.frame(trial_astim = integer(0))
new_data <- cbind(new_data,new_col_trial)
for(i in unique(data$subjID)){
df_subj[[i]] <- subset(data, subjID == i)
for(j in unique(df_subj[[i]]$block)){
df_subj_block <- subset(df_subj[[i]],block==j)
# compute cumulative sum for each auditory stimulus in a given block of a subject
for(k in unique(df_subj_block$aStim)){
df_subj_block_astim <- list()
df_subj_block_astim[[k]] <- subset(df_subj_block, aStim==k )
new_col_trial <- 1:nrow(df_subj_block_astim[[k]])
df_subj_block_astim[[k]]<- cbind(df_subj_block_astim[[k]],new_col_trial)
colnames(df_subj_block_astim[[k]])[ncol(df_subj_block_astim[[k]])] <- "trial_astim"
new_data <- rbind(new_data,df_subj_block_astim[[k]])
# reorder data
new_data <- new_data[
with(new_data, order(subjID, block,trial)),
]
}
}
}
return(new_data)
}
## define paths
path <- "N:/Users/phaller/mri_task_analysis"
model_path <- paste0(path,"/model/rlddm_stan/rlddm_per_stimulus_v2.stan")
#data_path <- paste0(path,"/test_input.txt")
data_path <- paste0(path,"/data/piloting/pilots_biokurs")
### load data
setwd(data_path)
files <- dir(pattern=".txt", recursive=TRUE)
raw_data <- gather_data(files)
colnames(raw_data)[1] <- "subjID"
raw_data$rt <- raw_data$rt/1000
names(raw_data)[names(raw_data)=="rt"] <- "RT"
# automatically filter missed responses (since RT = 0)
raw_data <- raw_data[which(raw_data$RT > 0.15),]
#raw_data$subjID = rep('01',nrow(raw_data))
# raw data: fb = 0 incorrect, fb = 1 correct, (fb = 2 missed)
# encoding for simulation: lower (incorrect) response=1, upper (correct) response =2
raw_data$response = raw_data$fb+1
# raw_data$nonresponse = abs(raw_data$fb-2) # not used atm
raw_data$aStim <- as.double(raw_data$aStim)
# split vstim columns
raw_data <- raw_data %>% separate(vStims, c("vStim1", "vStim2"),sep="\\_")
raw_data$vStim1 <- as.double(raw_data$vStim1)
raw_data$vStim2 <- as.double(raw_data$vStim2)
# get new column with non-associated stimulus
raw_data$vStimNassoc <- ifelse(raw_data$aStim==raw_data$vStim1,raw_data$vStim2,raw_data$vStim1)
#raw_data <- get_astim_trials(raw_data)
## prepare data for jags
#raw_data$row <- seq.int(nrow(raw_data))
DT_trials <- raw_data[, .N, by = list(subjID,block)]
subjs     <- DT_trials$subjID
n_subj    <- length(subjs)
# get minRT
minRT <- with(raw_data, aggregate(RT, by = list(y = subjID), FUN = min)[["x"]])
ifelse(is.null(dim(minRT)),minRT<-as.array(minRT))
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$block <- as.factor(raw_data[sub,]$block)
levels(raw_data[sub,]$block) <- c("1","2","3")
raw_data[sub,]$block <- as.integer(raw_data[sub,]$block)
}
raw_data$trial <- as.integer(raw_data$trial)
#raw_data$trial_subj <- rep("NA",nrow(raw_data))
# since we discarded some observations, we have to assign new trial numbers
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$trial <- seq.int(nrow(raw_data[sub,]))
}
raw_data[which(raw_data$block==2),]$aStim = raw_data[which(raw_data$block==2),]$aStim + 8
raw_data[which(raw_data$block==2),]$vStim1 = raw_data[which(raw_data$block==2),]$vStim1 + 8
raw_data[which(raw_data$block==2),]$vStim2 = raw_data[which(raw_data$block==2),]$vStim2 + 8
raw_data[which(raw_data$block==3),]$aStim = raw_data[which(raw_data$block==3),]$aStim + 16
raw_data[which(raw_data$block==3),]$vStim1 = raw_data[which(raw_data$block==3),]$vStim1 + 16
raw_data[which(raw_data$block==3),]$vStim2 = raw_data[which(raw_data$block==3),]$vStim2 + 16
first <- which(raw_data$trial==1)
# if N=1 transform int to 1-d array
ifelse(is.null(dim(first)),first<-as.array(first))
# last is a Sx1 matrix identifying all last trials of a subject for each choice
last <- as.integer(first + DT_trials$N - 1)
last.warning
last
DT_trials$N
## prepare data for jags
#raw_data$row <- seq.int(nrow(raw_data))
DT_trials <- raw_data[, .N, by = subjID]
# last is a Sx1 matrix identifying all last trials of a subject for each choice
last <- as.integer(first + DT_trials$N - 1)
DT_trials
#last <- as.integer(first + DT_trials$N - 1)
ifelse(is.null(dim(last)),last<-as.array(last))
# incorrect is the inverse vector of choice and is needed to update the ev for the non-choices
raw_data$incorrect <- as.integer(ifelse(raw_data$correct==1, 0, 1))
# define the values for the rewards: if upper resp, value = 1
value <- ifelse(raw_data$response==2, 1, 0)
## all RT with negative choices -> -1
#new_RT <- ifelse(raw_data$correct==1, raw_data$RT*-1, raw_data$RT)
## # obs
n_trials <- nrow(raw_data)
##
aggregate(raw_data, by=list(raw_data$subjID,raw_data$block),FUN= function(x) max(raw_data$block))
##
aggregate(raw_data$subjID, by=list(raw_data$subjID,FUN= function(x) max(raw_data$block))
##
aggregate(raw_data$subjID, by=raw_data$subjID,FUN= function(x) max(raw_data$block)
##
aggregate(raw_data$subjID, by=raw_data$subjID,FUN= function(x) max(raw_data$block))
##
aggregate(raw_data$subjID, by=list(raw_data$subjID),FUN= function(x) max(raw_data$block))
##
tapply(raw_data$subjID, raw_data$block, max)
##
tapply(raw_data$block,raw_data$subjID, max)
##
lapply(raw_data$block,raw_data$subjID, max)
##
tapply(raw_data$block,raw_data$subjID, max)
##
sapply(raw_data$block,raw_data$subjID, max)
##
tapply(raw_data$block,raw_data$subjID, max)
##
blocks <- tapply(raw_data$block,raw_data$subjID, max)
blocks
blocks[1,]
blocks[,1]
blocks[1]
##
blocks <- tapply(raw_data$block,raw_data$subjID, max,simplify = TRUE)
blocks
##
blocks <- tapply(raw_data$block,raw_data$subjID, max,simplify = FALSE)
b,lc
blocks
aggregate( raw_data$block ~ raw_data$subjID, FUN = max )
##
#blocks <- tapply(raw_data$block,raw_data$subjID, max,simplify = TRUE)
blocks <- aggregate( raw_data$block ~ raw_data$subjID, FUN = max )
blocks <- blocks$`raw_data$block`
blocks
model_path <- paste0(path,"/model/rlddm_stan/rlddm_blocks.stan")
stanmodel <- rstan::stan_model(model_path)
stanmodel <- rstan::stan_model(model_path)
stanmodel_per_stimulus <- rstan::stan_model(model_path)
