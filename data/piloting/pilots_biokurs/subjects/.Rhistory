sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- list(a1,a2,a3,a4)
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- list(a1,a2,a3,a4)
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- list(a1,a2,a3,a4)
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
all <- sample(all,4)
a1 <- c(112,113,114,121,131,141)
a2 <- c(221,223,224,212,232,242)
a3 <- c(331,332,334,313,323,343)
a4 <- c(441,442,443,414,424,434)
all <- list(a1,a2,a3,a4)
all <- sample(all)
all
all <- sample(all)
triples <- list(a1,a2,a3,a4)
all <- sample(triples)
all <- sample(triples,4)
a1 <- c(112,113,114,121,131,141)
a2 <- c(221,223,224,212,232,242)
a3 <- c(331,332,334,313,323,343)
a4 <- c(441,442,443,414,424,434)
triples <- list(a1,a2,a3,a4)
all <- sample(triples,4)
all <- sample(triples)
triples <- list(a1,a2,a3,a4)
triples
sample(triples)
binomal(8,5)
binomial(8,5)
choose(8,5)
choose(5,3)
1^0
0^0
install.packages("rstanarm", lib="C:/Program Files/R/R-3.5.2/library")
.libPaths()
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
# after successful installation, load required packages
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("boot")
library("readr")
library("tidyr")
library("dplyr")
library("bayesplot")
library("rstanarm")
install.packages("shinystan", lib="C:/Program Files/R/R-3.5.2/library")
.libPaths()
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
# after successful installation, load required packages
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("boot")
library("readr")
library("tidyr")
library("dplyr")
library("bayesplot")
library("rstanarm")
########################
.libPaths()
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
install.packages("dygraphs")
# after successful installation, load required packages
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("boot")
library("readr")
library("tidyr")
library("dplyr")
library("bayesplot")
library("rstanarm")
.libPaths()
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
install.packages("shiny")
# after successful installation, load required packages
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("boot")
library("readr")
library("tidyr")
library("dplyr")
library("bayesplot")
library("rstanarm")
.libPaths()
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
install.packages("threejs")
# after successful installation, load required packages
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("boot")
library("readr")
library("tidyr")
library("dplyr")
library("bayesplot")
library("rstanarm")
.libPaths()
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
# after successful installation, load required packages
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("boot")
library("readr")
library("tidyr")
library("dplyr")
install.packages("installr")
library(installr)
updateR()
updateR()
.libPaths()
.libPaths()
assign(".lib.loc", "C:/Program Files/R/R-3.5.3/library", envir = environment(.libPaths))
# after successful installation, load required packages
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.3/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.3/library")
#Sys.setenv(LOCAL_CPPFLAGS = '-march=native')
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.3/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.3/library")
.libPaths()
assign(".lib.loc", "C:/Program Files/R/R-3.5.3/library", envir = environment(.libPaths))
# after successful installation, load required packages
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.3/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.3/library")
library(readr)
library(readr)
library(rstudioapi)
library(readr)
library(data.table)
library(plyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(tidyr)
library(wesanderson)
library(viridis)
task <- "biokurs"
#set inputs
dirinput <- "N:/Users/phaller/mri_task_analysis/data/piloting/pilots_biokurs/subjects"
# make sure output directory exists already
diroutput <- "N:/Users/phaller/mri_task_analysis/data/piloting/pilots_biokurs/"
setwd(dirinput)
files <- dir(pattern=".txt", recursive=TRUE)
gather_data <- function(files){
# summarize all data in 1 data frame
datalist <- list()
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
D <- cbind(rep(substr(files[i],11,12),dim(D)[1]),D)
#D<-D[D$resp!=0,] # remove 'too slow ' responses
### Rename and transform some columns
colnames(D)[1] <- "subj_idx"
#D[,1] <- strtoi(D[,1])
D$trial = as.integer(D$trial)
D$aStim = as.integer(D$aStim)
#colnames(D)[grep("rt",colnames(D))] <- "RT"
D[grep("rt",colnames(D))] <- D[grep("rt",colnames(D))]/1000 # RTs in seconds
# don't use grep here, because it will find all instances of 'resp' (even colnames with name respOnset)
#names(D)[names(D) == "fb"] <- "response"
#D <- as_tibble(cbind(D,paste(D$vFile,D$aFile)))
#colnames(D)[ncol(D)] <- "pair"
datalist[[i]] <- D
}
transformed <- data.table::rbindlist(datalist) # combine all data frames in on
return(transformed)
}
wes_cols= wes_palette("GrandBudapest1", n = 2)
## load data
data <- gather_data(files)
View(data)
rm(data)
files <- dir(pattern=".txt", recursive=TRUE)
## load data
data <- gather_data(files)
# count number of trials for each subject
DT_trials <- data[, .N, by = subj_idx]
subjs <- DT_trials$subj_idx
# rename blocks for each subject to 1st, 2nd and 3rd block
data$block_abs = as.factor(data$block)
for (subj in subjs){
sub <- which(data$subj_idx==subj)
data[sub,]$block <- as.factor(data[sub,]$block)
levels(data[sub,]$block) <- c("1","2","3")
data[sub,]$block <- as.integer(data[sub,]$block)
}
data$aStim = as.factor(data$aStim)
data$resp = as.factor(data$resp)
data$fb = as.factor(data$fb)
data_nomiss <- data[which(data$resp!=0),]
mu <- ddply(data_nomiss, .(fb,subj_idx), summarise, grp.mean=mean(rt))
p <- ggplot(data_nomiss) + geom_density(alpha=0.3,adjust=3/4) + aes(x=rt, fill=fb,y=..scaled..) +
scale_fill_discrete(name = "Response", labels = c("Incorrect", "Correct")) +
geom_vline(data=mu, aes(xintercept=grp.mean, color=fb), linetype="dashed")  +
scale_color_discrete(name = "Response", labels = c("Incorrect", "Correct")) +
labs(title="Reaction time distributions",x="Reaction time[ms]", y = "Density") +
facet_wrap(~subj_idx) +
theme(text = element_text(size=9),
axis.text.x = element_text(angle=45, hjust=1))
p
mean_rts = aggregate(data_nomiss$rt,
by = list(subj_idx = data_nomiss$subj_idx),
FUN = mean)
mean_rts$x <- mean_rts$x - mean(mean_rts$x)
mean_rts_split = aggregate(data_nomiss$rt,
by = list(subj_idx = data_nomiss$subj_idx, fb= data_nomiss$fb),
FUN = mean)
View(mean_rts_split)
View(data_nomiss)
n_subj    <- length(subjs)
for(i in 1:n_subj){
subj = as.character(subjs[i])
write.table(tbtregs[which(tbtregs$subjID==subj),], paste0(subj,"_raw_pars",".csv"),
quote=FALSE, sep=",", row.names=FALSE, col.names=TRUE)
}
for(i in 1:n_subj){
subj = as.character(subjs[i])
write.table(data_nomiss[which(data_nomiss$subjID==subj),], paste0(subj,"_raw_pars",".csv"),
quote=FALSE, sep=",", row.names=FALSE, col.names=TRUE)
}
View(data_nomiss)
for(i in 1:n_subj){
subj = as.character(subjs[i])
write.table(data_nomiss[which(data_nomiss$subj_idx==subj),], paste0(subj,"_raw_pars",".csv"),
quote=FALSE, sep=",", row.names=FALSE, col.names=TRUE)
}
