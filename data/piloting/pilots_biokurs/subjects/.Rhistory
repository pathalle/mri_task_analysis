# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- list(a1,a2,a3,a4)
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- list(a1,a2,a3,a4)
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- list(a1,a2,a3,a4)
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
df <- data.frame(trial=seq.int(1,40),triple=as.character(seq), astim=factor(substr(as.character(seq),1,1)),dummy_y=1)
# check if each stimulus is presented the same amount of times
table(df$astim)
identical_seq <- rle(as.character(df$astim))
4 %in% identical_seq$lengths
all <- sample(all,4)
seq <- c()
seq <- c(
# miniblock 1: 3xa1, 2xa2, 2xa3,3xa4
# RESTRICTION: miniblocks begin with sequence of 3x the same stimulus
c(sample(all[[1]],3),
sample(c(sample(all[[2]],2),sample(all[[3]],2),sample(all[[4]],3)))),
# miniblock 2: 2xa1, 4xa2, 2xa3,2xa4
c(sample(all[[2]],3),
sample(c(sample(all[[2]],1),sample(all[[1]],2),sample(all[[3]],2),sample(all[[4]],2)))),
# miniblock 3: 3xa1, 2xa2, 3xa3,2xa4
c(sample(all[[3]],3),
sample(c(sample(all[[2]],2),sample(all[[1]],3),sample(all[[4]],2)))),
# miniblock 4: 2xa1, 2xa2, 3xa3,3xa4
# RESTRICTION: miniblock ends with sequence of 3x the same stimulus
c(sample(c(sample(all[[2]],2),sample(all[[1]],2),sample(all[[3]],3))),
sample(all[[4]],3))
)
all <- sample(all,4)
a1 <- c(112,113,114,121,131,141)
a2 <- c(221,223,224,212,232,242)
a3 <- c(331,332,334,313,323,343)
a4 <- c(441,442,443,414,424,434)
all <- list(a1,a2,a3,a4)
all <- sample(all)
all
all <- sample(all)
triples <- list(a1,a2,a3,a4)
all <- sample(triples)
all <- sample(triples,4)
a1 <- c(112,113,114,121,131,141)
a2 <- c(221,223,224,212,232,242)
a3 <- c(331,332,334,313,323,343)
a4 <- c(441,442,443,414,424,434)
triples <- list(a1,a2,a3,a4)
all <- sample(triples,4)
all <- sample(triples)
triples <- list(a1,a2,a3,a4)
triples
sample(triples)
binomal(8,5)
binomial(8,5)
choose(8,5)
choose(5,3)
1^0
0^0
install.packages("rstanarm", lib="C:/Program Files/R/R-3.5.2/library")
.libPaths()
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
# after successful installation, load required packages
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("boot")
library("readr")
library("tidyr")
library("dplyr")
library("bayesplot")
library("rstanarm")
install.packages("shinystan", lib="C:/Program Files/R/R-3.5.2/library")
.libPaths()
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
# after successful installation, load required packages
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("boot")
library("readr")
library("tidyr")
library("dplyr")
library("bayesplot")
library("rstanarm")
########################
.libPaths()
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
install.packages("dygraphs")
# after successful installation, load required packages
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("boot")
library("readr")
library("tidyr")
library("dplyr")
library("bayesplot")
library("rstanarm")
.libPaths()
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
install.packages("shiny")
# after successful installation, load required packages
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("boot")
library("readr")
library("tidyr")
library("dplyr")
library("bayesplot")
library("rstanarm")
.libPaths()
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
install.packages("threejs")
# after successful installation, load required packages
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("boot")
library("readr")
library("tidyr")
library("dplyr")
library("bayesplot")
library("rstanarm")
.libPaths()
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
# after successful installation, load required packages
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("boot")
library("readr")
library("tidyr")
library("dplyr")
install.packages("installr")
library(installr)
updateR()
updateR()
.libPaths()
.libPaths()
assign(".lib.loc", "C:/Program Files/R/R-3.5.3/library", envir = environment(.libPaths))
# after successful installation, load required packages
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.3/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.3/library")
#Sys.setenv(LOCAL_CPPFLAGS = '-march=native')
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.3/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.3/library")
library("boot", lib.loc="C:/Program Files/R/R-3.5.3/library")
library("readr", lib.loc="C:/Program Files/R/R-3.5.3/library")
library("tidyr", lib.loc="C:/Program Files/R/R-3.5.3/library")
library("dplyr", lib.loc="C:/Program Files/R/R-3.5.3/library")
library("bayesplot", lib.loc="C:/Program Files/R/R-3.5.3/library")
library("rstanarm", lib.loc="C:/Program Files/R/R-3.5.3/library")
gather_data <- function(files){
# summarize all data in 1 data frame
datalist <- list()
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
# change 1,12 for kids data!
D <- cbind(rep(substr(files[i],1,12),dim(D)[1]),D)
datalist[[i]] <- D
}
transformed <- data.table::rbindlist(datalist) # combine all data frames in on
return(transformed)
}
## define paths
path <- "N:/Users/phaller/mri_task_analysis"
model_path <- paste0(path,"/model/rlddm_stan/rlddm_blocks.stan")
data_path <- paste0(path,"/data/piloting/pilots_biokurs/subjects")
### load data
setwd(data_path)
files <- dir(pattern=".txt", recursive=TRUE)
raw_data <- gather_data(files)
colnames(raw_data)[1] <- "subjID"
raw_data$rt <- raw_data$rt/1000
names(raw_data)[names(raw_data)=="rt"] <- "RT"
DT_trials <- raw_data[, .N, by = subjID]
subjs <- DT_trials$subjID
n_subj    <- length(subjs)
# automatically filter missed responses (since RT = 0)
raw_data <- raw_data[which(raw_data$RT > 0.15),]
raw_data$trial <- as.integer(raw_data$trial)
#raw_data$trial_subj <- rep("NA",nrow(raw_data))
# since we discarded some observations, we have to assign new trial numbers
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
raw_data[sub,]$trial <- seq.int(nrow(raw_data[sub,]))
}
DT_trials_per_block <- raw_data[, .N, by = list(subjID,block)]
raw_data$block <- as.factor(raw_data$block)
# rename blocks
for (subj in subjs){
sub <- which(raw_data$subjID==subj)
n1 <- DT_trials_per_block[which(DT_trials_per_block==subj),]$N[1]
b1 <-rep("1",n1)
n2 <- DT_trials_per_block[which(DT_trials_per_block==subj),]$N[2]
b2 <- rep("2",n2)
n3 <- DT_trials_per_block[which(DT_trials_per_block==subj),]$N[3]
b3 <-rep("3",n3)
raw_data[sub]$block <- c(b1,b2,b3)
}
raw_data$block <- as.integer(raw_data$block)
# raw data: fb = 0 incorrect, fb = 1 correct, (fb = 2 missed)
# encoding for simulation: lower (incorrect) response=1, upper (correct) response =2
raw_data$response = raw_data$fb+1
raw_data$aStim <- as.double(raw_data$aStim)
# split vstim columns
raw_data <- raw_data %>% separate(vStims, c("vStim1", "vStim2"),sep="\\_")
raw_data$vStim1 <- as.double(raw_data$vStim1)
raw_data$vStim2 <- as.double(raw_data$vStim2)
# assign every stimulus pair for each block a unique number
raw_data[which(raw_data$block==2),]$aStim = raw_data[which(raw_data$block==2),]$aStim + 8
raw_data[which(raw_data$block==2),]$vStim1 = raw_data[which(raw_data$block==2),]$vStim1 + 8
raw_data[which(raw_data$block==2),]$vStim2 = raw_data[which(raw_data$block==2),]$vStim2 + 8
raw_data[which(raw_data$block==3),]$aStim = raw_data[which(raw_data$block==3),]$aStim + 16
raw_data[which(raw_data$block==3),]$vStim1 = raw_data[which(raw_data$block==3),]$vStim1 + 16
raw_data[which(raw_data$block==3),]$vStim2 = raw_data[which(raw_data$block==3),]$vStim2 + 16
raw_data$vStimNassoc <- ifelse(raw_data$aStim==raw_data$vStim1,raw_data$vStim2,raw_data$vStim1)
DT_trials <- raw_data[, .N, by = subjID]
# get minRT
minRT <- with(raw_data, aggregate(RT, by = list(y = subjID), FUN = min)[["x"]])
ifelse(is.null(dim(minRT)),minRT<-as.array(minRT))
first <- which(raw_data$trial==1)
# if N=1 transform int to 1-d array
first<-as.array(first)
# last is a Sx1 matrix identifying all last trials of a subject for each choice
last <- (first + DT_trials$N - 1)
# if N=1 transform int to 1-d array
last<-as.array(last)
# define the values for the rewards: if upper resp, value = 1
value <- ifelse(raw_data$response==2, 1, 0)
n_trials <- nrow(raw_data)
#blocks <- tapply(raw_data$block,raw_data$subjID, max,simplify = TRUE)
blocks <- aggregate( raw_data$block ~ raw_data$subjID, FUN = max )
blocks <- blocks$`raw_data$block`
# if N=1 transform int to 1-d array
ifelse(is.null(dim(blocks)),blocks<-as.array(blocks))
stims_per_block <- 8
dat <- list("N" = n_subj, "T"=n_trials,"RTbound" = 0.15,"minRT" = minRT, "iter" = raw_data$trial, "response" = raw_data$response,
"stim_assoc" = raw_data$aStim, "stim_nassoc" = raw_data$vStimNassoc, "RT" = raw_data$RT, "first" = first, "last" = last, "value"=value, "n_stims"=stims_per_block*blocks)  # names list of numbers
options(mc.cores = 4)
stanmodel <- rstan::stan_model(model_path)
fit <- rstan::sampling(object  = stanmodel,
data    = dat,
init    = "random",
chains  = 4,
iter    = 2000,
warmup  = 1000,
thin    = 1,
control = list(adapt_delta   = 0.95,
stepsize      = 1,
max_treedepth = 10),
verbose =TRUE)
fit <- rstan::sampling(object  = stanmodel,
data    = dat,
init    = "random",
chains  = 4,
iter    = 2000,
warmup  = 1000,
thin    = 1,
control = list(adapt_delta   = 0.95,
stepsize      = 1,
max_treedepth = 10),
verbose =TRUE)
