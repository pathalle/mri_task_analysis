stat_summary(fun.y=median, geom="smooth", aes(group=0),lwd=1,col=wes_cols[2])+
geom_jitter(position = position_jitter(0.2)) +
facet_grid(.~block)
ggplot(correct_per_quartile, aes(quartile,n)) +
stat_boxplot(geom="errorbar", width=.5)+
geom_boxplot(fill=wes_cols[1])+
theme_bw()+
xlab = "Quartile" +
stat_summary(fun.y=median, geom="smooth", aes(group=0),lwd=1,col=wes_cols[2])+
geom_jitter(position = position_jitter(0.2)) +
facet_grid(.~block)
ggplot(correct_per_quartile, aes(quartile,n)) +
stat_boxplot(geom="errorbar", width=.5,xlab="Quartile")+
geom_boxplot(fill=wes_cols[1])+
theme_bw()+
stat_summary(fun.y=median, geom="smooth", aes(group=0),lwd=1,col=wes_cols[2])+
geom_jitter(position = position_jitter(0.2)) +
facet_grid(.~block)
ggplot(correct_per_quartile, aes(quartile,n)) +
stat_boxplot(geom="errorbar", width=.5)+
geom_boxplot(fill=wes_cols[1],xlab="Quartile")+
theme_bw()+
stat_summary(fun.y=median, geom="smooth", aes(group=0),lwd=1,col=wes_cols[2])+
geom_jitter(position = position_jitter(0.2)) +
facet_grid(.~block)
ggplot(correct_per_quartile, aes(quartile,n)) +
stat_boxplot(geom="errorbar", width=.5)+
geom_boxplot(fill=wes_cols[1])+
xlab("Dose (mg)") +
theme_bw()+
stat_summary(fun.y=median, geom="smooth", aes(group=0),lwd=1,col=wes_cols[2])+
geom_jitter(position = position_jitter(0.2)) +
facet_grid(.~block)
ggplot(correct_per_quartile, aes(quartile,n)) +
stat_boxplot(geom="errorbar", width=.5)+
geom_boxplot(fill=wes_cols[1])+
xlab("Quatile") +
ylab("Number of correct responses")
theme_bw()+
stat_summary(fun.y=median, geom="smooth", aes(group=0),lwd=1,col=wes_cols[2])+
geom_jitter(position = position_jitter(0.2)) +
facet_grid(.~block)
ggplot(correct_per_quartile, aes(quartile,n)) +
stat_boxplot(geom="errorbar", width=.5)+
geom_boxplot(fill=wes_cols[1])+
xlab("Quartile") +
ylab("Number of correct responses")
theme_bw()+
stat_summary(fun.y=median, geom="smooth", aes(group=0),lwd=1,col=wes_cols[2])+
geom_jitter(position = position_jitter(0.2)) +
facet_grid(.~block)
ggplot(correct_per_quartile, aes(quartile,n)) +
stat_boxplot(geom="errorbar", width=.5)+
geom_boxplot(fill=wes_cols[1])+
xlab("Quartile") +
ylab("Number of correct responses") +
theme_bw()+
stat_summary(fun.y=median, geom="smooth", aes(group=0),lwd=1,col=wes_cols[2])+
geom_jitter(position = position_jitter(0.2)) +
facet_grid(.~block)
?as.factor
labels(correct_per_quartile$block)
correct_per_quartile$block
correct_per_quartile$block = as.factor(correct_per_quartile$block, labels=c("Block 1", "Block 2"))
correct_per_quartile$quartile = as.factor(correct_per_quartile$quartile)
wes_cols= wes_palette("GrandBudapest1", n = 2)
ggplot(correct_per_quartile, aes(quartile,n)) +
stat_boxplot(geom="errorbar", width=.5)+
geom_boxplot(fill=wes_cols[1])+
xlab("Quartile") +
ylab("Number of correct responses") +
theme_bw()+
stat_summary(fun.y=median, geom="smooth", aes(group=0),lwd=1,col=wes_cols[2])+
geom_jitter(position = position_jitter(0.2)) +
facet_grid(.~block)
correct_per_quartile$block
correct_per_quartile$block = as.factor(correct_per_quartile$block, levels=c("Block 1", "Block 2"))
levels(correct_per_quartile$block)
correct_per_quartile$block = as.factor(correct_per_quartile$block)
levels(correct_per_quartile$block)
correct_per_quartile$block = as.factor(correct_per_quartile$block)
levels(correct_per_quartile$block) <- c("Block 1", "Block 2")
ggplot(correct_per_quartile, aes(quartile,n)) +
stat_boxplot(geom="errorbar", width=.5)+
geom_boxplot(fill=wes_cols[1])+
xlab("Quartile") +
ylab("Number of correct responses") +
theme_bw()+
stat_summary(fun.y=median, geom="smooth", aes(group=0),lwd=1,col=wes_cols[2])+
geom_jitter(position = position_jitter(0.2)) +
facet_grid(.~block)
ggplot(correct_per_quartile, aes(quartile,n)) +
stat_boxplot(geom="errorbar", width=.5)+
geom_boxplot(fill=wes_cols[1])+
xlab("Quartile") +
ylab("Number of correct responses") +
ggtitle("Correct responses per quartile for each block") +
theme_bw()+
stat_summary(fun.y=median, geom="smooth", aes(group=0),lwd=1,col=wes_cols[2])+
geom_jitter(position = position_jitter(0.2)) +
facet_grid(.~block)
ggplot(correct_per_quartile, aes(quartile,n)) +
stat_boxplot(geom="errorbar", width=.5)+
geom_boxplot(fill=wes_cols[1])+
xlab("Quartile") +
ylab("Number of correct responses") +
ggtitle("Correct responses per quartile for each block (2x4)") +
theme_bw()+
stat_summary(fun.y=median, geom="smooth", aes(group=0),lwd=1,col=wes_cols[2])+
geom_jitter(position = position_jitter(0.2)) +
facet_grid(.~block)
#set inputs
dirinput <- "N:/Users/phaller/mri_task_analysis/data/piloting/piloting_kloten/2x3"
files <- dir(pattern=".txt", recursive=TRUE)
gather_data <- function(files){
# summarize all data in 1 data frame
datalist <- list()
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
D <- cbind(rep(substr(files[i],17,22),dim(D)[1]),D)
#D<-D[D$resp!=0,] # remove 'too slow ' responses
### Rename and transform some columns
colnames(D)[1] <- "subj_idx"
#D[,1] <- strtoi(D[,1])
D$trial = as.integer(D$trial)
D$aStim = as.integer(D$aStim)
#colnames(D)[grep("rt",colnames(D))] <- "RT"
D[grep("rt",colnames(D))] <- D[grep("rt",colnames(D))]/1000 # RTs in seconds
# don't use grep here, because it will find all instances of 'resp' (even colnames with name respOnset)
#names(D)[names(D) == "fb"] <- "response"
#D <- as_tibble(cbind(D,paste(D$vFile,D$aFile)))
#colnames(D)[ncol(D)] <- "pair"
datalist[[i]] <- D
}
transformed <- data.table::rbindlist(datalist) # combine all data frames in on
return(transformed)
}
h
t
## prepare data
data <- gather_data(files)
data_with_cumulsum <- compute_cumulative_sums(data)
data_quartiles <- split_trials_2x3(data_with_cumulsum)
View(data_quartiles)
# for the visualization, for the subject who completed block 3, b3 will count as b2
data_quartiles[which(data_quartiles$block==3),]
which(data_quartiles$block==3)
View(data_quartiles)
# for the visualization, for the subject who completed block 3, b3 will count as b2
data_quartiles[which(data_quartiles$block=="3"),]
unique(data_quartiles$block)
#set inputs
dirinput <- "N:/Users/phaller/mri_task_analysis/data/piloting/piloting_kloten/2x3"
setwd(dirinput)
files <- dir(pattern=".txt", recursive=TRUE)
gather_data <- function(files){
# summarize all data in 1 data frame
datalist <- list()
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
D <- cbind(rep(substr(files[i],17,22),dim(D)[1]),D)
#D<-D[D$resp!=0,] # remove 'too slow ' responses
### Rename and transform some columns
colnames(D)[1] <- "subj_idx"
#D[,1] <- strtoi(D[,1])
D$trial = as.integer(D$trial)
D$aStim = as.integer(D$aStim)
#colnames(D)[grep("rt",colnames(D))] <- "RT"
D[grep("rt",colnames(D))] <- D[grep("rt",colnames(D))]/1000 # RTs in seconds
# don't use grep here, because it will find all instances of 'resp' (even colnames with name respOnset)
#names(D)[names(D) == "fb"] <- "response"
#D <- as_tibble(cbind(D,paste(D$vFile,D$aFile)))
#colnames(D)[ncol(D)] <- "pair"
datalist[[i]] <- D
}
transformed <- data.table::rbindlist(datalist) # combine all data frames in on
return(transformed)
}
compute_cumulative_sums <- function(data){
df_subj <- list()
#data<-data[data$choice!=0,] # remove 'too slow ' responses
new_data <- data[FALSE,]
new_cols <- data.frame(cumsum_fb = integer(0), trial_separate = integer(0))
new_data <- cbind(new_cols,new_data)
for(i in unique(data$subj_idx)){
df_subj[[i]] <- subset(data, subj_idx == i)
for(j in unique(df_subj[[i]]$block)){
df_subj_block <- subset(df_subj[[i]],block==j)
# compute cumulative sum for each auditory stimulus in a given block of a subject
for(k in unique(df_subj_block$aStim)){
df_subj_block_astim <- list()
df_subj_block_astim[[k]] <- subset(df_subj_block, aStim==k )
new_col <- cumsum(df_subj_block_astim[[k]]$fb)
new_col_trial <- 1:nrow(df_subj_block_astim[[k]])
new_cols <- cbind(new_col,new_col_trial)
df_subj_block_astim[[k]]<- as_tibble(cbind(new_cols,df_subj_block_astim[[k]]))
colnames(df_subj_block_astim[[k]])[c(1,2)] <- c("cumulsum_fb", "trial_separate")
new_data <- as_tibble(rbind(new_data,df_subj_block_astim[[k]]))
# reorder data
new_data <- new_data[
with(new_data, order(subj_idx, block,trial)),
]
}
}
}
return(as_tibble(new_data))
}
get_summary_stats <- function(data){
### #How many missing responses per block (fb == 2)
miss_per_block <- data %>%
select(subjID,RT, fb,block) %>%
filter(fb==2)  %>%
group_by(subjID,block) %>%
tally()
### #RTs per block
RT_per_block <- data %>%
select(subjID,RT, fb,block) %>%
filter(fb!=2)  %>%
group_by(subjID, fb,block) %>%
summarise(mean_rt = mean(RT))
### #RTs across blocks
RT_across_blocks <- data %>%
select(subjID,RT, fb) %>%
filter(fb!=2)  %>%
group_by(subjID, fb) %>%
summarise(mean_rt = mean(RT))
## hits per sextile
correct_per_quartile <- data %>%
select(subjID, fb,block, quartile) %>%
filter(fb==1) %>%
group_by(subjID,block,quartile) %>%
tally()
return(list(
"miss_per_block"=miss_per_block,"rt_per_block"=RT_per_block,"rt_across_blocks"=RT_across_blocks,"hits_per_sextile"=correct_per_sextile))
}
split_trials_2x3 <- function(data){
data$trial <- as.integer(data$trial)
data$quartile <- 0
data[which(data$trial <= 6),]$quartile = 1
data[which(data$trial > 6 & data$trial <= 12),]$quartile = 2
data[which(data$trial > 12 & data$trial <= 18),]$quartile = 3
data[which(data$trial > 18 & data$trial <= 24),]$quartile = 4
data <- data[
with(data, order(subj_idx, block,trial)),
]
return(data)
}
split_trials_2x4 <- function(data){
data$trial <- as.integer(data$trial)
data$quartile <- 0
data[which(data$trial <= 8),]$quartile = 1
data[which(data$trial > 8 & data$trial <= 16),]$quartile = 2
data[which(data$trial > 16 & data$trial <= 24),]$quartile = 3
data[which(data$trial > 24 & data$trial <= 32),]$quartile = 4
data <- data[
with(data, order(subj_idx, block,trial)),
]
return(data)
}
## prepare data
data <- gather_data(files)
data_with_cumulsum <- compute_cumulative_sums(data)
data_quartiles <- split_trials_2x3(data_with_cumulsum)
unique(data_quartiles$block)
which(data_quartiles$block=="3")
# for the visualization, for the subject who completed block 3, b3 will count as b2
data_quartiles[which(data_quartiles$block=="3"),]
# for the visualization, for the subject who completed block 3, b3 will count as b2
data_quartiles[which(data_quartiles$block=="3"),]$block
# for the visualization, for the subject who completed block 3, b3 will count as b2
data_quartiles[which(data_quartiles$block=="3"),]$block <- rep(2,nrow(data_quartiles[which(data_quartiles$block=="3"),]))
unique(data_quartiles$block)
correct_per_quartile$block = as.factor(correct_per_quartile$block)
levels(correct_per_quartile$block) <- c("Block 1", "Block 2")
correct_per_quartile$quartile = as.factor(correct_per_quartile$quartile)
wes_cols= wes_palette("GrandBudapest1", n = 2)
correct_per_quartile <-  data_quartiles %>%
select(subj_idx, fb,block,quartile) %>%
filter(fb==1) %>%
group_by(subj_idx,block,quartile) %>%
tally()
correct_per_quartile
correct_per_quartile$block = as.factor(correct_per_quartile$block)
levels(correct_per_quartile$block) <- c("Block 1", "Block 2")
correct_per_quartile$quartile = as.factor(correct_per_quartile$quartile)
wes_cols= wes_palette("GrandBudapest1", n = 2)
ggplot(correct_per_quartile, aes(quartile,n)) +
stat_boxplot(geom="errorbar", width=.5)+
geom_boxplot(fill=wes_cols[1])+
xlab("Quartile") +
ylab("Number of correct responses") +
ggtitle("Correct responses per quartile for each block (2x4)") +
theme_bw()+
stat_summary(fun.y=median, geom="smooth", aes(group=0),lwd=1,col=wes_cols[2])+
geom_jitter(position = position_jitter(0.2)) +
facet_grid(.~block)
ggplot(correct_per_quartile, aes(quartile,n)) +
stat_boxplot(geom="errorbar", width=.5)+
geom_boxplot(fill=wes_cols[1])+
xlab("Quartile") +
ylab("Number of correct responses") +
ggtitle("Correct responses per quartile for each block (2x3)") +
theme_bw()+
stat_summary(fun.y=median, geom="smooth", aes(group=0),lwd=1,col=wes_cols[2])+
geom_jitter(position = position_jitter(0.2)) +
facet_grid(.~block)
miss_per_block <- data %>%
select(subj_idx,RT, fb,block) %>%
filter(fb==2)  %>%
group_by(subj_idx,block) %>%
tally()
miss_per_block <- data %>%
select(subj_idx,rt, fb,block) %>%
filter(fb==2)  %>%
group_by(subj_idx,block) %>%
tally()
View(miss_per_block)
miss_per_block$n <- miss_per_block$n/24
sum(miss_per_block$n)/nrow(miss_per_block)
#set inputs
#dirinput <- "N:/Users/phaller/mri_task_analysis/data/piloting/piloting_kloten/2x3"
dirinput <- "N:/Users/phaller/mri_task_analysis/data/piloting/piloting_kloten/2x4"
task <- "fbl_kloten"
#set inputs
#dirinput <- "N:/Users/phaller/mri_task_analysis/data/piloting/piloting_kloten/2x3"
dirinput <- "N:/Users/phaller/mri_task_analysis/data/piloting/piloting_kloten/2x4"
# make sure output directory exists already
diroutput <- "N:/Users/phaller/mri_task_analysis/data/piloting/analysis/"
setwd(dirinput)
files <- dir(pattern=".txt", recursive=TRUE)
gather_data <- function(files){
# summarize all data in 1 data frame
datalist <- list()
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
D <- cbind(rep(substr(files[i],17,22),dim(D)[1]),D)
#D<-D[D$resp!=0,] # remove 'too slow ' responses
### Rename and transform some columns
colnames(D)[1] <- "subj_idx"
#D[,1] <- strtoi(D[,1])
D$trial = as.integer(D$trial)
D$aStim = as.integer(D$aStim)
#colnames(D)[grep("rt",colnames(D))] <- "RT"
D[grep("rt",colnames(D))] <- D[grep("rt",colnames(D))]/1000 # RTs in seconds
# don't use grep here, because it will find all instances of 'resp' (even colnames with name respOnset)
#names(D)[names(D) == "fb"] <- "response"
#D <- as_tibble(cbind(D,paste(D$vFile,D$aFile)))
#colnames(D)[ncol(D)] <- "pair"
datalist[[i]] <- D
}
transformed <- data.table::rbindlist(datalist) # combine all data frames in on
return(transformed)
}
compute_cumulative_sums <- function(data){
df_subj <- list()
#data<-data[data$choice!=0,] # remove 'too slow ' responses
new_data <- data[FALSE,]
new_cols <- data.frame(cumsum_fb = integer(0), trial_separate = integer(0))
new_data <- cbind(new_cols,new_data)
for(i in unique(data$subj_idx)){
df_subj[[i]] <- subset(data, subj_idx == i)
for(j in unique(df_subj[[i]]$block)){
df_subj_block <- subset(df_subj[[i]],block==j)
# compute cumulative sum for each auditory stimulus in a given block of a subject
for(k in unique(df_subj_block$aStim)){
df_subj_block_astim <- list()
df_subj_block_astim[[k]] <- subset(df_subj_block, aStim==k )
new_col <- cumsum(df_subj_block_astim[[k]]$fb)
new_col_trial <- 1:nrow(df_subj_block_astim[[k]])
new_cols <- cbind(new_col,new_col_trial)
df_subj_block_astim[[k]]<- as_tibble(cbind(new_cols,df_subj_block_astim[[k]]))
colnames(df_subj_block_astim[[k]])[c(1,2)] <- c("cumulsum_fb", "trial_separate")
new_data <- as_tibble(rbind(new_data,df_subj_block_astim[[k]]))
# reorder data
new_data <- new_data[
with(new_data, order(subj_idx, block,trial)),
]
}
}
}
return(as_tibble(new_data))
}
get_summary_stats <- function(data){
### #How many missing responses per block (fb == 2)
miss_per_block <- data %>%
select(subj_idx,RT, fb,block) %>%
filter(fb==2)  %>%
group_by(subjID,block) %>%
tally()
### #RTs per block
RT_per_block <- data %>%
select(subj_idx,RT, fb,block) %>%
filter(fb!=2)  %>%
group_by(subjID, fb,block) %>%
summarise(mean_rt = mean(RT))
### #RTs across blocks
RT_across_blocks <- data %>%
select(subjID,RT, fb) %>%
filter(fb!=2)  %>%
group_by(subjID, fb) %>%
summarise(mean_rt = mean(RT))
## hits per sextile
correct_per_quartile <- data %>%
select(subjID, fb,block, quartile) %>%
filter(fb==1) %>%
group_by(subjID,block,quartile) %>%
tally()
return(list(
"miss_per_block"=miss_per_block,"rt_per_block"=RT_per_block,"rt_across_blocks"=RT_across_blocks,"hits_per_sextile"=correct_per_sextile))
}
split_trials_2x3 <- function(data){
data$trial <- as.integer(data$trial)
data$quartile <- 0
data[which(data$trial <= 6),]$quartile = 1
data[which(data$trial > 6 & data$trial <= 12),]$quartile = 2
data[which(data$trial > 12 & data$trial <= 18),]$quartile = 3
data[which(data$trial > 18 & data$trial <= 24),]$quartile = 4
data <- data[
with(data, order(subj_idx, block,trial)),
]
return(data)
}
split_trials_2x4 <- function(data){
data$trial <- as.integer(data$trial)
data$quartile <- 0
data[which(data$trial <= 8),]$quartile = 1
data[which(data$trial > 8 & data$trial <= 16),]$quartile = 2
data[which(data$trial > 16 & data$trial <= 24),]$quartile = 3
data[which(data$trial > 24 & data$trial <= 32),]$quartile = 4
data <- data[
with(data, order(subj_idx, block,trial)),
]
return(data)
}
## prepare data
data <- gather_data(files)
# compute cumulative sums and quartiles
data_with_cumulsum <- compute_cumulative_sums(data)
data_quartiles <- split_trials_2x4(data_with_cumulsum)
miss_per_block <- data %>%
select(subj_idx,rt, fb,block) %>%
filter(fb==2)  %>%
group_by(subj_idx,block) %>%
tally()
miss_per_block$n <- miss_per_block$n/32
sum(miss_per_block$n)/nrow(miss_per_block)
attach(data_with_cumulsum)
for(i in unique(data_with_cumulsum$subjID)){
subset_all = subset(data_with_cumulsum, subjID==i & fb!=2)
subset_all$fb = factor(subset_all$fb, labels=c("Neg","Pos"))
p = ggplot(subset_all, aes(x=RT, fill=fb, color=fb)) +
geom_histogram(fill="white", alpha=0.5, position="dodge") +
geom_density(alpha=.2) +
facet_grid(rows = vars(block))
ggsave(p, file=paste("rt_distribution","_subj_",i,".png", sep=""),path= diroutput,width = 3, height = 6, scale=1)
}
attach(data_with_cumulsum)
for(i in unique(data_with_cumulsum$subjID)){
subset_all = subset(data_with_cumulsum, sub_idxD==i & fb!=2)
subset_all$fb = factor(subset_all$fb, labels=c("Neg","Pos"))
p = ggplot(subset_all, aes(x=rt, fill=fb, color=fb)) +
geom_histogram(fill="white", alpha=0.5, position="dodge") +
geom_density(alpha=.2) +
facet_grid(rows = vars(block))
ggsave(p, file=paste("rt_distribution","_subj_",i,".png", sep=""),path= diroutput,width = 3, height = 6, scale=1)
}
attach(data_with_cumulsum)
for(i in unique(data_with_cumulsum$subjID)){
subset_all = subset(data_with_cumulsum, sub_idx==i & fb!=2)
subset_all$fb = factor(subset_all$fb, labels=c("Neg","Pos"))
p = ggplot(subset_all, aes(x=rt, fill=fb, color=fb)) +
geom_histogram(fill="white", alpha=0.5, position="dodge") +
geom_density(alpha=.2) +
facet_grid(rows = vars(block))
ggsave(p, file=paste("rt_distribution","_subj_",i,".png", sep=""),path= diroutput,width = 3, height = 6, scale=1)
}
ggplot(correct_per_quartile, aes(quartile,n,group=subj_idx)) +
stat_boxplot(geom="errorbar", width=.5)+
geom_boxplot(fill=wes_cols[1])+
xlab("Quartile") +
ylab("Number of correct responses") +
ggtitle("Correct responses per quartile for each block (2x3)") +
theme_bw()+
stat_summary(fun.y=median, geom="smooth", aes(group=0),lwd=1,col=wes_cols[2])+
geom_jitter(position = position_jitter(0.2)) +
facet_grid(.~block)
correct_per_quartile <-  data_quartiles %>%
select(subj_idx, fb,block,quartile) %>%
filter(fb==1) %>%
group_by(subj_idx,block,quartile) %>%
tally()
correct_per_quartile
correct_per_quartile$block = as.factor(correct_per_quartile$block)
levels(correct_per_quartile$block) <- c("Block 1", "Block 2")
correct_per_quartile$quartile = as.factor(correct_per_quartile$quartile)
wes_cols= wes_palette("GrandBudapest1", n = 2)
ggplot(correct_per_quartile, aes(quartile,n,group=subj_idx)) +
stat_boxplot(geom="errorbar", width=.5)+
geom_boxplot(fill=wes_cols[1])+
xlab("Quartile") +
ylab("Number of correct responses") +
ggtitle("Correct responses per quartile for each block (2x3)") +
theme_bw()+
stat_summary(fun.y=median, geom="smooth", aes(group=0),lwd=1,col=wes_cols[2])+
geom_jitter(position = position_jitter(0.2)) +
facet_grid(.~block)
