2420,1555,2050,1727,
2151,1699,2244,2369,
2855,1902,930,1580,
2677,1463,2480,2062,
2718,1019,1901,1396)
itifeedback
ggplot(itifeedback) +
geom_histogram(breaks=seq(20, 50, by=2),
col="red",
fill="green",
alpha = .2) +
labs(title="Histogram for Age", x="Age", y="Count") +
xlim(c(18,52)) +
ylim(c(0,30))
itifeedback <- data.frame(itifeedback)
itifeedback
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram()
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(bindwidth=1)
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=1)
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=1) +
scale_x_continuous(name = "Mean ozone in\nparts per billion",
breaks = seq(500, 3000, 1),
limits=c(0, 3000)) +
scale_y_continuous(name = "Count")
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=10) +
scale_x_continuous(name = "Mean ozone in\nparts per billion",
breaks = seq(500, 3000, 50),
limits=c(0, 3000)) +
scale_y_continuous(name = "Count")
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=10) +
scale_x_continuous(name = "Mean ozone in\nparts per billion",
breaks = seq(750, 3000, 50),
limits=c(750, 3000)) +
scale_y_continuous(name = "Count")
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=5) +
scale_x_continuous(name = "Mean ozone in\nparts per billion",
breaks = seq(750, 3000, 50),
limits=c(750, 3000)) +
scale_y_continuous(name = "Count")
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=2) +
scale_x_continuous(name = "Mean ozone in\nparts per billion",
breaks = seq(750, 3000, 50),
limits=c(750, 3000)) +
scale_y_continuous(name = "Count")
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=2) +
scale_x_continuous(name = "Mean ozone in\nparts per billion",
breaks = seq(750, 3000, 500),
limits=c(750, 3000)) +
scale_y_continuous(name = "Count")
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=2) +
scale_x_continuous(name = "Mean ozone in\nparts per billion",
breaks = seq(750, 3000, 500),
limits=c(750, 3000)) +
scale_y_continuous(name = "Count") +
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=2) +
scale_x_continuous(name = "Mean ozone in\nparts per billion",
breaks = seq(750, 3000, 500),
limits=c(750, 3000)) +
scale_y_continuous(name = "Count") +
geom_density()
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=2) +
scale_x_continuous(name = "Mean ozone in\nparts per billion",
breaks = seq(750, 3000, 500),
limits=c(750, 3000)) +
scale_y_continuous(name = "Count") +
geom_density()
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=2) +
scale_x_continuous(name = "Mean ozone in\nparts per billion",
breaks = seq(750, 3000, 500),
limits=c(750, 3000)) +
scale_y_continuous(name = "Count") +
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=2) +
scale_x_continuous(name = "Mean ozone in\nparts per billion",
breaks = seq(750, 3000, 500),
limits=c(750, 3000)) +
scale_y_continuous(name = "Count")
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=2) +
scale_x_continuous(name = "Mean ozone in\nparts per billion",
breaks = seq(750, 3000, 500),
limits=c(750, 3000)) +
scale_y_continuous(name = "Count")
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=2) +
scale_x_continuous(name = "Mean ozone in\nparts per billion",
breaks = seq(750, 3000, 500),
limits=c(750, 3000)) +
scale_y_continuous(name = "Count") +
geom_rug()
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=500) +
scale_x_continuous(name = "Mean ozone in\nparts per billion",
breaks = seq(750, 3000, 500),
limits=c(750, 3000)) +
scale_y_continuous(name = "Count") +
geom_rug()
3
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=250) +
scale_x_continuous(name = "Mean ozone in\nparts per billion",
breaks = seq(750, 3000, 500),
limits=c(750, 3000)) +
scale_y_continuous(name = "Count") +
geom_rug()
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=100) +
scale_x_continuous(name = "Mean ozone in\nparts per billion",
breaks = seq(750, 3000, 500),
limits=c(750, 3000)) +
scale_y_continuous(name = "Count") +
geom_rug()
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=100) +
scale_x_continuous(name = "Mean ozone in\nparts per billion",
breaks = seq(750, 3000, 500),
limits=c(750, 3000)) +
scale_y_continuous(name = "Count") +
geom_rug(alpha=1/2)
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=100) +
scale_x_continuous(name = "Distribution of ITI feedbacks",
breaks = seq(750, 3000, 500),
limits=c(750, 3000),
col = "red",
fill="green") +
scale_y_continuous(name = "Count") +
geom_rug(alpha=1/2)
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=100) +
scale_x_continuous(name = "Distribution of ITI feedbacks",
breaks = seq(750, 3000, 500),
limits=c(750, 3000),
col = "red",
fill="green") +
scale_y_continuous(name = "Count") +
geom_rug(alpha=1/2)
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=100) +
scale_x_continuous(name = "Distribution of ITI feedbacks",
breaks = seq(750, 3000, 500),
limits=c(750, 3000),
col = "red",
fill="green") +
scale_y_continuous(name = "Count") +
geom_rug(alpha=1/2)
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=100,c ol = "red", fill="green") +
scale_x_continuous(name = "Distribution of ITI feedbacks",
breaks = seq(750, 3000, 500),
limits=c(750, 3000)) +
scale_y_continuous(name = "Count") +
geom_rug(alpha=1/2)
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=100,col = "red", fill="green") +
scale_x_continuous(name = "Distribution of ITI feedbacks",
breaks = seq(750, 3000, 500),
limits=c(750, 3000)) +
scale_y_continuous(name = "Count") +
geom_rug(alpha=1/2)
wes_cols= wes_palette("GrandBudapest1", n = 2)
cols <- wes_palette("Darjeeling2", n = 4)
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=100,col = cols[1], fill=cols[2]) +
scale_x_continuous(name = "Distribution of ITI feedbacks",
breaks = seq(750, 3000, 500),
limits=c(750, 3000)) +
scale_y_continuous(name = "Count") +
geom_rug(alpha=1/2)
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=100,col = cols[3], fill=cols[2]) +
scale_x_continuous(name = "Distribution of ITI feedbacks",
breaks = seq(750, 3000, 500),
limits=c(750, 3000)) +
scale_y_continuous(name = "Count") +
geom_rug(alpha=1/2)
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=100,col = cols[2], fill=cols[3]) +
scale_x_continuous(name = "Distribution of ITI feedbacks",
breaks = seq(750, 3000, 500),
limits=c(750, 3000)) +
scale_y_continuous(name = "Count") +
geom_rug(alpha=1/2)
ggplot(data=itifeedback) + aes(itifeedback) + geom_histogram(binwidth=100,col = cols[2], fill=cols[1]) +
scale_x_continuous(name = "Distribution of ITI feedbacks",
breaks = seq(750, 3000, 500),
limits=c(750, 3000)) +
scale_y_continuous(name = "Count") +
geom_rug(alpha=1/2)
gather_data <- function(files){
# summarize all data in 1 data frame
datalist <- list()
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
D <- cbind(rep(substr(files[i],3,6),dim(D)[1]),D)
#D<-D[D$resp!=0,] # remove 'too slow ' responses
### Rename and transform some columns
colnames(D)[1] <- "subj_idx"
#D[,1] <- strtoi(D[,1])
D$trial = as.integer(D$trial)
D$aStim = as.integer(D$aStim)
#colnames(D)[grep("rt",colnames(D))] <- "RT"
D[grep("rt",colnames(D))] <- D[grep("rt",colnames(D))]/1000 # RTs in seconds
# don't use grep here, because it will find all instances of 'resp' (even colnames with name respOnset)
#names(D)[names(D) == "fb"] <- "response"
#D <- as_tibble(cbind(D,paste(D$vFile,D$aFile)))
#colnames(D)[ncol(D)] <- "pair"
datalist[[i]] <- D
}
transformed <- data.table::rbindlist(datalist) # combine all data frames in on
return(transformed)
}
compute_cumulative_sums <- function(data){
df_subj <- list()
#data<-data[data$choice!=0,] # remove 'too slow ' responses
new_data <- data[FALSE,]
new_cols <- data.frame(cumsum_fb = integer(0), trial_separate = integer(0))
new_data <- cbind(new_cols,new_data)
for(i in unique(data$subj_idx)){
df_subj[[i]] <- subset(data, subj_idx == i)
for(j in unique(df_subj[[i]]$block)){
df_subj_block <- subset(df_subj[[i]],block==j)
# compute cumulative sum for each auditory stimulus in a given block of a subject
for(k in unique(df_subj_block$aStim)){
df_subj_block_astim <- list()
df_subj_block_astim[[k]] <- subset(df_subj_block, aStim==k )
new_col <- cumsum(df_subj_block_astim[[k]]$fbprime)
new_col_trial <- 1:nrow(df_subj_block_astim[[k]])
new_cols <- cbind(new_col,new_col_trial)
df_subj_block_astim[[k]]<- as_tibble(cbind(new_cols,df_subj_block_astim[[k]]))
colnames(df_subj_block_astim[[k]])[c(1,2)] <- c("cumulsum_fb", "trial_separate")
new_data <- as_tibble(rbind(new_data,df_subj_block_astim[[k]]))
# reorder data
new_data <- new_data[
with(new_data, order(subj_idx, block,trial)),
]
}
}
}
return(as_tibble(new_data))
}
recompute_cumulative_sums <- function(data){
df_subj <- list()
#data<-data[data$choice!=0,] # remove 'too slow ' responses
new_data <- data[FALSE,]
new_cols <- data.frame(cumsum_fb = integer(0), trial_separate = integer(0))
new_data <- cbind(new_cols,new_data)
for(i in unique(data$subj_idx)){
df_subj[[i]] <- subset(data, subj_idx == i)
for(j in unique(df_subj[[i]]$block)){
df_subj_block <- subset(df_subj[[i]],block==j)
# compute cumulative sum for each auditory stimulus in a given block of a subject
for(k in unique(df_subj_block$aStim)){
df_subj_block_astim <- list()
df_subj_block_astim[[k]] <- subset(df_subj_block, aStim==k )
new_col_trial <- 1:nrow(df_subj_block_astim[[k]])
df_subj_block_astim[[k]]<- as_tibble(cbind(new_col_trial,df_subj_block_astim[[k]]))
colnames(df_subj_block_astim[[k]])[1] <- c("new_trial_separate")
new_data <- as_tibble(rbind(new_data,df_subj_block_astim[[k]]))
# reorder data
new_data <- new_data[
with(new_data, order(subj_idx, block,trial)),
]
}
}
}
return(as_tibble(new_data))
}
get_summary_stats <- function(data){
### #How many missing responses per block (fb == 2)
miss_per_block <- data %>%
select(subj_idx,RT, fb,block) %>%
filter(fb==2)  %>%
group_by(subjID,block) %>%
tally()
### #RTs per block
RT_per_block <- data %>%
select(subj_idx,RT, fb,block) %>%
filter(fb!=2)  %>%
group_by(subjID, fb,block) %>%
summarise(mean_rt = mean(RT))
### #RTs across blocks
RT_across_blocks <- data %>%
select(subjID,RT, fb) %>%
filter(fb!=2)  %>%
group_by(subjID, fb) %>%
summarise(mean_rt = mean(RT))
## hits per sextile
correct_per_quartile <- data %>%
select(subjID, fb,block, quartile) %>%
filter(fb==1) %>%
group_by(subjID,block,quartile) %>%
tally()
return(list(
"miss_per_block"=miss_per_block,"rt_per_block"=RT_per_block,"rt_across_blocks"=RT_across_blocks,"hits_per_sextile"=correct_per_sextile))
}
split_trials_24 <- function(data){
data$trial <- as.integer(data$trial)
data$quartile <- 0
data[which(data$trial <= 6),]$quartile = 1
data[which(data$trial > 6 & data$trial <= 12),]$quartile = 2
data[which(data$trial > 12 & data$trial <= 18),]$quartile = 3
data[which(data$trial > 18 & data$trial <= 24),]$quartile = 4
data <- data[
with(data, order(subj_idx, block,trial)),
]
return(data)
}
split_trials_32 <- function(data){
data$trial <- as.integer(data$trial)
data$quartile <- 0
data[which(data$trial <= 8),]$quartile = 1
data[which(data$trial > 8 & data$trial <= 16),]$quartile = 2
data[which(data$trial > 16 & data$trial <= 24),]$quartile = 3
data[which(data$trial > 24 & data$trial <= 32),]$quartile = 4
data <- data[
with(data, order(subj_idx, block,trial)),
]
return(data)
}
split_trials_octile <- function(data){
data$trial <- as.integer(data$trial)
data$octile <- 0
data[which(data$trial <= 8),]$octile = 1
data[which(data$trial > 8 & data$trial <= 16),]$octile = 2
data[which(data$trial > 16 & data$trial <= 24),]$octile = 3
data[which(data$trial > 24 & data$trial <= 32),]$octile = 4
data <- data[
with(data, order(subj_idx, block,trial)),
]
return(data)
}
wes_cols= wes_palette("GrandBudapest1", n = 2)
task <- "fbl_kloten"
## load data
#set directories
# make sure output directory exists already
diroutput <- "N:/Users/phaller/mri_task_analysis/data/piloting/analysis/"
dirinput1 <- "N:/Users/phaller/mri_task_analysis/data/piloting/piloting_kloten/2x3_24"
setwd(dirinput)
files1 <- dir(pattern=".txt", recursive=TRUE)
dirinput2 <- "N:/Users/phaller/mri_task_analysis/data/piloting/piloting_kloten/2x3_32"
setwd(dirinput2)
files2 <- dir(pattern=".txt", recursive=TRUE)
dirinput3 <- "N:/Users/phaller/mri_task_analysis/data/piloting/piloting_kloten/2x4_24"
setwd(dirinput3)
files3 <- dir(pattern=".txt", recursive=TRUE)
data1 <- gather_data(files1)
data2 <- gather_data(files2)
data3 <- gather_data(files3)
data1 <- gather_data(files1)
dirinput1 <- "N:/Users/phaller/mri_task_analysis/data/piloting/piloting_kloten/2x3_24"
setwd(dirinput1)
files1 <- dir(pattern=".txt", recursive=TRUE)
data1 <- gather_data(files1)
data1
data2
data3
gather_data <- function(files){
# summarize all data in 1 data frame
datalist <- list()
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
D <- cbind(rep(substr(files[i],20,21),dim(D)[1]),D)
#D<-D[D$resp!=0,] # remove 'too slow ' responses
### Rename and transform some columns
colnames(D)[1] <- "subj_idx"
#D[,1] <- strtoi(D[,1])
D$trial = as.integer(D$trial)
D$aStim = as.integer(D$aStim)
#colnames(D)[grep("rt",colnames(D))] <- "RT"
D[grep("rt",colnames(D))] <- D[grep("rt",colnames(D))]/1000 # RTs in seconds
# don't use grep here, because it will find all instances of 'resp' (even colnames with name respOnset)
#names(D)[names(D) == "fb"] <- "response"
#D <- as_tibble(cbind(D,paste(D$vFile,D$aFile)))
#colnames(D)[ncol(D)] <- "pair"
datalist[[i]] <- D
}
transformed <- data.table::rbindlist(datalist) # combine all data frames in on
return(transformed)
}
data1 <- gather_data(files1)
data1
gather_data <- function(files){
# summarize all data in 1 data frame
datalist <- list()
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
D <- cbind(rep(substr(files[i],21,22),dim(D)[1]),D)
#D<-D[D$resp!=0,] # remove 'too slow ' responses
### Rename and transform some columns
colnames(D)[1] <- "subj_idx"
#D[,1] <- strtoi(D[,1])
D$trial = as.integer(D$trial)
D$aStim = as.integer(D$aStim)
#colnames(D)[grep("rt",colnames(D))] <- "RT"
D[grep("rt",colnames(D))] <- D[grep("rt",colnames(D))]/1000 # RTs in seconds
# don't use grep here, because it will find all instances of 'resp' (even colnames with name respOnset)
#names(D)[names(D) == "fb"] <- "response"
#D <- as_tibble(cbind(D,paste(D$vFile,D$aFile)))
#colnames(D)[ncol(D)] <- "pair"
datalist[[i]] <- D
}
transformed <- data.table::rbindlist(datalist) # combine all data frames in on
return(transformed)
}
data1 <- gather_data(files1)
data1
data1 <- cbind(version=rep("2x3-24",nrow(data1)),data1)
data1
data1 <- gather_data(files1)
data1 <- cbind(version=rep("2x3-24",nrow(data1)),data1)
data2 <- gather_data(files2)
data2 <- cbind(version=rep("2x3-32",nrow(data2)),data2)
data3 <- gather_data(files3)
data3 <- cbind(version=rep("2x4-24",nrow(data3)),data3)
data <- rbind(data1,data2,data3)
data
dirinput1 <- "N:/Users/phaller/mri_task_analysis/data/piloting/piloting_kloten/2x3_24"
setwd(dirinput1)
files1 <- dir(pattern=".txt", recursive=TRUE)
dirinput2 <- "N:/Users/phaller/mri_task_analysis/data/piloting/piloting_kloten/2x3_32"
setwd(dirinput2)
files2 <- dir(pattern=".txt", recursive=TRUE)
dirinput3 <- "N:/Users/phaller/mri_task_analysis/data/piloting/piloting_kloten/2x4_24"
setwd(dirinput3)
files3 <- dir(pattern=".txt", recursive=TRUE)
data1 <- gather_data(files1)
data1 <- cbind(version=rep("2x3-24",nrow(data1)),data1)
data2 <- gather_data(files2)
data2 <- cbind(version=rep("2x3-32",nrow(data2)),data2)
data3 <- gather_data(files3)
data3 <- cbind(version=rep("2x4-24",nrow(data3)),data3)
data <- rbind(data1,data2,data3)
data
data1
data2
rm(data)
rm(data_2)
rm(data1)
rm(data2)
rm(data3)
dirinput1 <- "N:/Users/phaller/mri_task_analysis/data/piloting/piloting_kloten/2x3_24"
setwd(dirinput1)
files1 <- dir(pattern=".txt", recursive=TRUE)
dirinput2 <- "N:/Users/phaller/mri_task_analysis/data/piloting/piloting_kloten/2x3_32"
setwd(dirinput2)
files2 <- dir(pattern=".txt", recursive=TRUE)
dirinput3 <- "N:/Users/phaller/mri_task_analysis/data/piloting/piloting_kloten/2x4_24"
setwd(dirinput3)
files3 <- dir(pattern=".txt", recursive=TRUE)
data1 <- gather_data(files1)
data1
files
rm(files)
data1
data2
data1 <- gather_data(files1)
dirinput1 <- "N:/Users/phaller/mri_task_analysis/data/piloting/piloting_kloten/2x3_24"
setwd(dirinput1)
files1 <- dir(pattern=".txt", recursive=TRUE)
data1 <- gather_data(files1)
data1 <- cbind(version=rep("2x3-24",nrow(data1)),data1)
data2 <- gather_data(files2)
dirinput2 <- "N:/Users/phaller/mri_task_analysis/data/piloting/piloting_kloten/2x3_32"
setwd(dirinput2)
files2 <- dir(pattern=".txt", recursive=TRUE)
dirinput2 <- "N:/Users/phaller/mri_task_analysis/data/piloting/piloting_kloten/2x3_32"
setwd(dirinput2)
files2 <- dir(pattern=".txt", recursive=TRUE)
data2 <- gather_data(files2)
data2 <- cbind(version=rep("2x3-32",nrow(data2)),data2)
dirinput3 <- "N:/Users/phaller/mri_task_analysis/data/piloting/piloting_kloten/2x4_24"
setwd(dirinput3)
files3 <- dir(pattern=".txt", recursive=TRUE)
data3 <- gather_data(files3)
data3 <- cbind(version=rep("2x4-24",nrow(data3)),data3)
data <- rbind(data1,data2,data3)
data
missed_per_stimulus <-  data %>%
select(subj_idx, version, block, fb) %>%
filter(fb==2) %>%
group_by(version, subj_idx,block,.drop = FALSE) %>%
tally()
missed_per_stimulus
data[which(data$block==3),]
summary(data$block)
data[which(data$block==3),]$block <- rep(2,nrow(data[which(data$block==3),]))
unique(data$block)
data$block = as.factor(data$block)
levels(data$block) <- c("Block 1", "Block 2")
data
missed_per_stimulus <-  data %>%
select(subj_idx, version, block, fb) %>%
filter(fb==2) %>%
group_by(version, subj_idx,block,.drop = FALSE) %>%
tally()
missed_per_stimulus
ggplot(missed_counts_per_stimulus, aes(x=block, y=n, fill=version))+
geom_bar(stat="identity", position=position_dodge()) +
geom_hline(yintercept=0.75,linetype="dashed", color="red") +
#♦facet_wrap( ~ version, ncol=3) +
scale_fill_manual(values = wes_palette("Darjeeling2", n = 3))+
ggtitle("Omissions")
ggplot(missed_per_stimulus, aes(x=block, y=n, fill=version))+
geom_bar(stat="identity", position=position_dodge()) +
geom_hline(yintercept=0.75,linetype="dashed", color="red") +
#♦facet_wrap( ~ version, ncol=3) +
scale_fill_manual(values = wes_palette("Darjeeling2", n = 3))+
ggtitle("Omissions")
ggplot(missed_per_stimulus, aes(x=block, y=n, fill=version)) +
geom_boxplot()
ggplot(missed_per_stimulus, aes(x=block, y=n, fill=version)) +
geom_boxplot() +
geom_dotplot(binaxis='y', stackdir='center',
position=position_dodge(1))
ggplot(missed_per_stimulus, aes(x=block, y=n, fill=version)) +
geom_boxplot() +
geom_dotplot(binaxis='y', stackdir='center',
position=position_dodge(1)) +
scale_fill_brewer(palette="RdBu") + theme_minimal()
