if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS=-O3 -march=native -mtune=native",
if( grepl("^darwin", R.version$os)) "CXX14FLAGS += -arch x86_64 -ftemplate-depth-256" else
if (.Platform$OS.type == "windows") "CXX11FLAGS=-O3 -march=native -mtune=native" else
"CXX14FLAGS += -fPIC",
file = M, sep = "\n", append = TRUE)
library("rstan")
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
library("rstan")
detach("package:rstan", unload=TRUE)
library("rstan")
dataPath = "N:\\Users\\phaller\\R_hBayesDM\\gng_exampleData.txt"
output1 = gng_m1(data=dataPath, niter=2000, nwarmup=1000, nchain=4, ncore=4)
pkgbuild::has_build_tools(debug = TRUE)
library(hBayesDM)
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
.libPaths()
library(hBayesDM)
install.packages("hBayesDM", lib="C:\\Program Files\\R\\R-3.5.2\\library")
install.packages("hBayesDM", lib = "C:\\Program Files\\R\\R-3.5.2\\library")
install.packages("hBayesDM", lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
library("hBayesDM", lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
library("hBayesDM",dependencies = TRUE, lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
detach("package:Rcpp", unload=TRUE)
detach("package:hBayesDM", unload=TRUE)
library("rstan",lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
library("Rcpp",lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
library("Rcpp",lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
detach("package:StanHeaders", unload=TRUE)
detach("package:rstan", unload=TRUE)
detach("package:Rcpp", unload=TRUE)
detach("package:hBayesDM", unload=TRUE)
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan",lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
library("Rcpp",lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
library("hBayesDM",lib.loc = "C:\\Program Files\\R\\R-3.5.2\\library")
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
.libPaths()
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
library("hBayesDM")
library("hBayesDM")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
detach("package:hBayesDM", unload=TRUE)
.libPaths()
library(hBayesDM)
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
detach("package:hBayesDM", unload=TRUE)
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
detach("package:hBayesDM", unload=TRUE)
detach("package:Rcpp", unload=TRUE)
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
library("hBayesDM")
detach("package:hBayesDM", unload=TRUE)
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("StanHeaders", lib.loc="\\\\idnetapp-homes3.uzh.ch/phalle$/Documents/R/win-library/3.5")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
install.packages("StanHeaders", lib="C:\\Program Files\\R\\R-3.5.2\\library")
install.packages("StanHeaders", lib = "C:\\Program Files\\R\\R-3.5.2\\library")
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM")
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
output1 = gng_m1(data=dataPath, niter=20, nwarmup=5, nchain=4, ncore=4)
# check current library path (if default is already a valid name, jump the next section)
.libPaths()
assign(".lib.loc", "C:/Program Files/R/R-3.5.2/library", envir = environment(.libPaths))
library("StanHeaders", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rstan", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("Rcpp", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("hBayesDM", lib.loc="C:/Program Files/R/R-3.5.2/library")
dataPath = "N:/studies/AllRead/Feedback learning/ddmodeling"
ddm_model_abmp_adults = choiceRT_ddm(
paste(dataPath, "model_input_abmp_adults_test.txt", sep="/"), niter=4000, nwarmup=1000, nchain=4, ncore=4, inits="fixed",
RTbound=0.2)
save(ddm_model_abmp_adults, file = paste(dataPath, "model_abmp_adults_test_190401.RData", sep="/"))
plot(ddm_model_abmp_adults)
ddm_model_abmp_adults$fit
plot(ddm_model_abmp_adults$fit)
plot(ddm_model_abmp_adults, type="trace", inc_warmup=T)
plotInd(ddm_model_abmp_adults, "alpha")
plotInd(ddm_model_abmp_adults, "beta")
plotInd(ddm_model_abmp_adults, "delta")
plotInd(ddm_model_abmp_adults, "tau")
library(readr, lib="\\\\idnetapp-homes3.uzh.ch\\phalle$\\Documents\\R\\win-library\\3.5")
library(rstudioapi, lib="\\\\idnetapp-homes3.uzh.ch\\phalle$\\Documents\\R\\win-library\\3.5")
library(readr, lib="\\\\idnetapp-homes3.uzh.ch\\phalle$\\Documents\\R\\win-library\\3.5")
library(data.table, lib="\\\\idnetapp-homes3.uzh.ch\\phalle$\\Documents\\R\\win-library\\3.5")
library(dplyr, lib="\\\\idnetapp-homes3.uzh.ch\\phalle$\\Documents\\R\\win-library\\3.5")
library(ggplot2, lib="\\\\idnetapp-homes3.uzh.ch\\phalle$\\Documents\\R\\win-library\\3.5")
#set i
#set inputs
dirinput <- dirname(rstudioapi::getActiveDocumentContext()$path)
gather_data <- function(files){
datalist <- list()
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE, skip_empty_rows=TRUE)
D <- D[2:dim(D)[1],] # remove first row (with LR or RL )
D <- D[which(D$block==1|D$block==2|D$block==3|D$block==4),]  #exclude practice trials and unnecessary rows (e.g., with avg_resp). It should have now 200 x 4 = 800 rows
D <- cbind(rep(as.integer(substr(files[i],1,2)),dim(D)[1]),D)
D<-D[D$resp!=0,] # remove 'too slow ' responses
### Rename and transform some columns
colnames(D)[1] <- "subjID"
D[,1] <- as.factor(D[,1])
colnames(D)[grep("rt",colnames(D))] <- "RT"
D[grep("RT",colnames(D))] <- D[grep("RT",colnames(D))]/1000 # RTs in seconds
# if frame does contain the colname resp -> change
# don't use grep here, because it will find all instances of 'resp' (even colnames with name respOnset)
names(D)[names(D) == "resp"] <- "choice"
D <- D[complete.cases(D), ]
#D <- D[,c(grep("subjID",colnames(D)),grep("choice",colnames(D)),grep("RT",colnames(D)))]
D <- as_tibble(cbind(D,paste(D$vFile,D$aFile)))
colnames(D)[ncol(D)] <- "pair"
datalist[[i]] <- D
}
transformed <- data.table::rbindlist(datalist) # combine all data frames in on
return(transformed)
}
compute_cumulative_sums <- function(data){
data<-data[data$resp!=0,] # remove 'too slow ' responses
new_data <- data[FALSE,]
new_data["cumsum_fb"] <- NA
new_data["trial_separate"] <- NA
for(i in unique(data$subjID)){
df_subj[[i]] <- subset(data, subjID == i)
for(j in unique(df_subj[[i]]$block)){
df_subj_block <- subset(df_subj[[i]],block==j)
# compute cumulative sum for each sound-symbol pair in a given block of a subject
for(k in unique(df_subj_block$pair)){
df_subj_block_pair <- list()
df_subj_block_pair[[k]] <- subset(df_subj_block, pair==k)
new_col <- cumsum(df_subj_block_pair[[k]]$fb)
new_col_trial <- 1:nrow(df_subj_block_pair[[k]])
new_cols <- cbind(new_col,new_col_trial)
df_subj_block_pair[[k]]<- as_tibble(cbind(new_cols,df_subj_block_pair[[k]]))
colnames(df_subj_block_pair[[k]])[c(1,2)] <- c("cumsum_fb", "trial_separate")
new_data <- as_tibble(rbind(new_data,df_subj_block_pair[[k]]))
}
}
}
return(as_tibble(new_data))
}
get_summary_stats <- function(data){
### #How many missing responses per block (fb == 2)
miss_per_block <- data %>%
select(subjID,RT, fb,block) %>%
filter(fb==2)  %>%
group_by(subjID,block) %>%
tally()
### #RTs per block
RT_per_block <- data %>%
select(subjID,RT, fb,block) %>%
group_by(subjID, fb,block) %>%
summarise(mean_rt = mean(RT))
### #RTs across blocks
RT_across_blocks <- data %>%
select(subjID,RT, fb) %>%
group_by(subjID, fb) %>%
summarise(mean_rt = mean(RT))
return(list(
"miss_per_block"=miss_per_block,"rt_per_block"=RT_per_block,"rt_across_blocks"=RT_across_blocks))
}
data <- gather_data(files)
files <- dir(pattern=".txt")
setwd(dirinput)
files <- dir(pattern=".txt")
data <- gather_data(files)
summary_stats <- get_summary_stats(data)
data_with_cumsum <- compute_cumulative_sums(data)
data<-data[data$resp!=0,] # remove 'too slow ' responses
new_data <- data[FALSE,]
new_data["cumsum_fb"] <- NA
new_data["trial_separate"] <- NA
new_data["cumsum_fb"] <- "NA"
new_data["trial_separate"] <- "NA"
new_data <- cbind(new_1,new_2,new_data)
new_data <- cbind("new_1","new_2",new_data)
new_cols <- data.frame(new_1 = integer(0), new_2 = integer(0))
new_data <- cbind(new_cols,new_data)
View(new_data)
compute_cumulative_sums <- function(data){
data<-data[data$resp!=0,] # remove 'too slow ' responses
new_data <- data[FALSE,]
new_cols <- data.frame(cumsum_fb = integer(0), trial_separate = integer(0))
new_data <- cbind(new_cols,new_data)
for(i in unique(data$subjID)){
df_subj[[i]] <- subset(data, subjID == i)
for(j in unique(df_subj[[i]]$block)){
df_subj_block <- subset(df_subj[[i]],block==j)
# compute cumulative sum for each sound-symbol pair in a given block of a subject
for(k in unique(df_subj_block$pair)){
df_subj_block_pair <- list()
df_subj_block_pair[[k]] <- subset(df_subj_block, pair==k)
new_col <- cumsum(df_subj_block_pair[[k]]$fb)
new_col_trial <- 1:nrow(df_subj_block_pair[[k]])
new_cols <- cbind(new_col,new_col_trial)
df_subj_block_pair[[k]]<- as_tibble(cbind(new_cols,df_subj_block_pair[[k]]))
colnames(df_subj_block_pair[[k]])[c(1,2)] <- c("cumsum_fb", "trial_separate")
new_data <- as_tibble(rbind(new_data,df_subj_block_pair[[k]]))
}
}
}
return(as_tibble(new_data))
}
data_with_cumsum <- compute_cumulative_sums(data)
compute_cumulative_sums <- function(data){
df_subj <- list()
data<-data[data$resp!=0,] # remove 'too slow ' responses
new_data <- data[FALSE,]
new_cols <- data.frame(cumsum_fb = integer(0), trial_separate = integer(0))
new_data <- cbind(new_cols,new_data)
for(i in unique(data$subjID)){
df_subj[[i]] <- subset(data, subjID == i)
for(j in unique(df_subj[[i]]$block)){
df_subj_block <- subset(df_subj[[i]],block==j)
# compute cumulative sum for each sound-symbol pair in a given block of a subject
for(k in unique(df_subj_block$pair)){
df_subj_block_pair <- list()
df_subj_block_pair[[k]] <- subset(df_subj_block, pair==k)
new_col <- cumsum(df_subj_block_pair[[k]]$fb)
new_col_trial <- 1:nrow(df_subj_block_pair[[k]])
new_cols <- cbind(new_col,new_col_trial)
df_subj_block_pair[[k]]<- as_tibble(cbind(new_cols,df_subj_block_pair[[k]]))
colnames(df_subj_block_pair[[k]])[c(1,2)] <- c("cumsum_fb", "trial_separate")
new_data <- as_tibble(rbind(new_data,df_subj_block_pair[[k]]))
}
}
}
return(as_tibble(new_data))
}
data_with_cumsum <- compute_cumulative_sums(data)
View(data_with_cumsum)
gather_data <- function(files){
datalist <- list()
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE, skip_empty_rows=TRUE)
D <- D[2:dim(D)[1],] # remove first row (with LR or RL )
D <- D[which(D$block==1|D$block==2|D$block==3|D$block==4),]  #exclude practice trials and unnecessary rows (e.g., with avg_resp). It should have now 200 x 4 = 800 rows
D <- cbind(rep(as.integer(substr(files[i],1,2)),dim(D)[1]),D)
D<-D[D$resp!=0,] # remove 'too slow ' responses
### Rename and transform some columns
colnames(D)[1] <- "subjID"
D[,1] <- as.factor(D[,1])
D$trial = as.integer(D$trial)
colnames(D)[grep("rt",colnames(D))] <- "RT"
D[grep("RT",colnames(D))] <- D[grep("RT",colnames(D))]/1000 # RTs in seconds
# if frame does contain the colname resp -> change
# don't use grep here, because it will find all instances of 'resp' (even colnames with name respOnset)
names(D)[names(D) == "resp"] <- "choice"
D <- D[complete.cases(D), ]
#D <- D[,c(grep("subjID",colnames(D)),grep("choice",colnames(D)),grep("RT",colnames(D)))]
D <- as_tibble(cbind(D,paste(D$vFile,D$aFile)))
colnames(D)[ncol(D)] <- "pair"
datalist[[i]] <- D
}
transformed <- data.table::rbindlist(datalist) # combine all data frames in on
return(transformed)
}
data <- gather_data(files)
data_with_cumsum <- compute_cumulative_sums(data)
View(data_with_cumsum)
cumSumPlot <- ggplot(data=data_with_cumsum, aes(x=trial_separate, y=cumsum_fb, group=pair, color=pair)) +
geom_line()+
geom_point(aes(fill=pair),colour="black",alpha=.5, shape=21, size=3,position=position_dodge(0.2))+
facet_grid(rows = vars(subjID), vars(block)) +
scale_x_continuous(breaks = unique(trial_separate),limits=c(1,10.5))  +
scale_y_continuous(breaks = c(0,1,2,3,4,5,6,7,8,9,10),limits=c(0,10))   +
guides(alpha=FALSE)+
theme(axis.title = element_text(size=12),
title = element_text(size=14),
plot.subtitle = element_text(size=14,color="darkblue"),
legend.text=element_text(size=12),
panel.grid.major = element_line(colour="white"),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "gray88"))+
labs(title=paste(subjID[i]," Cumulative sum of hits per visual stimulus",sep=""),subtitle=paste("Block ",j,"(",paste(counts,collapse = " | "),")",sep = ""),size=12)
View(data_with_cumsum)
attach(data_with_cumsum)
cumSumPlot <- ggplot(data=data_with_cumsum, aes(x=trial_separate, y=cumsum_fb, group=pair, color=pair)) +
geom_line()+
geom_point(aes(fill=pair),colour="black",alpha=.5, shape=21, size=3,position=position_dodge(0.2))+
facet_grid(rows = vars(subjID), vars(block)) +
scale_x_continuous(breaks = unique(trial_separate),limits=c(1,10.5))  +
scale_y_continuous(breaks = c(0,1,2,3,4,5,6,7,8,9,10),limits=c(0,10))   +
guides(alpha=FALSE)+
theme(axis.title = element_text(size=12),
title = element_text(size=14),
plot.subtitle = element_text(size=14,color="darkblue"),
legend.text=element_text(size=12),
panel.grid.major = element_line(colour="white"),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "gray88"))+
labs(title=paste(subjID[i]," Cumulative sum of hits per visual stimulus",sep=""),subtitle=paste("Block ",j,"(",paste(counts,collapse = " | "),")",sep = ""),size=12)
attach(data_with_cumsum)
cumSumPlot <- ggplot(data=data_with_cumsum, aes(x=trial_separate, y=cumsum_fb, group=pair, color=pair)) +
geom_line()+
geom_point(aes(fill=pair),colour="black",alpha=.5, shape=21, size=3,position=position_dodge(0.2))+
facet_grid(rows = vars(subjID), vars(block)) +
scale_x_continuous(breaks = unique(trial_separate),limits=c(1,10.5))  +
scale_y_continuous(breaks = c(0,1,2,3,4,5,6,7,8,9,10),limits=c(0,10))   +
guides(alpha=FALSE)+
theme(axis.title = element_text(size=12),
title = element_text(size=14),
plot.subtitle = element_text(size=14,color="darkblue"),
legend.text=element_text(size=12),
panel.grid.major = element_line(colour="white"),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "gray88"))
#labs(title=paste(subjID[i]," Cumulative sum of hits per visual stimulus",sep=""),subtitle=paste("Block ",j,"(",paste(counts,collapse = " | "),")",sep = ""),size=12)
#labs(title=paste(subjID[i]," Cumulative sum of hits per visual stimulus",sep=""),subtitle=paste("Block ",j,"(",paste(counts,collapse = " | "),")",sep = ""),size=12)
cumSumPlot
cumSumPlot <- ggplot(data=data_with_cumsum, aes(x=trial_separate, y=cumsum_fb, group=pair, color=pair)) +
geom_line()+
geom_point(aes(fill=pair),colour="black",alpha=.5, shape=21, size=3,position=position_dodge(0.2))+
facet_grid(rows = vars(subjID), vars(block)) +
scale_x_continuous(breaks = unique(trial_separate),limits=c(1,6.5))  +
scale_y_continuous(breaks = c(0,1,2,3,4,5,6),limits=c(0,6))   +
guides(alpha=FALSE)+
theme(axis.title = element_text(size=12),
title = element_text(size=14),
plot.subtitle = element_text(size=14,color="darkblue"),
legend.text=element_text(size=12),
panel.grid.major = element_line(colour="white"),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "gray88"))
#labs(title=paste(subjID[i]," Cumulative sum of hits per visual stimulus",sep=""),subtitle=paste("Block ",j,"(",paste(counts,collapse = " | "),")",sep = ""),size=12)
cumSumPlot
attach(data_with_cumsum)
cumSumPlot <- ggplot(data=data_with_cumsum, aes(x=trial_separate, y=cumsum_fb, group=pair, color=pair)) +
geom_line()+
geom_point(aes(fill=pair),colour="black",alpha=.5, shape=21, size=3,position=position_dodge(0.2))+
facet_grid(rows = vars(subjID), vars(block)) +
scale_x_continuous(breaks = unique(trial_separate),limits=c(1,6.5))  +
scale_y_continuous(breaks = c(0,1,2,3,4,5,6),limits=c(0,6))   +
guides(alpha=FALSE)+
theme(axis.title = element_text(size=12),
title = element_text(size=14),
plot.subtitle = element_text(size=14,color="darkblue"),
legend.text=element_text(size=12),
panel.grid.major = element_line(colour="white"),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "gray88")) +
labs(title=paste(subjID," Cumulative sum of hits per visual stimulus",sep=""),subtitle=paste("Block ",block,"(",paste(counts,collapse = " | "),")",sep = ""),size=12)
cumSumPlot
attach(data_with_cumsum)
cumSumPlot <- ggplot(data=data_with_cumsum, aes(x=trial_separate, y=cumsum_fb, group=pair, color=pair)) +
geom_line()+
geom_point(aes(fill=pair),colour="black",alpha=.5, shape=21, size=3,position=position_dodge(0.2))+
facet_grid(rows = vars(subjID), vars(block)) +
scale_x_continuous(breaks = unique(trial_separate),limits=c(1,6.5))  +
scale_y_continuous(breaks = c(0,1,2,3,4,5,6),limits=c(0,6))   +
guides(alpha=FALSE)+
theme(axis.title = element_text(size=12),
title = element_text(size=14),
plot.subtitle = element_text(size=14,color="darkblue"),
legend.text=element_text(size=12),
panel.grid.major = element_line(colour="white"),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "gray88")) +
labs(title=paste(subjID," Cumulative sum of hits per visual stimulus",sep=""),subtitle=paste("Block ",block,size=12))
cumSumPlot
attach(data_with_cumsum)
cumSumPlot <- ggplot(data=data_with_cumsum, aes(x=trial_separate, y=cumsum_fb, group=pair, color=pair)) +
geom_line()+
geom_point(aes(fill=pair),colour="black",alpha=.5, shape=21, size=3,position=position_dodge(0.2))+
facet_grid(rows = vars(subjID), cols = vars(block)) +
scale_x_continuous(breaks = unique(trial_separate),limits=c(1,6.5))  +
scale_y_continuous(breaks = c(0,1,2,3,4,5,6),limits=c(0,6))   +
guides(alpha=FALSE)+
theme(axis.title = element_text(size=12),
title = element_text(size=14),
plot.subtitle = element_text(size=14,color="darkblue"),
legend.text=element_text(size=12),
panel.grid.major = element_line(colour="white"),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "gray88")) +
labs(title=paste(subjID," Cumulative sum of hits per visual stimulus",sep=""),subtitle=paste("Block ",block,size=12))
cumSumPlot
install.packages("gridExtra")
df <- split(cumSumPlot,f = cumSumPlot$var)
df <- split(cumSumPlot,f = cumSumPlot$subjID)
library(gridExtra)
df <- split(cumSumPlot,f = cumSumPlot$subjID)
df <- split(data_with_cumsum,f = data_with_cumsum$subjID)
df <- split(data_with_cumsum,f = data_with_cumsum$subjID,  data_with_cumsum$block )
df <- split(data_with_cumsum,f = data_with_cumsum$subjID, g=data_with_cumsum$block )
df2 <- split(df2, f = df2$block)
df2 <- split(df, f = df$block)
attach(df)
for(i in df){
cumSumPlot <- ggplot(data=df$i, aes(x=trial_separate, y=cumsum_fb, group=pair, color=pair)) +
geom_line()+
geom_point(aes(fill=pair),colour="black",alpha=.5, shape=21, size=3,position=position_dodge(0.2))+
facet_grid(cols = vars(block)) +
scale_x_continuous(breaks = unique(trial_separate),limits=c(1,6.5))  +
scale_y_continuous(breaks = c(0,1,2,3,4,5,6),limits=c(0,6))   +
guides(alpha=FALSE)+
theme(axis.title = element_text(size=12),
title = element_text(size=14),
plot.subtitle = element_text(size=14,color="darkblue"),
legend.text=element_text(size=12),
panel.grid.major = element_line(colour="white"),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "gray88")) +
labs(title=paste(subjID," Cumulative sum of hits per visual stimulus",sep=""),subtitle=paste("Block ",block,size=12))
ggsave(cumSumPlot, file=paste("Accuracy","Subj_",i,"_B",block,".png", sep=""),width = 6, height = 6, scale=1)
}
df$1
for(i in df){
print(i)
}
for(i in df){
cumSumPlot <- ggplot(data=i, aes(x=trial_separate, y=cumsum_fb, group=pair, color=pair)) +
geom_line()+
geom_point(aes(fill=pair),colour="black",alpha=.5, shape=21, size=3,position=position_dodge(0.2))+
facet_grid(cols = vars(block)) +
scale_x_continuous(breaks = unique(trial_separate),limits=c(1,6.5))  +
scale_y_continuous(breaks = c(0,1,2,3,4,5,6),limits=c(0,6))   +
guides(alpha=FALSE)+
theme(axis.title = element_text(size=12),
title = element_text(size=14),
plot.subtitle = element_text(size=14,color="darkblue"),
legend.text=element_text(size=12),
panel.grid.major = element_line(colour="white"),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "gray88")) +
labs(title=paste(subjID," Cumulative sum of hits per visual stimulus",sep=""),subtitle=paste("Block ",block,size=12))
ggsave(cumSumPlot, file=paste("Accuracy","Subj_",i,"_B",block,".png", sep=""),width = 6, height = 6, scale=1)
}
for(i in df){
cumSumPlot <- ggplot(data=i, aes(x=trial_separate, y=cumsum_fb, group=pair, color=pair)) +
geom_line()+
geom_point(aes(fill=pair),colour="black",alpha=.5, shape=21, size=3,position=position_dodge(0.2))+
facet_grid(cols = vars(block)) +
scale_x_continuous(breaks = unique(trial_separate),limits=c(1,6.5))  +
scale_y_continuous(breaks = c(0,1,2,3,4,5,6),limits=c(0,6))   +
guides(alpha=FALSE)+
theme(axis.title = element_text(size=12),
title = element_text(size=14),
plot.subtitle = element_text(size=14,color="darkblue"),
legend.text=element_text(size=12),
panel.grid.major = element_line(colour="white"),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "gray88")) +
labs(title=paste(subjID," Cumulative sum of hits per visual stimulus",sep=""),subtitle=paste("Block ",block,size=12))
}
attach(df)
for(i in df){
cumSumPlot <- ggplot(data=i, aes(x=trial_separate, y=cumsum_fb, group=pair, color=pair)) +
geom_line()+
geom_point(aes(fill=pair),colour="black",alpha=.5, shape=21, size=3,position=position_dodge(0.2))+
facet_grid(cols = vars(block)) +
scale_x_continuous(breaks = unique(trial_separate),limits=c(1,6.5))  +
scale_y_continuous(breaks = c(0,1,2,3,4,5,6),limits=c(0,6))   +
guides(alpha=FALSE)+
theme(axis.title = element_text(size=12),
title = element_text(size=14),
plot.subtitle = element_text(size=14,color="darkblue"),
legend.text=element_text(size=12),
panel.grid.major = element_line(colour="white"),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "gray88")) +
labs(title=paste(subjID," Cumulative sum of hits per visual stimulus",sep=""),subtitle=paste("Block ",block,size=12))
ggsave(cumSumPlot, file=paste("Accuracy","Subj_",i$subjID,".png", sep=""),width = 6, height = 6, scale=1)
}
i$subjID
i$subjID[1]
i$subjID[2]
i$subjID[1,]
i$subjID[1]
type(i$subjID[1])
attach(df)
for(i in df){
cumSumPlot <- ggplot(data=i, aes(x=trial_separate, y=cumsum_fb, group=pair, color=pair)) +
geom_line()+
geom_point(aes(fill=pair),colour="black",alpha=.5, shape=21, size=3,position=position_dodge(0.2))+
facet_grid(cols = vars(block)) +
scale_x_continuous(breaks = unique(trial_separate),limits=c(1,6.5))  +
scale_y_continuous(breaks = c(0,1,2,3,4,5,6),limits=c(0,6))   +
guides(alpha=FALSE)+
theme(axis.title = element_text(size=12),
title = element_text(size=14),
plot.subtitle = element_text(size=14,color="darkblue"),
legend.text=element_text(size=12),
panel.grid.major = element_line(colour="white"),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "gray88")) +
labs(title=paste(subjID," Cumulative sum of hits per visual stimulus",sep=""),subtitle=paste("Block ",block,size=12))
ggsave(cumSumPlot, file=paste("Accuracy","Subj_",i$subjID[1],".png", sep=""),width = 6, height = 6, scale=1)
}
View(df)
View(i)
