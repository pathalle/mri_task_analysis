ddply(illusion_data,~illusion_nr,summarise,mean=mean(distortion),sd=sd(distortion),min=min(distortion))
ddply(illusion_data,~illusion_nr,summarise,mean=mean(distortion),sd=sd(distortion),min=min(distortion))
ddply(illusion_data,~illusion_nr,summarise,mean=mean(distortion),sd=sd(distortion),min=min(distortion)), max=max(distortion))
ddply(illusion_data,~illusion_nr,summarise,mean=mean(distortion),sd=sd(distortion),min=min(distortion), max=max(distortion))
boxplot(illusion_data$distortion ~ illusion_data$illusion_nr)
aov(model1)
aov(illusion_data$distortion)
stortion)
aov(illusion_data$distortion)
anova(illusion_data$distortion)
fit_full <- lm( distortion ~ ., data = illusion_data)
summary(fit_full)
step(fit_full)
fit <- lm(distortion ~ red_line_light, red_line_length, rotated, round, frequency, data=illusion_data)
fit <- lm(distortion ~ red_line_length, red_line_length, rotated, round, frequency, data=illusion_data)
boxplot(illusion_data$distortion ~ illusion_data$illusion_nr, xlab='Illusion variation', ylab='Distortion')
summary(lm(illusion_data$distortion~illusion_data$illusion_nr))
aov(lm(illusion_data$distortion~illusion_data$illusion_nr))
subset_data <- read.csv("~/Desktop/subset_data.csv")
View(subset_data)
fit_full <- lm( distortion ~ ., data = subset_data)
fit_full <- lm( distortion ~ ., data = subset_data)
summary(fit_full)
step(fit_full)
illusion_data <- read.csv("~/Desktop/illusion_data.csv")
View(illusion_data)
summary(lm(distortion~default, data=illusion_data))
chisq.test(distortion~default, data=illusion_data)
illusion_data <- read.csv("~/Desktop/illusion_data.csv")
View(illusion_data)
subset_data <- read.csv("~/Desktop/subset_data.csv")
View(subset_data)
aov(lm(illusion_data$distortion~illusion_data$default))
anova(lm(illusion_data$distortion~illusion_data$default))
summary(lm(illusion_data$distortion~illusion_data$default))
illusion_data <- read.csv("~/Desktop/illusion_data.csv")
View(illusion_data)
summary(lm(illusion_data$distortion~illusion_data$default))
boxplot(illusion_data$distortion ~ illusion_data$red_line_length + illusion_data$red_line_hight)
boxplot(illusion_data$distortion ~ illusion_data$red_line_length, fill=illusion_data$red_line_hight)
boxplot(illusion_data$distortion ~ illusion_data$red_line_length, col=illusion_data$red_line_hight)
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight)
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2)
col = c("red","sienna","palevioletred1","red","sienna","palevioletred1","red","sienna","palevioletred1")
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2,
col = c("red","sienna","palevioletred1","red","sienna","palevioletred1","red","sienna","palevioletred1")
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2,
col = c("red","sienna","palevioletred1","red","sienna","palevioletred1","red","sienna","palevioletred1"))
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2,
col = c("red","sienna","palevioletred1","red","sienna","palevioletred1","red","sienna","palevioletred1"))
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2,
col = c("lightred","sienna","palevioletred1","red","sienna","palevioletred1","red","sienna","palevioletred1"))
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2,
col = c("lightred","sienna","palevioletred1","red","sienna","palevioletred1","red","sienna","palevioletred1"))
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2,
col = c("indianred1","lightsalmon","palevioletred1","indianred1","lightsalmon","palevioletred1","indianred1","lightsalmon","palevioletred1"))
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2, ylab='distortion'
col = c("indianred1","lightsalmon","palevioletred1","indianred1","lightsalmon","palevioletred1","indianred1","lightsalmon","palevioletred1"),
names= c("long.high","mid.high","short.high","long.low","mid.low","short.low","long.mid","mid.mid","short.mid"))
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2, ylab='distortion',
col = c("indianred1","lightsalmon","palevioletred1","indianred1","lightsalmon","palevioletred1","indianred1","lightsalmon","palevioletred1"),
names= c("long.high","mid.high","short.high","long.low","mid.low","short.low","long.mid","mid.mid","short.mid"))
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2, ylab='Distortion',
col = c("indianred1","lightsalmon","palevioletred1","indianred1","lightsalmon","palevioletred1","indianred1","lightsalmon","palevioletred1"),
names= c("long.high","mid.high","short.high","long.low","mid.low","short.low","long.mid","mid.mid","short.mid"))
fit_full <- lm( distortion ~ ., data = subset_data)
summary(fit_full)
step(fit_full)
summary(lm(formula = distortion ~ illusion_nr + red_line_hight + red_line_length +
rotated + frequency, data = subset_data))
summary(lm(formula = distortion ~ rotated, data = subset_data))
t.test(distortion~rotated, data=subset_data)
illusion_data <- read.csv("illusion_data.csv")
subset_data <- read.csv("subset_data.csv")
require(plyr)
# visualize distortion values by variation
boxplot(illusion_data$distortion ~ illusion_data$illusion_nr, xlab='Illusion variation', ylab='Distortion')
boxplot(illusion_data$distortion ~ illusion_data$red_line_length +illusion_data$red_line_hight, las=2, ylab='Distortion',
col = c("indianred1","lightsalmon","palevioletred1","indianred1","lightsalmon","palevioletred1","indianred1","lightsalmon","palevioletred1"),
names= c("long.high","mid.high","short.high","long.low","mid.low","short.low","long.mid","mid.mid","short.mid"))
# get table of summary statistics
ddply(illusion_data,~illusion_nr,summarise,mean=mean(distortion),sd=sd(distortion),min=min(distortion), max=max(distortion))
# check if rotation is significant
summary(lm(formula = distortion ~ rotated, data = subset_data))
# perform stepwise regression
fit_full <- lm( distortion ~ ., data = subset_data)
step(fit_full)
summary(lm(formula = distortion ~ illusion_nr + red_line_hight + red_line_length +
rotated + frequency, data = subset_data))
# check if frequency is significant
summary(lm(formula = distortion ~ frequency(), data = subset_data))
# check if frequency is significant
summary(lm(formula = distortion ~ frequenc, data = subset_data))
# check if frequency is significant
summary(lm(formula = distortion ~ frequency, data = subset_data))
# check if rotation is significant
t.test(distortion ~ rotated, data=subset_data)
# check if rotation is significant
t.test(distortion ~ rotated, data=subset_data, var.equal=TRUE)
# check if frequency is significant
t.test(distortion ~ frequency, data=subset_data, var.equal=TRUE)
# check if rotation is significant
t.test(distortion ~ rotated, data=subset_data, var.equal=TRUE)
# check if rotation is significant
t.test(distortion ~ rotated, data=subset_data, var.equal=TRUE)
# check if frequency is significant
t.test(distortion ~ frequency, data=subset_data, var.equal=TRUE)
y = [1,2,3,4,5,6]
y = 1:10
x = 1:5
plot(x,y)
x = seq(1,5, num=10)
x = seq(1,5,10)
x = seq(1,5, 0.5)
x = seq(1,6, 0.5)
x = seq(1,5.5, 0.5)
plot(x,y)
plot(x^2,y)
plot(x^2+x,y)
plot(x^2+sqrt(x),y)
plot(x^5+sqrt(x),y)
0.192+0.144
0.192+0.144+0.048+0.216
0.192+0.144+0.192+0.064
1-0.592
0.048+0.096
0.4*0.408
(0.108+0.012/(0.108+0.012+0.016+0.064))
(0.108+0.012)/(0.108+0.012+0.016+0.064)
0.9*0.1
0.9*0.1+0.01*0.9
0.09/0.099
0.064+0.096
0.216+0.096
0.144+0.216+0.064+0.096
0.16/0.52
0.312/0.52
0.6*0.31
0.192+0.144
0.336/0.52
0.192+0.048
0.24+0.192+0.048
0.24/0.48
2*0.192
0.384/0.48
0.5*0.8
0.192+0.144
0.192/(0.192+0.048+0.048+0.192)
0.8/0.896
0.8*0.1
0.08/0.896
0.108/(0.108+0.012)
(0.108+0.072)/(0.108+0.012+0.072+0.008)
0.108/(0.108+0.012+0.016+0.064)
0.108/(0.108+0.012+0.072+0.008)
(0.108+0.016)/(0.108+0.012+0.016+0.064)
0.9*0.62
(0.108+0.016)/(0.108+0.012+0.072+0.008)
(0.108+0.012)/(0.108+0.012+0.072+0.008)
0.6*0.9
a = 2
c = -12-q
c = -12-x
c = -12-y
lesions <- read.csv("~/Desktop/lesions.csv")
View(lesions)
View(lesions)
View(lesions)
lesions <- read.csv("~/Desktop/lesions.csv")
View(lesions)
spread(lesions, lesions$)
library(tidyr)
install.packages("tidyr")
library(tidyr)
tidier <- spread(lesions, section, c(inf, ipsi, contra))
tidier <- spread(lesions, section, inf)
View(tidier)
tidier <- spread(lesions, id, inf)
View(lesions)
tidier
tidier <- spread(lesions, section, inf)
tidier
tidier <- spread(lesions, inf, section)
tidier
tidier <- spread(lesions, section, c(inf, ipsi, contra))
tidier <- lesions %>%
gather(key, val, -ID, -map, -timepoint)
tidier %>% head(8)
cos(0.59)
pbinom(3,0.5)
dbinom(3,0.5)
dbinom(x=0:3, prob=0.5)
dbinom(x=0:3, prob=0.5, size=3)
dbinom(x=0:3, prob=0.8, size=3)
dbinom(size=5, prob=0.5)
dbinom(x=0:6,size=5, prob=0.5)
dbinom(x=-1:6,size=5, prob=0.5)
d1=dbinom(x=-1:6,size=5, prob=0.5)
plot(d1)
d2=dbinom(x=-1:6,size=5, prob=0.3)
plot(d2)
d2=dbinom(x=-1:6,size=3, prob=0.3)
d1=dbinom(x=-1:6,size=3, prob=0.5)
plot(d1)
0.108+0.016+0.072+0.144
0.012+0.014+0.008+0.576
0.012+0.064+0.008+0.576
.5*.1*.99*.8
library(bnlearn)
install.packages("bnlearn")
install.packages("gRain")
T = []
T = [17/27 5/54 5/18 0; 11/27 22/189 0 10/21 2/9 0 59/153 20/51; 0 1/42 11/102 310/357]
T <- [17/27 5/54 5/18 0; 11/27 22/189 0 10/21 2/9 0 59/153 20/51; 0 1/42 11/102 310/357]
T <- c(17/27 5/54 5/18 0; 11/27 22/189 0 10/21 2/9 0 59/153 20/51; 0 1/42 11/102 310/357)
x <- 17/27 5/54 5/18 0 11/27 22/189 0 10/21 2/9 0 59/153 20/51 0 1/42 11/102 310/357)
x <- [17/27 5/54 5/18 0 11/27 22/189 0 10/21 2/9 0 59/153 20/51 0 1/42 11/102 310/357]
x
x <- c(17/27 5/54 5/18 0 11/27 22/189 0 10/21 2/9 0 59/153 20/51 0 1/42 11/102 310/357)
x <- c(17/27 ,5/54, 5/18, 0, 11/27, 22/189 ,0, 10/21, 2/9, 0, 59/153 ,20/51, 0 ,1/42, 11/102 ,310/357)
as.matrix(x,4,4)
as.matrix(x,nrow=4,ncol=4)
as.matrix(x,4,4, byrow=T)
as.matrix(x,4,4, byrow=F)
x <- c(17/27 ,5/54, 5/18, 0; 11/27, 22/189 ,0, 10/21; 2/9; 0, 59/153 ,20/51; 0 ,1/42, 11/102 ,310/357)
c
x
matrix(x, 4,4)
T = matrix(x, 4,4)
library(expm)
install.packages("expm")
T
T %^20%
d
library(expm)
T %^20%
d
T %^% 20
T %^% 100
x <- c(17/27 ,5/54, 5/18, 0, 11/27, 22/189 ,0, 10/21, 2/9, 0, 59/153 ,20/51, 0 ,1/42, 11/102 ,310/357)
T1 = matrix(x, 4,4)
T2 = matrix(x, 4,4)
T10 = matrix(x, 4,4)
T20 = matrix(x, 4,4)
T100 = matrix(x, 4,4)
T1 %^% 2
T
T1
T2
T2 <- %^% 2
T2 <- T%^% 2
T10 <- T%^% 10
T100 <- T%^% 100
T
T100
T2
T10
t100
T100
T1000 <- T%^% 1000
T1000
x = [1 2 3]
x= c(1,2,3)
w = c(0.5, 0.1, 0.9)
install.packages("hBayesDM")
library("hBayesDM", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
dataPath = system.file("extdata/gng_exampleData.txt", package="hBayesDM")
output1 = gng_m1(data="example", niter=20, nwarmup=5, nchain=4, ncore=4)
plot(output1, type="trace", fontSize=11)   # traceplot of hyper parameters. Set font size 11.
plot(output1, type="trace", inc_warmup=T)   # traceplot of hyper parameters w/ warmup samples
library(readr)
library(rstudioapi)
library(readr)
library(data.table)
#set inputs
dirinput <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirinput)
files <- dir(pattern=".txt")
#read data per file and combine in array
datalist <- list()
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE, skip_empty_rows=TRUE)
D <- D[2:dim(D)[1],] # remove first row (with LR or RL )
D <- D[which(D$block==1|D$block==2|D$block==3|D$block==4),]  #exclude practice trials and unnecessary rows (e.g., with avg_resp). It should have now 200 x 4 = 800 rows
D <- cbind(rep(as.integer(substr(files[i],14,15)),dim(D)[1]),D)
D<-D[D$resp!=0,] # remove 'too slow ' responses
colnames(D)[1] <- "subjID"
colnames(D)[grep("rt",colnames(D))] <- "RT"
D[grep("RT",colnames(D))] <- D[grep("RT",colnames(D))]/1000 # RTs in seconds
# if frame does contain the colname resp -> change
# don't use grep here, because it will find all instances of 'resp' (even colnames with name respOnset)
#names(D)[names(D) == "resp"] <- "choice"
D <- D[complete.cases(D), ]
#D <- D[,c(grep("subjID",colnames(D)),grep("choice",colnames(D)),grep("RT",colnames(D)))]
datalist[[i]] <- D
}
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
D <- D[2:dim(D)[1],] # remove first row (with LR or RL )
D <- D[which(D$block==1|D$block==2|D$block==3|D$block==4),]  #exclude practice trials and unnecessary rows (e.g., with avg_resp). It should have now 200 x 4 = 800 rows
D <- cbind(rep(as.integer(substr(files[i],14,15)),dim(D)[1]),D)
D<-D[D$resp!=0,] # remove 'too slow ' responses
colnames(D)[1] <- "subjID"
colnames(D)[grep("rt",colnames(D))] <- "RT"
D[grep("RT",colnames(D))] <- D[grep("RT",colnames(D))]/1000 # RTs in seconds
# if frame does contain the colname resp -> change
# don't use grep here, because it will find all instances of 'resp' (even colnames with name respOnset)
#names(D)[names(D) == "resp"] <- "choice"
D <- D[complete.cases(D), ]
#D <- D[,c(grep("subjID",colnames(D)),grep("choice",colnames(D)),grep("RT",colnames(D)))]
datalist[[i]] <- D
}
View(D)
#Save as CSV
#setwd(diroutput)
write.table(Gather,file = "performance_all_aduls.txt",sep="\t",row.names = FALSE,quote=FALSE)
Gather <- data.table::rbindlist(datalist) # combine all data frames in one
Gather <- data.table::rbindlist(datalist, fill=TRUE) # combine all data frames in one
View(Gather)
datalist <- list()
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
D <- D[2:dim(D)[1],] # remove first row (with LR or RL )
D <- D[which(D$block==1|D$block==2|D$block==3|D$block==4),]  #exclude practice trials and unnecessary rows (e.g., with avg_resp). It should have now 200 x 4 = 800 rows
D <- cbind(rep(as.integer(substr(files[i],14,15)),dim(D)[1]),D)
D<-D[D$resp!=0,] # remove 'too slow ' responses
colnames(D)[1] <- "subjID"
colnames(D)[grep("rt",colnames(D))] <- "RT"
D[grep("RT",colnames(D))] <- D[grep("RT",colnames(D))]/1000 # RTs in seconds
# if frame does contain the colname resp -> change
# don't use grep here, because it will find all instances of 'resp' (even colnames with name respOnset)
names(D)[names(D) == "vFile"] <- "v-File"
names(D)[names(D) == "aFile"] <- "a-File"
names(D)[names(D) == "vstim"] <- "Vstim"
names(D)[names(D) == "astim"] <- "Astim"
D <- D[complete.cases(D), ]
#D <- D[,c(grep("subjID",colnames(D)),grep("choice",colnames(D)),grep("RT",colnames(D)))]
datalist[[i]] <- D
}
Gather <- data.table::rbindlist(datalist, fill=TRUE) # combine all data frames in one
View(Gather)
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
D <- D[2:dim(D)[1],] # remove first row (with LR or RL )
D <- D[which(D$block==1|D$block==2|D$block==3|D$block==4),]  #exclude practice trials and unnecessary rows (e.g., with avg_resp). It should have now 200 x 4 = 800 rows
D <- cbind(rep(as.integer(substr(files[i],14,15)),dim(D)[1]),D)
D<-D[D$resp!=0,] # remove 'too slow ' responses
colnames(D)[1] <- "subjID"
colnames(D)[grep("rt",colnames(D))] <- "RT"
D[grep("RT",colnames(D))] <- D[grep("RT",colnames(D))]/1000 # RTs in seconds
# if frame does contain the colname resp -> change
# don't use grep here, because it will find all instances of 'resp' (even colnames with name respOnset)
names(D)[names(D) == "v-File"] <- "vFile"
names(D)[names(D) == "a-File"] <- "aFile"
names(D)[names(D) == "vstim"] <- "vStim"
names(D)[names(D) == "astim"] <- "aStim"
D <- D[complete.cases(D), ]
#D <- D[,c(grep("subjID",colnames(D)),grep("choice",colnames(D)),grep("RT",colnames(D)))]
datalist[[i]] <- D
}
Gather <- data.table::rbindlist(datalist, fill=TRUE) # combine all data frames in one
View(Gather)
#read data per file and combine in array
datalist <- list()
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
D <- D[2:dim(D)[1],] # remove first row (with LR or RL )
D <- D[which(D$block==1|D$block==2|D$block==3|D$block==4),]  #exclude practice trials and unnecessary rows (e.g., with avg_resp). It should have now 200 x 4 = 800 rows
D <- cbind(rep(as.integer(substr(files[i],14,15)),dim(D)[1]),D)
D<-D[D$resp!=0,] # remove 'too slow ' responses
colnames(D)[1] <- "subjID"
colnames(D)[grep("rt",colnames(D))] <- "RT"
D[grep("RT",colnames(D))] <- D[grep("RT",colnames(D))]/1000 # RTs in seconds
# if frame does contain the colname resp -> change
# don't use grep here, because it will find all instances of 'resp' (even colnames with name respOnset)
names(D)[names(D) == "V-File"] <- "vFile"
names(D)[names(D) == "A-File"] <- "aFile"
names(D)[names(D) == "Vstim"] <- "vStim"
names(D)[names(D) == "Astim"] <- "aStim"
D <- D[complete.cases(D), ]
#D <- D[,c(grep("subjID",colnames(D)),grep("choice",colnames(D)),grep("RT",colnames(D)))]
datalist[[i]] <- D
}
Gather <- data.table::rbindlist(datalist, fill=TRUE) # combine all data frames in one
View(Gather)
#read data per file and combine in array
datalist <- list()
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
D <- D[2:dim(D)[1],] # remove first row (with LR or RL )
D <- D[which(D$block==1|D$block==2|D$block==3|D$block==4),]  #exclude practice trials and unnecessary rows (e.g., with avg_resp). It should have now 200 x 4 = 800 rows
D <- cbind(rep(as.integer(substr(files[i],14,15)),dim(D)[1]),D)
D<-D[D$resp!=0,] # remove 'too slow ' responses
colnames(D)[1] <- "subjID"
colnames(D)[grep("rt",colnames(D))] <- "RT"
D[grep("RT",colnames(D))] <- D[grep("RT",colnames(D))]/1000 # RTs in seconds
# if frame does contain the colname resp -> change
# don't use grep here, because it will find all instances of 'resp' (even colnames with name respOnset)
names(D)[names(D) == "V-file"] <- "vFile"
names(D)[names(D) == "A-file"] <- "aFile"
names(D)[names(D) == "Vstim"] <- "vStim"
names(D)[names(D) == "Astim"] <- "aStim"
D <- D[complete.cases(D), ]
#D <- D[,c(grep("subjID",colnames(D)),grep("choice",colnames(D)),grep("RT",colnames(D)))]
datalist[[i]] <- D
}
View(Gather)
#read data per file and combine in array
datalist <- list()
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
D <- D[2:dim(D)[1],] # remove first row (with LR or RL )
D <- D[which(D$block==1|D$block==2|D$block==3|D$block==4),]  #exclude practice trials and unnecessary rows (e.g., with avg_resp). It should have now 200 x 4 = 800 rows
D <- cbind(rep(as.integer(substr(files[i],14,15)),dim(D)[1]),D)
D<-D[D$resp!=0,] # remove 'too slow ' responses
colnames(D)[1] <- "subjID"
colnames(D)[grep("rt",colnames(D))] <- "RT"
D[grep("RT",colnames(D))] <- D[grep("RT",colnames(D))]/1000 # RTs in seconds
# if frame does contain the colname resp -> change
# don't use grep here, because it will find all instances of 'resp' (even colnames with name respOnset)
names(D)[names(D) == "V-file"] <- "vFile"
names(D)[names(D) == "V-File"] <- "vFile"
names(D)[names(D) == "A-file"] <- "aFile"
names(D)[names(D) == "A-File"] <- "aFile"
names(D)[names(D) == "Vstim"] <- "vStim"
names(D)[names(D) == "Astim"] <- "aStim"
D <- D[complete.cases(D), ]
#D <- D[,c(grep("subjID",colnames(D)),grep("choice",colnames(D)),grep("RT",colnames(D)))]
datalist[[i]] <- D
}
View(Gather)
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
D <- D[2:dim(D)[1],] # remove first row (with LR or RL )
D <- D[which(D$block==1|D$block==2|D$block==3|D$block==4),]  #exclude practice trials and unnecessary rows (e.g., with avg_resp). It should have now 200 x 4 = 800 rows
D <- cbind(rep(as.integer(substr(files[i],14,15)),dim(D)[1]),D)
D<-D[D$resp!=0,] # remove 'too slow ' responses
colnames(D)[1] <- "subjID"
colnames(D)[grep("rt",colnames(D))] <- "RT"
D[grep("RT",colnames(D))] <- D[grep("RT",colnames(D))]/1000 # RTs in seconds
# if frame does contain the colname resp -> change
# don't use grep here, because it will find all instances of 'resp' (even colnames with name respOnset)
names(D)[names(D) == "V-file"] <- "vFile"
names(D)[names(D) == "V-File"] <- "vFile"
names(D)[names(D) == "A-file"] <- "aFile"
names(D)[names(D) == "A-File"] <- "aFile"
names(D)[names(D) == "Vstim"] <- "vStim"
names(D)[names(D) == "Astim"] <- "aStim"
D <- D[complete.cases(D), ]
#D <- D[,c(grep("subjID",colnames(D)),grep("choice",colnames(D)),grep("RT",colnames(D)))]
datalist[[i]] <- D
}
View(D)
D <- read_delim(
files[1],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
View(D)
colnames(D)
names(D)[names(D) == "V-file"] <- "vFile"
colnames(D)
setwd(dirinput)
files <- dir(pattern=".txt")
#read data per file and combine in array
datalist <- list()
for (i in 1:length(files)){
no_col <- max(count.fields(files[i], sep = "\t"))
D <- read_delim(
files[i],"\t", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
D <- D[2:dim(D)[1],] # remove first row (with LR or RL )
D <- D[which(D$block==1|D$block==2|D$block==3|D$block==4),]  #exclude practice trials and unnecessary rows (e.g., with avg_resp). It should have now 200 x 4 = 800 rows
D <- cbind(rep(as.integer(substr(files[i],14,15)),dim(D)[1]),D)
D<-D[D$resp!=0,] # remove 'too slow ' responses
colnames(D)[1] <- "subjID"
colnames(D)[grep("rt",colnames(D))] <- "RT"
D[grep("RT",colnames(D))] <- D[grep("RT",colnames(D))]/1000 # RTs in seconds
# if frame does contain the colname resp -> change
# don't use grep here, because it will find all instances of 'resp' (even colnames with name respOnset)
names(D)[names(D) == "V-file"] <- "vFile"
names(D)[names(D) == "V-File"] <- "vFile"
names(D)[names(D) == "A-file"] <- "aFile"
names(D)[names(D) == "A-File"] <- "aFile"
names(D)[names(D) == "Vstim"] <- "vStim"
names(D)[names(D) == "Astim"] <- "aStim"
D <- D[complete.cases(D), ]
#D <- D[,c(grep("subjID",colnames(D)),grep("choice",colnames(D)),grep("RT",colnames(D)))]
datalist[[i]] <- D
}
Gather <- data.table::rbindlist(datalist, fill=TRUE) # combine all data frames in one
View(Gather)
#Save as CSV
#setwd(diroutput)
write.table(Gather,file = "performance_all_aduls.txt",sep="\t",row.names = FALSE,quote=FALSE)
View(Gather)
new_D <- subset(D, subj == 1)
View(Gather)
new_D <- subset(Gather, subjID == 1)
View(new_D)
